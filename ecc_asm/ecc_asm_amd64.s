//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT Â·_mont_mod_mult(SB), $360-48

	MOVQ res+0(FP), DI
	MOVQ in1+8(FP), SI
	MOVQ in2+16(FP), DX
	MOVQ p+24(FP), CX
	MOVQ rr+32(FP), R8
	MOVQ k0+40(FP), R9
	MOVQ SP, BP
	ADDQ $32, SP
	ANDQ $-32, SP
	MOVQ BP, 320(SP)

	LONG $0x24548948; BYTE $0x68 // mov    qword [rsp + 104], rdx
	WORD $0x8b4c; BYTE $0x2e     // mov    r13, qword [rsi]
	WORD $0x8b48; BYTE $0x11     // mov    rdx, qword [rcx]
	LONG $0x2444894c; BYTE $0x10 // mov    qword [rsp + 16], r8
	WORD $0x8b4d; BYTE $0x18     // mov    r11, qword [r8]
	WORD $0x894c; BYTE $0xdb     // mov    rbx, r11
	QUAD $0x00000088248c894c     // mov    qword [rsp + 136], r9
	LONG $0xd9af0f49             // imul    rbx, r9
	LONG $0x245c8948; BYTE $0x50 // mov    qword [rsp + 80], rbx
	LONG $0xddaf0f49             // imul    rbx, r13
	WORD $0x8948; BYTE $0xd8     // mov    rax, rbx
	LONG $0x24548948; BYTE $0x30 // mov    qword [rsp + 48], rdx
	WORD $0xf748; BYTE $0xe2     // mul    rdx
	LONG $0x24048948             // mov    qword [rsp], rax
	LONG $0x24548948; BYTE $0x18 // mov    qword [rsp + 24], rdx
	LONG $0x08518b48             // mov    rdx, qword [rcx + 8]
	WORD $0x8948; BYTE $0xd8     // mov    rax, rbx
	LONG $0x24548948; BYTE $0x28 // mov    qword [rsp + 40], rdx
	WORD $0xf748; BYTE $0xe2     // mul    rdx
	WORD $0x8949; BYTE $0xc7     // mov    r15, rax
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x10518b48             // mov    rdx, qword [rcx + 16]
	WORD $0x8948; BYTE $0xd8     // mov    rax, rbx
	LONG $0x24548948; BYTE $0x48 // mov    qword [rsp + 72], rdx
	WORD $0xf748; BYTE $0xe2     // mul    rdx
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	WORD $0x8949; BYTE $0xd4     // mov    r12, rdx
	QUAD $0x000000d0248c8948     // mov    qword [rsp + 208], rcx
	LONG $0x18498b48             // mov    rcx, qword [rcx + 24]
	WORD $0x8948; BYTE $0xd8     // mov    rax, rbx
	LONG $0x244c8948; BYTE $0x38 // mov    qword [rsp + 56], rcx
	WORD $0xf748; BYTE $0xe1     // mul    rcx
	WORD $0x8949; BYTE $0xc6     // mov    r14, rax
	WORD $0x8949; BYTE $0xd2     // mov    r10, rdx
	LONG $0x247c034c; BYTE $0x18 // add    r15, qword [rsp + 24]
	WORD $0x114d; BYTE $0xc8     // adc    r8, r9
	WORD $0x114d; BYTE $0xe6     // adc    r14, r12
	LONG $0x00d28349             // adc    r10, 0
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0x246c894c; BYTE $0x18 // mov    qword [rsp + 24], r13
	WORD $0xf749; BYTE $0xe5     // mul    r13
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	WORD $0x8949; BYTE $0xd4     // mov    r12, rdx
	LONG $0x084e8b48             // mov    rcx, qword [rsi + 8]
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0x244c8948; BYTE $0x40 // mov    qword [rsp + 64], rcx
	WORD $0xf748; BYTE $0xe1     // mul    rcx
	WORD $0x8948; BYTE $0xc1     // mov    rcx, rax
	WORD $0x8949; BYTE $0xd5     // mov    r13, rdx
	QUAD $0x000000a824bc8948     // mov    qword [rsp + 168], rdi
	LONG $0x10568b48             // mov    rdx, qword [rsi + 16]
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0x24548948; BYTE $0x20 // mov    qword [rsp + 32], rdx
	WORD $0xf748; BYTE $0xe2     // mul    rdx
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	WORD $0x8948; BYTE $0xd3     // mov    rbx, rdx
	LONG $0x18568b48             // mov    rdx, qword [rsi + 24]
	LONG $0x245c894c; BYTE $0x60 // mov    qword [rsp + 96], r11
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0x24548948; BYTE $0x58 // mov    qword [rsp + 88], rdx
	WORD $0xf748; BYTE $0xe2     // mul    rdx
	WORD $0x014c; BYTE $0xe1     // add    rcx, r12
	WORD $0x114c; BYTE $0xef     // adc    rdi, r13
	WORD $0x1148; BYTE $0xd8     // adc    rax, rbx
	LONG $0x00d28348             // adc    rdx, 0
	WORD $0x014c; BYTE $0xf9     // add    rcx, r15
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x8949; BYTE $0xcf     // mov    r15, rcx
	WORD $0xff49; BYTE $0xc7     // inc    r15
	LONG $0xd6940f40             // sete    sil
	LONG $0x240c034c             // add    r9, qword [rsp]
	LONG $0xd1920f41             // setb    r9b
	JB   LBB0_2
	WORD $0x8949; BYTE $0xcf     // mov    r15, rcx

LBB0_2:
	WORD $0x2041; BYTE $0xf1 // and    r9b, sil
	WORD $0x0844; BYTE $0xcb // or    bl, r9b
	WORD $0x0149; BYTE $0xf8 // add    r8, rdi
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x894d; BYTE $0xc5 // mov    r13, r8
	WORD $0xff49; BYTE $0xc5 // inc    r13
	LONG $0xd6940f40         // sete    sil
	WORD $0xdb84             // test    bl, bl
	JNE  LBB0_4
	WORD $0x894d; BYTE $0xc5 // mov    r13, r8

LBB0_4:
	WORD $0x2040; BYTE $0xf3 // and    bl, sil
	WORD $0xd908             // or    cl, bl
	WORD $0x0149; BYTE $0xc6 // add    r14, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x894d; BYTE $0xf0 // mov    r8, r14
	WORD $0xff49; BYTE $0xc0 // inc    r8
	WORD $0x940f; BYTE $0xd3 // sete    bl
	WORD $0xc984             // test    cl, cl
	JNE  LBB0_6
	WORD $0x894d; BYTE $0xf0 // mov    r8, r14

LBB0_6:
	WORD $0xd920             // and    cl, bl
	WORD $0xc808             // or    al, cl
	WORD $0x0149; BYTE $0xd2 // add    r10, rdx
	LONG $0x2414920f         // setb    byte [rsp]
	WORD $0x894d; BYTE $0xd6 // mov    r14, r10
	WORD $0xff49; BYTE $0xc6 // inc    r14
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xc084             // test    al, al
	JNE  LBB0_8
	WORD $0x894d; BYTE $0xd6 // mov    r14, r10

LBB0_8:
	WORD $0xc120                         // and    cl, al
	LONG $0x24448b48; BYTE $0x10         // mov    rax, qword [rsp + 16]
	LONG $0x08708b48                     // mov    rsi, qword [rax + 8]
	WORD $0x8948; BYTE $0xf7             // mov    rdi, rsi
	LONG $0x245c8b4c; BYTE $0x18         // mov    r11, qword [rsp + 24]
	LONG $0xfbaf0f49                     // imul    rdi, r11
	WORD $0x014c; BYTE $0xff             // add    rdi, r15
	QUAD $0x00008824bcaf0f48; BYTE $0x00 // imul    rdi, qword [rsp + 136]
	WORD $0x8948; BYTE $0xf8             // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x30         // mul    qword [rsp + 48]
	LONG $0x24548948; BYTE $0x08         // mov    qword [rsp + 8], rdx
	QUAD $0x0000009024848948             // mov    qword [rsp + 144], rax
	WORD $0x8948; BYTE $0xf8             // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x28         // mul    qword [rsp + 40]
	WORD $0x8949; BYTE $0xd2             // mov    r10, rdx
	WORD $0x8949; BYTE $0xc1             // mov    r9, rax
	WORD $0x8948; BYTE $0xf8             // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x48         // mul    qword [rsp + 72]
	WORD $0x8948; BYTE $0xc3             // mov    rbx, rax
	WORD $0x8949; BYTE $0xd4             // mov    r12, rdx
	WORD $0x0c08; BYTE $0x24             // or    byte [rsp], cl
	WORD $0x8948; BYTE $0xf8             // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x38         // mul    qword [rsp + 56]
	QUAD $0x0000009824bc894c             // mov    qword [rsp + 152], r15
	WORD $0x8949; BYTE $0xd7             // mov    r15, rdx
	LONG $0x244c034c; BYTE $0x08         // add    r9, qword [rsp + 8]
	WORD $0x114c; BYTE $0xd3             // adc    rbx, r10
	LONG $0x245c8948; BYTE $0x78         // mov    qword [rsp + 120], rbx
	WORD $0x114c; BYTE $0xe0             // adc    rax, r12
	LONG $0x24448948; BYTE $0x70         // mov    qword [rsp + 112], rax
	LONG $0x00d78349                     // adc    r15, 0
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	WORD $0xf749; BYTE $0xe3             // mul    r11
	QUAD $0x00000090249c8b4c             // mov    r11, qword [rsp + 144]
	WORD $0x8948; BYTE $0xd1             // mov    rcx, rdx
	QUAD $0x000000a024848948             // mov    qword [rsp + 160], rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x40         // mul    qword [rsp + 64]
	WORD $0x8949; BYTE $0xd4             // mov    r12, rdx
	WORD $0x8949; BYTE $0xc2             // mov    r10, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x20         // mul    qword [rsp + 32]
	WORD $0x8948; BYTE $0xd3             // mov    rbx, rdx
	WORD $0x8948; BYTE $0xc7             // mov    rdi, rax
	LONG $0x24748948; BYTE $0x08         // mov    qword [rsp + 8], rsi
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x58         // mul    qword [rsp + 88]
	WORD $0x0149; BYTE $0xca             // add    r10, rcx
	WORD $0x114c; BYTE $0xe7             // adc    rdi, r12
	QUAD $0x0000008024bc8948             // mov    qword [rsp + 128], rdi
	WORD $0x1148; BYTE $0xd8             // adc    rax, rbx
	LONG $0x00d28348                     // adc    rdx, 0
	WORD $0x014d; BYTE $0xcd             // add    r13, r9
	WORD $0x920f; BYTE $0xd1             // setb    cl
	WORD $0x894d; BYTE $0xec             // mov    r12, r13
	WORD $0xff49; BYTE $0xc4             // inc    r12
	LONG $0xd7940f40                     // sete    dil
	QUAD $0x00000098249c034c             // add    r11, qword [rsp + 152]
	WORD $0x920f; BYTE $0xd3             // setb    bl
	JB   LBB0_10
	WORD $0x894d; BYTE $0xec             // mov    r12, r13

LBB0_10:
	LONG $0x2434b60f             // movzx    esi, byte [rsp]
	WORD $0x2040; BYTE $0xfb     // and    bl, dil
	WORD $0xd908                 // or    cl, bl
	LONG $0x2444034c; BYTE $0x78 // add    r8, qword [rsp + 120]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x894d; BYTE $0xc5     // mov    r13, r8
	WORD $0xff49; BYTE $0xc5     // inc    r13
	LONG $0xd7940f40             // sete    dil
	WORD $0xc984                 // test    cl, cl
	JNE  LBB0_12
	WORD $0x894d; BYTE $0xc5     // mov    r13, r8

LBB0_12:
	WORD $0x2040; BYTE $0xf9     // and    cl, dil
	WORD $0xcb08                 // or    bl, cl
	LONG $0x2474034c; BYTE $0x70 // add    r14, qword [rsp + 112]
	LONG $0xd0920f41             // setb    r8b
	WORD $0x894c; BYTE $0xf7     // mov    rdi, r14
	WORD $0xff48; BYTE $0xc7     // inc    rdi
	WORD $0x940f; BYTE $0xd1     // sete    cl
	WORD $0xdb84                 // test    bl, bl
	JNE  LBB0_14
	WORD $0x894c; BYTE $0xf7     // mov    rdi, r14

LBB0_14:
	WORD $0xcb20             // and    bl, cl
	WORD $0x0841; BYTE $0xd8 // or    r8b, bl
	WORD $0x0149; BYTE $0xf7 // add    r15, rsi
	WORD $0x894c; BYTE $0xfe // mov    rsi, r15
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	LONG $0xd1940f41         // sete    r9b
	WORD $0x8445; BYTE $0xc0 // test    r8b, r8b
	JNE  LBB0_16
	WORD $0x894c; BYTE $0xfe // mov    rsi, r15

LBB0_16:
	WORD $0x014d; BYTE $0xd4 // add    r12, r10
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x894d; BYTE $0xe6 // mov    r14, r12
	WORD $0xff49; BYTE $0xc6 // inc    r14
	LONG $0xd2940f41         // sete    r10b
	QUAD $0x000000a0249c034c // add    r11, qword [rsp + 160]
	WORD $0x920f; BYTE $0xd3 // setb    bl
	JB   LBB0_18
	WORD $0x894d; BYTE $0xe6 // mov    r14, r12

LBB0_18:
	WORD $0x2044; BYTE $0xd3 // and    bl, r10b
	WORD $0xd908             // or    cl, bl
	QUAD $0x0000008024ac034c // add    r13, qword [rsp + 128]
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x894d; BYTE $0xef // mov    r15, r13
	WORD $0xff49; BYTE $0xc7 // inc    r15
	LONG $0xd2940f41         // sete    r10b
	WORD $0xc984             // test    cl, cl
	JNE  LBB0_20
	WORD $0x894d; BYTE $0xef // mov    r15, r13

LBB0_20:
	WORD $0x2045; BYTE $0xc1 // and    r9b, r8b
	WORD $0x2044; BYTE $0xd1 // and    cl, r10b
	WORD $0xcb08             // or    bl, cl
	WORD $0x0148; BYTE $0xc7 // add    rdi, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x8949; BYTE $0xfb // mov    r11, rdi
	WORD $0xff49; BYTE $0xc3 // inc    r11
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB0_22
	WORD $0x8949; BYTE $0xfb // mov    r11, rdi

LBB0_22:
	LONG $0xf9b60f41         // movzx    edi, r9b
	WORD $0xcb20             // and    bl, cl
	WORD $0xd808             // or    al, bl
	WORD $0x0148; BYTE $0xd6 // add    rsi, rdx
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x8949; BYTE $0xf0 // mov    r8, rsi
	WORD $0xff49; BYTE $0xc0 // inc    r8
	WORD $0x940f; BYTE $0xd2 // sete    dl
	WORD $0xc084             // test    al, al
	JNE  LBB0_24
	WORD $0x8949; BYTE $0xf0 // mov    r8, rsi

LBB0_24:
	WORD $0xd020 // and    al, dl
	WORD $0xc108 // or    cl, al
	JNE  LBB0_25

LBB0_26:
	LONG $0x243c8948                     // mov    qword [rsp], rdi
	LONG $0x24448b48; BYTE $0x10         // mov    rax, qword [rsp + 16]
	LONG $0x10708b48                     // mov    rsi, qword [rax + 16]
	WORD $0x8948; BYTE $0xf1             // mov    rcx, rsi
	LONG $0x245c8b48; BYTE $0x18         // mov    rbx, qword [rsp + 24]
	LONG $0xcbaf0f48                     // imul    rcx, rbx
	WORD $0x014c; BYTE $0xf1             // add    rcx, r14
	QUAD $0x000088248caf0f48; BYTE $0x00 // imul    rcx, qword [rsp + 136]
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x30         // mul    qword [rsp + 48]
	WORD $0x8949; BYTE $0xd1             // mov    r9, rdx
	WORD $0x8949; BYTE $0xc4             // mov    r12, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x28         // mul    qword [rsp + 40]
	WORD $0x8949; BYTE $0xd5             // mov    r13, rdx
	QUAD $0x0000009024b4894c             // mov    qword [rsp + 144], r14
	WORD $0x8949; BYTE $0xc6             // mov    r14, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x48         // mul    qword [rsp + 72]
	WORD $0x8948; BYTE $0xd7             // mov    rdi, rdx
	WORD $0x8949; BYTE $0xc2             // mov    r10, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x38         // mul    qword [rsp + 56]
	WORD $0x014d; BYTE $0xce             // add    r14, r9
	WORD $0x114d; BYTE $0xea             // adc    r10, r13
	WORD $0x894d; BYTE $0xe5             // mov    r13, r12
	WORD $0x1148; BYTE $0xf8             // adc    rax, rdi
	QUAD $0x0000009824848948             // mov    qword [rsp + 152], rax
	LONG $0x00d28348                     // adc    rdx, 0
	LONG $0x24548948; BYTE $0x78         // mov    qword [rsp + 120], rdx
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	WORD $0xf748; BYTE $0xe3             // mul    rbx
	WORD $0x8949; BYTE $0xd4             // mov    r12, rdx
	LONG $0x24448948; BYTE $0x70         // mov    qword [rsp + 112], rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x40         // mul    qword [rsp + 64]
	WORD $0x8948; BYTE $0xd7             // mov    rdi, rdx
	WORD $0x8949; BYTE $0xc1             // mov    r9, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x20         // mul    qword [rsp + 32]
	WORD $0x8948; BYTE $0xd3             // mov    rbx, rdx
	WORD $0x8948; BYTE $0xc1             // mov    rcx, rax
	QUAD $0x0000008024b48948             // mov    qword [rsp + 128], rsi
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x58         // mul    qword [rsp + 88]
	WORD $0x014d; BYTE $0xe1             // add    r9, r12
	WORD $0x1148; BYTE $0xf9             // adc    rcx, rdi
	QUAD $0x000000a0248c8948             // mov    qword [rsp + 160], rcx
	WORD $0x1148; BYTE $0xd8             // adc    rax, rbx
	LONG $0x00d28348                     // adc    rdx, 0
	WORD $0x014d; BYTE $0xf7             // add    r15, r14
	WORD $0x920f; BYTE $0xd1             // setb    cl
	WORD $0x894c; BYTE $0xff             // mov    rdi, r15
	WORD $0xff48; BYTE $0xc7             // inc    rdi
	LONG $0xd6940f40                     // sete    sil
	QUAD $0x0000009024ac034c             // add    r13, qword [rsp + 144]
	WORD $0x920f; BYTE $0xd3             // setb    bl
	JB   LBB0_28
	WORD $0x894c; BYTE $0xff             // mov    rdi, r15

LBB0_28:
	WORD $0x2040; BYTE $0xf3 // and    bl, sil
	WORD $0xd908             // or    cl, bl
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x894c; BYTE $0xde // mov    rsi, r11
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	LONG $0xd2940f41         // sete    r10b
	WORD $0xc984             // test    cl, cl
	JNE  LBB0_30
	WORD $0x894c; BYTE $0xde // mov    rsi, r11

LBB0_30:
	WORD $0x2044; BYTE $0xd1 // and    cl, r10b
	WORD $0xcb08             // or    bl, cl
	QUAD $0x000000982484034c // add    r8, qword [rsp + 152]
	LONG $0xd2920f41         // setb    r10b
	WORD $0x894d; BYTE $0xc7 // mov    r15, r8
	WORD $0xff49; BYTE $0xc7 // inc    r15
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB0_32
	WORD $0x894d; BYTE $0xc7 // mov    r15, r8

LBB0_32:
	WORD $0xcb20                 // and    bl, cl
	WORD $0x0841; BYTE $0xda     // or    r10b, bl
	LONG $0x240c8b48             // mov    rcx, qword [rsp]
	LONG $0x244c0348; BYTE $0x78 // add    rcx, qword [rsp + 120]
	LONG $0xd0920f41             // setb    r8b
	WORD $0x8949; BYTE $0xce     // mov    r14, rcx
	WORD $0xff49; BYTE $0xc6     // inc    r14
	LONG $0xd3940f41             // sete    r11b
	WORD $0x8445; BYTE $0xd2     // test    r10b, r10b
	JNE  LBB0_34
	WORD $0x8949; BYTE $0xce     // mov    r14, rcx

LBB0_34:
	WORD $0x014c; BYTE $0xcf     // add    rdi, r9
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x8949; BYTE $0xfc     // mov    r12, rdi
	WORD $0xff49; BYTE $0xc4     // inc    r12
	LONG $0xd1940f41             // sete    r9b
	LONG $0x246c034c; BYTE $0x70 // add    r13, qword [rsp + 112]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB0_36
	WORD $0x8949; BYTE $0xfc     // mov    r12, rdi

LBB0_36:
	WORD $0x2045; BYTE $0xd3 // and    r11b, r10b
	WORD $0x2044; BYTE $0xcb // and    bl, r9b
	WORD $0xd908             // or    cl, bl
	QUAD $0x000000a024b40348 // add    rsi, qword [rsp + 160]
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xff49; BYTE $0xc1 // inc    r9
	LONG $0xd7940f40         // sete    dil
	WORD $0xc984             // test    cl, cl
	JNE  LBB0_38
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi

LBB0_38:
	WORD $0x0845; BYTE $0xd8 // or    r8b, r11b
	WORD $0x2040; BYTE $0xf9 // and    cl, dil
	WORD $0xcb08             // or    bl, cl
	WORD $0x0149; BYTE $0xc7 // add    r15, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x894d; BYTE $0xfa // mov    r10, r15
	WORD $0xff49; BYTE $0xc2 // inc    r10
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB0_40
	WORD $0x894d; BYTE $0xfa // mov    r10, r15

LBB0_40:
	LONG $0xf0b60f41         // movzx    esi, r8b
	WORD $0xcb20             // and    bl, cl
	WORD $0xd808             // or    al, bl
	WORD $0x0149; BYTE $0xd6 // add    r14, rdx
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x894d; BYTE $0xf5 // mov    r13, r14
	WORD $0xff49; BYTE $0xc5 // inc    r13
	WORD $0x940f; BYTE $0xd2 // sete    dl
	WORD $0xc084             // test    al, al
	JNE  LBB0_42
	WORD $0x894d; BYTE $0xf5 // mov    r13, r14

LBB0_42:
	WORD $0xd020             // and    al, dl
	WORD $0x894c; BYTE $0xe2 // mov    rdx, r12
	WORD $0xc108             // or    cl, al
	JNE  LBB0_43

LBB0_44:
	LONG $0x24348948                     // mov    qword [rsp], rsi
	LONG $0x24448b48; BYTE $0x10         // mov    rax, qword [rsp + 16]
	LONG $0x18708b48                     // mov    rsi, qword [rax + 24]
	WORD $0x8948; BYTE $0xf1             // mov    rcx, rsi
	LONG $0x24648b4c; BYTE $0x18         // mov    r12, qword [rsp + 24]
	LONG $0xccaf0f49                     // imul    rcx, r12
	QUAD $0x0000009024948948             // mov    qword [rsp + 144], rdx
	WORD $0x0148; BYTE $0xd1             // add    rcx, rdx
	QUAD $0x000088248caf0f48; BYTE $0x00 // imul    rcx, qword [rsp + 136]
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x30         // mul    qword [rsp + 48]
	WORD $0x8949; BYTE $0xd0             // mov    r8, rdx
	WORD $0x8949; BYTE $0xc6             // mov    r14, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x28         // mul    qword [rsp + 40]
	WORD $0x8949; BYTE $0xd7             // mov    r15, rdx
	WORD $0x8948; BYTE $0xc7             // mov    rdi, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x48         // mul    qword [rsp + 72]
	WORD $0x8948; BYTE $0xd3             // mov    rbx, rdx
	WORD $0x8949; BYTE $0xc3             // mov    r11, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x38         // mul    qword [rsp + 56]
	WORD $0x014c; BYTE $0xc7             // add    rdi, r8
	WORD $0x114d; BYTE $0xfb             // adc    r11, r15
	WORD $0x1148; BYTE $0xd8             // adc    rax, rbx
	QUAD $0x0000009824848948             // mov    qword [rsp + 152], rax
	LONG $0x00d28348                     // adc    rdx, 0
	LONG $0x24548948; BYTE $0x78         // mov    qword [rsp + 120], rdx
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	WORD $0xf749; BYTE $0xe4             // mul    r12
	WORD $0x8949; BYTE $0xd4             // mov    r12, rdx
	LONG $0x24448948; BYTE $0x70         // mov    qword [rsp + 112], rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x40         // mul    qword [rsp + 64]
	WORD $0x8948; BYTE $0xd3             // mov    rbx, rdx
	WORD $0x8949; BYTE $0xc0             // mov    r8, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x20         // mul    qword [rsp + 32]
	WORD $0x8949; BYTE $0xd7             // mov    r15, rdx
	WORD $0x8948; BYTE $0xc1             // mov    rcx, rax
	QUAD $0x000000a024b48948             // mov    qword [rsp + 160], rsi
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x58         // mul    qword [rsp + 88]
	WORD $0x014d; BYTE $0xe0             // add    r8, r12
	WORD $0x1148; BYTE $0xd9             // adc    rcx, rbx
	LONG $0x244c8948; BYTE $0x40         // mov    qword [rsp + 64], rcx
	WORD $0x114c; BYTE $0xf8             // adc    rax, r15
	LONG $0x00d28348                     // adc    rdx, 0
	LONG $0x24548948; BYTE $0x10         // mov    qword [rsp + 16], rdx
	WORD $0x0149; BYTE $0xf9             // add    r9, rdi
	WORD $0x920f; BYTE $0xd1             // setb    cl
	WORD $0x894d; BYTE $0xcc             // mov    r12, r9
	WORD $0xff49; BYTE $0xc4             // inc    r12
	LONG $0xd6940f40                     // sete    sil
	QUAD $0x0000009024b4034c             // add    r14, qword [rsp + 144]
	WORD $0x894c; BYTE $0xf2             // mov    rdx, r14
	WORD $0x920f; BYTE $0xd3             // setb    bl
	JB   LBB0_46
	WORD $0x894d; BYTE $0xcc             // mov    r12, r9

LBB0_46:
	WORD $0x2040; BYTE $0xf3 // and    bl, sil
	WORD $0xd908             // or    cl, bl
	WORD $0x014d; BYTE $0xda // add    r10, r11
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	LONG $0xd7940f40         // sete    dil
	WORD $0xc984             // test    cl, cl
	JNE  LBB0_48
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10

LBB0_48:
	WORD $0x2040; BYTE $0xf9 // and    cl, dil
	WORD $0xcb08             // or    bl, cl
	QUAD $0x0000009824ac034c // add    r13, qword [rsp + 152]
	LONG $0xd2920f41         // setb    r10b
	WORD $0x894c; BYTE $0xef // mov    rdi, r13
	WORD $0xff48; BYTE $0xc7 // inc    rdi
	LONG $0xd1940f41         // sete    r9b
	WORD $0xdb84             // test    bl, bl
	LONG $0x240c8b48         // mov    rcx, qword [rsp]
	JNE  LBB0_50
	WORD $0x894c; BYTE $0xef // mov    rdi, r13

LBB0_50:
	WORD $0x2044; BYTE $0xcb     // and    bl, r9b
	WORD $0x0841; BYTE $0xda     // or    r10b, bl
	LONG $0x244c0348; BYTE $0x78 // add    rcx, qword [rsp + 120]
	LONG $0xd1920f41             // setb    r9b
	WORD $0x8949; BYTE $0xcf     // mov    r15, rcx
	WORD $0xff49; BYTE $0xc7     // inc    r15
	LONG $0xd6940f41             // sete    r14b
	WORD $0x8445; BYTE $0xd2     // test    r10b, r10b
	JNE  LBB0_52
	WORD $0x8949; BYTE $0xcf     // mov    r15, rcx

LBB0_52:
	WORD $0x014d; BYTE $0xc4     // add    r12, r8
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894c; BYTE $0xe3     // mov    rbx, r12
	WORD $0xff48; BYTE $0xc3     // inc    rbx
	LONG $0x245c8948; BYTE $0x18 // mov    qword [rsp + 24], rbx
	LONG $0xd0940f41             // sete    r8b
	LONG $0x24540348; BYTE $0x70 // add    rdx, qword [rsp + 112]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB0_54
	LONG $0x2464894c; BYTE $0x18 // mov    qword [rsp + 24], r12

LBB0_54:
	WORD $0x2045; BYTE $0xd6     // and    r14b, r10b
	WORD $0x2044; BYTE $0xc3     // and    bl, r8b
	WORD $0xd908                 // or    cl, bl
	LONG $0x24740348; BYTE $0x40 // add    rsi, qword [rsp + 64]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x8949; BYTE $0xf0     // mov    r8, rsi
	WORD $0xff49; BYTE $0xc0     // inc    r8
	LONG $0xd2940f41             // sete    r10b
	WORD $0xc984                 // test    cl, cl
	JNE  LBB0_56
	WORD $0x8949; BYTE $0xf0     // mov    r8, rsi

LBB0_56:
	WORD $0x0845; BYTE $0xf1 // or    r9b, r14b
	WORD $0x2044; BYTE $0xd1 // and    cl, r10b
	WORD $0xcb08             // or    bl, cl
	WORD $0x0148; BYTE $0xc7 // add    rdi, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x8949; BYTE $0xfa // mov    r10, rdi
	WORD $0xff49; BYTE $0xc2 // inc    r10
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB0_58
	WORD $0x8949; BYTE $0xfa // mov    r10, rdi

LBB0_58:
	LONG $0xf1b60f41             // movzx    esi, r9b
	WORD $0xcb20                 // and    bl, cl
	WORD $0xd808                 // or    al, bl
	LONG $0x247c034c; BYTE $0x10 // add    r15, qword [rsp + 16]
	WORD $0x920f; BYTE $0xd2     // setb    dl
	WORD $0x894c; BYTE $0xff     // mov    rdi, r15
	WORD $0xff48; BYTE $0xc7     // inc    rdi
	WORD $0x940f; BYTE $0xd1     // sete    cl
	WORD $0xc084                 // test    al, al
	JNE  LBB0_60
	WORD $0x894c; BYTE $0xff     // mov    rdi, r15

LBB0_60:
	WORD $0xc820                 // and    al, cl
	WORD $0xc208                 // or    dl, al
	JNE  LBB0_61
	WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
	LONG $0x24442b48; BYTE $0x38 // sub    rax, qword [rsp + 56]
	JA   LBB0_71

LBB0_63:
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JNE  LBB0_71
	LONG $0x247c3b48; BYTE $0x38 // cmp    rdi, qword [rsp + 56]
	JAE  LBB0_70

LBB0_65:
	LONG $0x247c8948; BYTE $0x58 // mov    qword [rsp + 88], rdi
	LONG $0x2454894c; BYTE $0x40 // mov    qword [rsp + 64], r10
	LONG $0x2444894c; BYTE $0x10 // mov    qword [rsp + 16], r8
	JMP  LBB0_76

LBB0_70:
	LONG $0x24543b4c; BYTE $0x48 // cmp    r10, qword [rsp + 72]
	JBE  LBB0_66

LBB0_71:
	LONG $0x24442b4c; BYTE $0x28 // sub    r8, qword [rsp + 40]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894c; BYTE $0xc2     // mov    rdx, r8
	LONG $0x01ea8348             // sub    rdx, 1
	LONG $0x24548948; BYTE $0x10 // mov    qword [rsp + 16], rdx
	WORD $0x920f; BYTE $0xd2     // setb    dl
	LONG $0x24748b48; BYTE $0x18 // mov    rsi, qword [rsp + 24]
	LONG $0x24742b48; BYTE $0x30 // sub    rsi, qword [rsp + 48]
	LONG $0x24748948; BYTE $0x18 // mov    qword [rsp + 24], rsi
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB0_73
	LONG $0x2444894c; BYTE $0x10 // mov    qword [rsp + 16], r8

LBB0_73:
	WORD $0xd320                 // and    bl, dl
	WORD $0xd908                 // or    cl, bl
	LONG $0x24542b4c; BYTE $0x48 // sub    r10, qword [rsp + 72]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x894c; BYTE $0xd2     // mov    rdx, r10
	LONG $0x01ea8348             // sub    rdx, 1
	LONG $0xd6920f40             // setb    sil
	WORD $0xc984                 // test    cl, cl
	JNE  LBB0_75
	WORD $0x894c; BYTE $0xd2     // mov    rdx, r10

LBB0_75:
	WORD $0x2040; BYTE $0xf1     // and    cl, sil
	WORD $0xcb08                 // or    bl, cl
	WORD $0xb60f; BYTE $0xcb     // movzx    ecx, bl
	WORD $0x2948; BYTE $0xc8     // sub    rax, rcx
	LONG $0x24448948; BYTE $0x58 // mov    qword [rsp + 88], rax
	LONG $0x24548948; BYTE $0x40 // mov    qword [rsp + 64], rdx

LBB0_76:
	LONG $0x245c8b48; BYTE $0x50 // mov    rbx, qword [rsp + 80]
	LONG $0x244c8b48; BYTE $0x68 // mov    rcx, qword [rsp + 104]
	WORD $0x8b48; BYTE $0x31     // mov    rsi, qword [rcx]
	LONG $0xdeaf0f48             // imul    rbx, rsi
	WORD $0x8948; BYTE $0xd8     // mov    rax, rbx
	LONG $0x2464f748; BYTE $0x30 // mul    qword [rsp + 48]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x24448948; BYTE $0x70 // mov    qword [rsp + 112], rax
	WORD $0x8948; BYTE $0xd8     // mov    rax, rbx
	LONG $0x2464f748; BYTE $0x28 // mul    qword [rsp + 40]
	WORD $0x8949; BYTE $0xd2     // mov    r10, rdx
	WORD $0x8949; BYTE $0xc6     // mov    r14, rax
	WORD $0x8948; BYTE $0xd8     // mov    rax, rbx
	LONG $0x2464f748; BYTE $0x48 // mul    qword [rsp + 72]
	WORD $0x8949; BYTE $0xd3     // mov    r11, rdx
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	WORD $0x8948; BYTE $0xd8     // mov    rax, rbx
	LONG $0x2464f748; BYTE $0x38 // mul    qword [rsp + 56]
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	WORD $0x8949; BYTE $0xd4     // mov    r12, rdx
	LONG $0x08598b48             // mov    rbx, qword [rcx + 8]
	WORD $0x014d; BYTE $0xce     // add    r14, r9
	WORD $0x114c; BYTE $0xd7     // adc    rdi, r10
	WORD $0x114d; BYTE $0xd8     // adc    r8, r11
	LONG $0x00d48349             // adc    r12, 0
	LONG $0x24748948; BYTE $0x20 // mov    qword [rsp + 32], rsi
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x245c8b4c; BYTE $0x60 // mov    r11, qword [rsp + 96]
	WORD $0xf749; BYTE $0xe3     // mul    r11
	WORD $0x8949; BYTE $0xd2     // mov    r10, rdx
	WORD $0x8949; BYTE $0xc7     // mov    r15, rax
	LONG $0x241c8948             // mov    qword [rsp], rbx
	WORD $0x8948; BYTE $0xd8     // mov    rax, rbx
	WORD $0xf749; BYTE $0xe3     // mul    r11
	WORD $0x8948; BYTE $0xc3     // mov    rbx, rax
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x10418b48             // mov    rax, qword [rcx + 16]
	LONG $0x24448948; BYTE $0x50 // mov    qword [rsp + 80], rax
	WORD $0xf749; BYTE $0xe3     // mul    r11
	WORD $0x8948; BYTE $0xc6     // mov    rsi, rax
	WORD $0x8949; BYTE $0xd5     // mov    r13, rdx
	LONG $0x18418b48             // mov    rax, qword [rcx + 24]
	LONG $0x24448948; BYTE $0x68 // mov    qword [rsp + 104], rax
	WORD $0xf749; BYTE $0xe3     // mul    r11
	WORD $0x014c; BYTE $0xd3     // add    rbx, r10
	WORD $0x114c; BYTE $0xce     // adc    rsi, r9
	WORD $0x114c; BYTE $0xe8     // adc    rax, r13
	LONG $0x00d28348             // adc    rdx, 0
	WORD $0x014c; BYTE $0xf3     // add    rbx, r14
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x8949; BYTE $0xdb     // mov    r11, rbx
	WORD $0xff49; BYTE $0xc3     // inc    r11
	LONG $0xd1940f41             // sete    r9b
	LONG $0x247c034c; BYTE $0x70 // add    r15, qword [rsp + 112]
	LONG $0xd2920f41             // setb    r10b
	JB   LBB0_78
	WORD $0x8949; BYTE $0xdb     // mov    r11, rbx

LBB0_78:
	WORD $0x2045; BYTE $0xca // and    r10b, r9b
	WORD $0x0844; BYTE $0xd1 // or    cl, r10b
	WORD $0x0148; BYTE $0xf7 // add    rdi, rsi
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x8949; BYTE $0xfd // mov    r13, rdi
	WORD $0xff49; BYTE $0xc5 // inc    r13
	LONG $0xd6940f40         // sete    sil
	WORD $0xc984             // test    cl, cl
	JNE  LBB0_80
	WORD $0x8949; BYTE $0xfd // mov    r13, rdi

LBB0_80:
	WORD $0x2040; BYTE $0xf1 // and    cl, sil
	WORD $0xcb08             // or    bl, cl
	WORD $0x0149; BYTE $0xc0 // add    r8, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x894d; BYTE $0xc1 // mov    r9, r8
	WORD $0xff49; BYTE $0xc1 // inc    r9
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB0_82
	WORD $0x894d; BYTE $0xc1 // mov    r9, r8

LBB0_82:
	WORD $0xcb20             // and    bl, cl
	WORD $0xd808             // or    al, bl
	WORD $0x0149; BYTE $0xd4 // add    r12, rdx
	LONG $0xd0920f41         // setb    r8b
	WORD $0x894d; BYTE $0xe7 // mov    r15, r12
	WORD $0xff49; BYTE $0xc7 // inc    r15
	WORD $0x940f; BYTE $0xd3 // sete    bl
	WORD $0xc084             // test    al, al
	JNE  LBB0_84
	WORD $0x894d; BYTE $0xe7 // mov    r15, r12

LBB0_84:
	WORD $0xc320                         // and    bl, al
	LONG $0x24648b4c; BYTE $0x20         // mov    r12, qword [rsp + 32]
	WORD $0x894c; BYTE $0xe1             // mov    rcx, r12
	LONG $0x24748b4c; BYTE $0x08         // mov    r14, qword [rsp + 8]
	LONG $0xceaf0f49                     // imul    rcx, r14
	WORD $0x014c; BYTE $0xd9             // add    rcx, r11
	QUAD $0x000088248caf0f48; BYTE $0x00 // imul    rcx, qword [rsp + 136]
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x30         // mul    qword [rsp + 48]
	LONG $0x24548948; BYTE $0x60         // mov    qword [rsp + 96], rdx
	QUAD $0x000000d824848948             // mov    qword [rsp + 216], rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x28         // mul    qword [rsp + 40]
	WORD $0x8949; BYTE $0xd2             // mov    r10, rdx
	QUAD $0x00000090249c894c             // mov    qword [rsp + 144], r11
	WORD $0x8949; BYTE $0xc3             // mov    r11, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x48         // mul    qword [rsp + 72]
	WORD $0x8948; BYTE $0xc7             // mov    rdi, rax
	WORD $0x8948; BYTE $0xd6             // mov    rsi, rdx
	WORD $0x0841; BYTE $0xd8             // or    r8b, bl
	LONG $0x24448844; BYTE $0x70         // mov    byte [rsp + 112], r8b
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x38         // mul    qword [rsp + 56]
	WORD $0x8949; BYTE $0xd0             // mov    r8, rdx
	LONG $0x245c034c; BYTE $0x60         // add    r11, qword [rsp + 96]
	WORD $0x114c; BYTE $0xd7             // adc    rdi, r10
	QUAD $0x0000009824bc8948             // mov    qword [rsp + 152], rdi
	WORD $0x1148; BYTE $0xf0             // adc    rax, rsi
	LONG $0x24448948; BYTE $0x78         // mov    qword [rsp + 120], rax
	LONG $0x00d08349                     // adc    r8, 0
	WORD $0x894c; BYTE $0xe0             // mov    rax, r12
	QUAD $0x000000d824a48b4c             // mov    r12, qword [rsp + 216]
	WORD $0xf749; BYTE $0xe6             // mul    r14
	WORD $0x8948; BYTE $0xd3             // mov    rbx, rdx
	LONG $0x24448948; BYTE $0x60         // mov    qword [rsp + 96], rax
	LONG $0x24048b48                     // mov    rax, qword [rsp]
	WORD $0xf749; BYTE $0xe6             // mul    r14
	WORD $0x8948; BYTE $0xd6             // mov    rsi, rdx
	WORD $0x8949; BYTE $0xc2             // mov    r10, rax
	LONG $0x24448b48; BYTE $0x50         // mov    rax, qword [rsp + 80]
	WORD $0xf749; BYTE $0xe6             // mul    r14
	WORD $0x8948; BYTE $0xd1             // mov    rcx, rdx
	WORD $0x8948; BYTE $0xc7             // mov    rdi, rax
	LONG $0x24448b48; BYTE $0x68         // mov    rax, qword [rsp + 104]
	WORD $0xf749; BYTE $0xe6             // mul    r14
	WORD $0x0149; BYTE $0xda             // add    r10, rbx
	WORD $0x1148; BYTE $0xf7             // adc    rdi, rsi
	LONG $0x247c8948; BYTE $0x08         // mov    qword [rsp + 8], rdi
	WORD $0x1148; BYTE $0xc8             // adc    rax, rcx
	LONG $0x00d28348                     // adc    rdx, 0
	WORD $0x014d; BYTE $0xdd             // add    r13, r11
	WORD $0x920f; BYTE $0xd3             // setb    bl
	WORD $0x894d; BYTE $0xeb             // mov    r11, r13
	WORD $0xff49; BYTE $0xc3             // inc    r11
	LONG $0xd6940f40                     // sete    sil
	QUAD $0x0000009024a4034c             // add    r12, qword [rsp + 144]
	WORD $0x920f; BYTE $0xd1             // setb    cl
	JB   LBB0_86
	WORD $0x894d; BYTE $0xeb             // mov    r11, r13

LBB0_86:
	LONG $0x6cb60f44; WORD $0x7024 // movzx    r13d, byte [rsp + 112]
	WORD $0x2040; BYTE $0xf1       // and    cl, sil
	WORD $0xcb08                   // or    bl, cl
	QUAD $0x00000098248c034c       // add    r9, qword [rsp + 152]
	WORD $0x920f; BYTE $0xd1       // setb    cl
	WORD $0x894c; BYTE $0xcf       // mov    rdi, r9
	WORD $0xff48; BYTE $0xc7       // inc    rdi
	LONG $0xd6940f40               // sete    sil
	WORD $0xdb84                   // test    bl, bl
	JNE  LBB0_88
	WORD $0x894c; BYTE $0xcf       // mov    rdi, r9

LBB0_88:
	WORD $0x2040; BYTE $0xf3     // and    bl, sil
	WORD $0xd908                 // or    cl, bl
	LONG $0x247c034c; BYTE $0x78 // add    r15, qword [rsp + 120]
	LONG $0xd1920f41             // setb    r9b
	WORD $0x894d; BYTE $0xfe     // mov    r14, r15
	WORD $0xff49; BYTE $0xc6     // inc    r14
	WORD $0x940f; BYTE $0xd3     // sete    bl
	WORD $0xc984                 // test    cl, cl
	JNE  LBB0_90
	WORD $0x894d; BYTE $0xfe     // mov    r14, r15

LBB0_90:
	WORD $0xd920             // and    cl, bl
	WORD $0x0841; BYTE $0xc9 // or    r9b, cl
	WORD $0x014d; BYTE $0xe8 // add    r8, r13
	WORD $0x894d; BYTE $0xc5 // mov    r13, r8
	WORD $0xff49; BYTE $0xc5 // inc    r13
	LONG $0xd7940f41         // sete    r15b
	WORD $0x8445; BYTE $0xc9 // test    r9b, r9b
	JNE  LBB0_92
	WORD $0x894d; BYTE $0xc5 // mov    r13, r8

LBB0_92:
	WORD $0x014d; BYTE $0xd3     // add    r11, r10
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894c; BYTE $0xde     // mov    rsi, r11
	WORD $0xff48; BYTE $0xc6     // inc    rsi
	LONG $0xd0940f41             // sete    r8b
	LONG $0x2464034c; BYTE $0x60 // add    r12, qword [rsp + 96]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB0_94
	WORD $0x894c; BYTE $0xde     // mov    rsi, r11

LBB0_94:
	WORD $0x8949; BYTE $0xf3     // mov    r11, rsi
	WORD $0x2044; BYTE $0xc3     // and    bl, r8b
	WORD $0xd908                 // or    cl, bl
	LONG $0x247c0348; BYTE $0x08 // add    rdi, qword [rsp + 8]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x8949; BYTE $0xfa     // mov    r10, rdi
	WORD $0xff49; BYTE $0xc2     // inc    r10
	LONG $0xd0940f41             // sete    r8b
	WORD $0xc984                 // test    cl, cl
	JNE  LBB0_96
	WORD $0x8949; BYTE $0xfa     // mov    r10, rdi

LBB0_96:
	WORD $0x2045; BYTE $0xcf // and    r15b, r9b
	WORD $0x2044; BYTE $0xc1 // and    cl, r8b
	WORD $0xcb08             // or    bl, cl
	WORD $0x0149; BYTE $0xc6 // add    r14, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x894d; BYTE $0xf0 // mov    r8, r14
	WORD $0xff49; BYTE $0xc0 // inc    r8
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB0_98
	WORD $0x894d; BYTE $0xf0 // mov    r8, r14

LBB0_98:
	LONG $0xf7b60f41             // movzx    esi, r15b
	LONG $0x24748948; BYTE $0x08 // mov    qword [rsp + 8], rsi
	WORD $0xcb20                 // and    bl, cl
	WORD $0xd808                 // or    al, bl
	WORD $0x0149; BYTE $0xd5     // add    r13, rdx
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894d; BYTE $0xec     // mov    r12, r13
	WORD $0xff49; BYTE $0xc4     // inc    r12
	WORD $0x940f; BYTE $0xd2     // sete    dl
	WORD $0xc084                 // test    al, al
	JNE  LBB0_100
	WORD $0x894d; BYTE $0xec     // mov    r12, r13

LBB0_100:
	WORD $0xd020  // and    al, dl
	WORD $0xc108  // or    cl, al
	JNE  LBB0_101

LBB0_102:
	LONG $0x245c8b48; BYTE $0x20         // mov    rbx, qword [rsp + 32]
	WORD $0x8948; BYTE $0xd9             // mov    rcx, rbx
	QUAD $0x0000008024b48b4c             // mov    r14, qword [rsp + 128]
	LONG $0xceaf0f49                     // imul    rcx, r14
	QUAD $0x00000090249c894c             // mov    qword [rsp + 144], r11
	WORD $0x014c; BYTE $0xd9             // add    rcx, r11
	QUAD $0x000088248caf0f48; BYTE $0x00 // imul    rcx, qword [rsp + 136]
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x30         // mul    qword [rsp + 48]
	WORD $0x8949; BYTE $0xd3             // mov    r11, rdx
	WORD $0x8949; BYTE $0xc5             // mov    r13, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x28         // mul    qword [rsp + 40]
	WORD $0x8949; BYTE $0xd7             // mov    r15, rdx
	WORD $0x8948; BYTE $0xc7             // mov    rdi, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x48         // mul    qword [rsp + 72]
	WORD $0x8948; BYTE $0xd6             // mov    rsi, rdx
	WORD $0x8949; BYTE $0xc1             // mov    r9, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x38         // mul    qword [rsp + 56]
	WORD $0x014c; BYTE $0xdf             // add    rdi, r11
	WORD $0x114d; BYTE $0xf9             // adc    r9, r15
	WORD $0x1148; BYTE $0xf0             // adc    rax, rsi
	QUAD $0x0000009824848948             // mov    qword [rsp + 152], rax
	LONG $0x00d28348                     // adc    rdx, 0
	LONG $0x24548948; BYTE $0x78         // mov    qword [rsp + 120], rdx
	WORD $0x8948; BYTE $0xd8             // mov    rax, rbx
	WORD $0xf749; BYTE $0xe6             // mul    r14
	WORD $0x8949; BYTE $0xd3             // mov    r11, rdx
	LONG $0x24448948; BYTE $0x70         // mov    qword [rsp + 112], rax
	LONG $0x24048b48                     // mov    rax, qword [rsp]
	WORD $0xf749; BYTE $0xe6             // mul    r14
	WORD $0x8948; BYTE $0xd6             // mov    rsi, rdx
	WORD $0x8949; BYTE $0xc7             // mov    r15, rax
	LONG $0x24448b48; BYTE $0x50         // mov    rax, qword [rsp + 80]
	WORD $0xf749; BYTE $0xe6             // mul    r14
	WORD $0x8948; BYTE $0xd1             // mov    rcx, rdx
	WORD $0x8948; BYTE $0xc3             // mov    rbx, rax
	LONG $0x24448b48; BYTE $0x68         // mov    rax, qword [rsp + 104]
	WORD $0xf749; BYTE $0xe6             // mul    r14
	WORD $0x014d; BYTE $0xdf             // add    r15, r11
	WORD $0x1148; BYTE $0xf3             // adc    rbx, rsi
	LONG $0x245c8948; BYTE $0x60         // mov    qword [rsp + 96], rbx
	WORD $0x1148; BYTE $0xc8             // adc    rax, rcx
	LONG $0x00d28348                     // adc    rdx, 0
	WORD $0x0149; BYTE $0xfa             // add    r10, rdi
	WORD $0x920f; BYTE $0xd1             // setb    cl
	WORD $0x894d; BYTE $0xd3             // mov    r11, r10
	WORD $0xff49; BYTE $0xc3             // inc    r11
	LONG $0xd6940f40                     // sete    sil
	QUAD $0x0000009024ac034c             // add    r13, qword [rsp + 144]
	WORD $0x920f; BYTE $0xd3             // setb    bl
	JB   LBB0_104
	WORD $0x894d; BYTE $0xd3             // mov    r11, r10

LBB0_104:
	WORD $0x2040; BYTE $0xf3 // and    bl, sil
	WORD $0xd908             // or    cl, bl
	WORD $0x014d; BYTE $0xc8 // add    r8, r9
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x894d; BYTE $0xc6 // mov    r14, r8
	WORD $0xff49; BYTE $0xc6 // inc    r14
	LONG $0xd6940f40         // sete    sil
	WORD $0xc984             // test    cl, cl
	JNE  LBB0_106
	WORD $0x894d; BYTE $0xc6 // mov    r14, r8

LBB0_106:
	WORD $0x2040; BYTE $0xf1 // and    cl, sil
	WORD $0xcb08             // or    bl, cl
	QUAD $0x0000009824a4034c // add    r12, qword [rsp + 152]
	LONG $0xd1920f41         // setb    r9b
	WORD $0x894c; BYTE $0xe6 // mov    rsi, r12
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB0_108
	WORD $0x894c; BYTE $0xe6 // mov    rsi, r12

LBB0_108:
	WORD $0xcb20                 // and    bl, cl
	WORD $0x0841; BYTE $0xd9     // or    r9b, bl
	LONG $0x244c8b48; BYTE $0x08 // mov    rcx, qword [rsp + 8]
	LONG $0x244c0348; BYTE $0x78 // add    rcx, qword [rsp + 120]
	LONG $0xd0920f41             // setb    r8b
	WORD $0x8949; BYTE $0xcc     // mov    r12, rcx
	WORD $0xff49; BYTE $0xc4     // inc    r12
	LONG $0xd2940f41             // sete    r10b
	WORD $0x8445; BYTE $0xc9     // test    r9b, r9b
	JNE  LBB0_110
	WORD $0x8949; BYTE $0xcc     // mov    r12, rcx

LBB0_110:
	WORD $0x014d; BYTE $0xfb     // add    r11, r15
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894c; BYTE $0xdf     // mov    rdi, r11
	WORD $0xff48; BYTE $0xc7     // inc    rdi
	LONG $0xd7940f41             // sete    r15b
	LONG $0x246c034c; BYTE $0x70 // add    r13, qword [rsp + 112]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB0_112
	WORD $0x894c; BYTE $0xdf     // mov    rdi, r11

LBB0_112:
	LONG $0x247c8948; BYTE $0x08 // mov    qword [rsp + 8], rdi
	WORD $0x2045; BYTE $0xca     // and    r10b, r9b
	WORD $0x2044; BYTE $0xfb     // and    bl, r15b
	WORD $0xd908                 // or    cl, bl
	LONG $0x2474034c; BYTE $0x60 // add    r14, qword [rsp + 96]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x894d; BYTE $0xf5     // mov    r13, r14
	WORD $0xff49; BYTE $0xc5     // inc    r13
	LONG $0xd7940f40             // sete    dil
	WORD $0xc984                 // test    cl, cl
	JNE  LBB0_114
	WORD $0x894d; BYTE $0xf5     // mov    r13, r14

LBB0_114:
	WORD $0x0845; BYTE $0xd0 // or    r8b, r10b
	WORD $0x2040; BYTE $0xf9 // and    cl, dil
	WORD $0xcb08             // or    bl, cl
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xff49; BYTE $0xc3 // inc    r11
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB0_116
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi

LBB0_116:
	LONG $0xf0b60f41             // movzx    esi, r8b
	LONG $0x24748948; BYTE $0x60 // mov    qword [rsp + 96], rsi
	WORD $0xcb20                 // and    bl, cl
	WORD $0xd808                 // or    al, bl
	WORD $0x0149; BYTE $0xd4     // add    r12, rdx
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894d; BYTE $0xe0     // mov    r8, r12
	WORD $0xff49; BYTE $0xc0     // inc    r8
	WORD $0x940f; BYTE $0xd2     // sete    dl
	WORD $0xc084                 // test    al, al
	JNE  LBB0_118
	WORD $0x894d; BYTE $0xe0     // mov    r8, r12

LBB0_118:
	WORD $0xd020  // and    al, dl
	WORD $0xc108  // or    cl, al
	JNE  LBB0_119

LBB0_120:
	LONG $0x247c8b4c; BYTE $0x20         // mov    r15, qword [rsp + 32]
	WORD $0x894c; BYTE $0xf9             // mov    rcx, r15
	QUAD $0x000000a0249c8b48             // mov    rbx, qword [rsp + 160]
	LONG $0xcbaf0f48                     // imul    rcx, rbx
	LONG $0x244c0348; BYTE $0x08         // add    rcx, qword [rsp + 8]
	QUAD $0x000088248caf0f48; BYTE $0x00 // imul    rcx, qword [rsp + 136]
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x30         // mul    qword [rsp + 48]
	WORD $0x8949; BYTE $0xd2             // mov    r10, rdx
	WORD $0x8949; BYTE $0xc4             // mov    r12, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x28         // mul    qword [rsp + 40]
	WORD $0x8949; BYTE $0xd6             // mov    r14, rdx
	WORD $0x8948; BYTE $0xc6             // mov    rsi, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x48         // mul    qword [rsp + 72]
	WORD $0x8948; BYTE $0xd7             // mov    rdi, rdx
	WORD $0x8949; BYTE $0xc1             // mov    r9, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x38         // mul    qword [rsp + 56]
	WORD $0x014c; BYTE $0xd6             // add    rsi, r10
	WORD $0x114d; BYTE $0xf1             // adc    r9, r14
	WORD $0x1148; BYTE $0xf8             // adc    rax, rdi
	LONG $0x24448948; BYTE $0x78         // mov    qword [rsp + 120], rax
	LONG $0x00d28348                     // adc    rdx, 0
	LONG $0x24548948; BYTE $0x70         // mov    qword [rsp + 112], rdx
	WORD $0x894c; BYTE $0xf8             // mov    rax, r15
	WORD $0xf748; BYTE $0xe3             // mul    rbx
	WORD $0x8949; BYTE $0xd6             // mov    r14, rdx
	QUAD $0x0000008024848948             // mov    qword [rsp + 128], rax
	LONG $0x24048b48                     // mov    rax, qword [rsp]
	WORD $0xf748; BYTE $0xe3             // mul    rbx
	WORD $0x8949; BYTE $0xd2             // mov    r10, rdx
	WORD $0x8949; BYTE $0xc7             // mov    r15, rax
	LONG $0x24448b48; BYTE $0x50         // mov    rax, qword [rsp + 80]
	WORD $0xf748; BYTE $0xe3             // mul    rbx
	WORD $0x8948; BYTE $0xd1             // mov    rcx, rdx
	WORD $0x8948; BYTE $0xc7             // mov    rdi, rax
	LONG $0x24448b48; BYTE $0x68         // mov    rax, qword [rsp + 104]
	WORD $0xf748; BYTE $0xe3             // mul    rbx
	WORD $0x014d; BYTE $0xf7             // add    r15, r14
	WORD $0x114c; BYTE $0xd7             // adc    rdi, r10
	LONG $0x247c8948; BYTE $0x20         // mov    qword [rsp + 32], rdi
	WORD $0x1148; BYTE $0xc8             // adc    rax, rcx
	LONG $0x00d28348                     // adc    rdx, 0
	WORD $0x0149; BYTE $0xf5             // add    r13, rsi
	WORD $0x920f; BYTE $0xd1             // setb    cl
	WORD $0x894d; BYTE $0xee             // mov    r14, r13
	WORD $0xff49; BYTE $0xc6             // inc    r14
	LONG $0xd6940f40                     // sete    sil
	LONG $0x2464034c; BYTE $0x08         // add    r12, qword [rsp + 8]
	WORD $0x894d; BYTE $0xe2             // mov    r10, r12
	WORD $0x920f; BYTE $0xd3             // setb    bl
	JB   LBB0_122
	WORD $0x894d; BYTE $0xee             // mov    r14, r13

LBB0_122:
	WORD $0x2040; BYTE $0xf3 // and    bl, sil
	WORD $0xd908             // or    cl, bl
	WORD $0x014d; BYTE $0xcb // add    r11, r9
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x894c; BYTE $0xde // mov    rsi, r11
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	LONG $0xd7940f40         // sete    dil
	WORD $0xc984             // test    cl, cl
	JNE  LBB0_124
	WORD $0x894c; BYTE $0xde // mov    rsi, r11

LBB0_124:
	WORD $0x2040; BYTE $0xf9     // and    cl, dil
	WORD $0xcb08                 // or    bl, cl
	LONG $0x2444034c; BYTE $0x78 // add    r8, qword [rsp + 120]
	LONG $0xd1920f41             // setb    r9b
	WORD $0x894c; BYTE $0xc7     // mov    rdi, r8
	WORD $0xff48; BYTE $0xc7     // inc    rdi
	WORD $0x940f; BYTE $0xd1     // sete    cl
	WORD $0xdb84                 // test    bl, bl
	JNE  LBB0_126
	WORD $0x894c; BYTE $0xc7     // mov    rdi, r8

LBB0_126:
	WORD $0xcb20                 // and    bl, cl
	WORD $0x0841; BYTE $0xd9     // or    r9b, bl
	LONG $0x244c8b48; BYTE $0x60 // mov    rcx, qword [rsp + 96]
	LONG $0x244c0348; BYTE $0x70 // add    rcx, qword [rsp + 112]
	LONG $0xd0920f41             // setb    r8b
	WORD $0x8949; BYTE $0xcd     // mov    r13, rcx
	WORD $0xff49; BYTE $0xc5     // inc    r13
	LONG $0xd3940f41             // sete    r11b
	WORD $0x8445; BYTE $0xc9     // test    r9b, r9b
	JNE  LBB0_128
	WORD $0x8949; BYTE $0xcd     // mov    r13, rcx

LBB0_128:
	WORD $0x014d; BYTE $0xfe // add    r14, r15
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x894d; BYTE $0xf4 // mov    r12, r14
	WORD $0xff49; BYTE $0xc4 // inc    r12
	LONG $0xd7940f41         // sete    r15b
	QUAD $0x000000802494034c // add    r10, qword [rsp + 128]
	WORD $0x920f; BYTE $0xd3 // setb    bl
	JB   LBB0_130
	WORD $0x894d; BYTE $0xf4 // mov    r12, r14

LBB0_130:
	WORD $0x2045; BYTE $0xcb     // and    r11b, r9b
	WORD $0x2044; BYTE $0xfb     // and    bl, r15b
	WORD $0xd908                 // or    cl, bl
	LONG $0x24740348; BYTE $0x20 // add    rsi, qword [rsp + 32]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	WORD $0xff49; BYTE $0xc1     // inc    r9
	LONG $0xd2940f41             // sete    r10b
	WORD $0xc984                 // test    cl, cl
	JNE  LBB0_132
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi

LBB0_132:
	WORD $0x0845; BYTE $0xd8 // or    r8b, r11b
	WORD $0x2044; BYTE $0xd1 // and    cl, r10b
	WORD $0xcb08             // or    bl, cl
	WORD $0x0148; BYTE $0xc7 // add    rdi, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x8949; BYTE $0xfa // mov    r10, rdi
	WORD $0xff49; BYTE $0xc2 // inc    r10
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB0_134
	WORD $0x8949; BYTE $0xfa // mov    r10, rdi

LBB0_134:
	LONG $0xf8b60f41         // movzx    edi, r8b
	WORD $0xcb20             // and    bl, cl
	WORD $0xd808             // or    al, bl
	WORD $0x0149; BYTE $0xd5 // add    r13, rdx
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x894c; BYTE $0xee // mov    rsi, r13
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	WORD $0x940f; BYTE $0xd2 // sete    dl
	WORD $0xc084             // test    al, al
	JNE  LBB0_136
	WORD $0x894c; BYTE $0xee // mov    rsi, r13

LBB0_136:
	WORD $0xd020                 // and    al, dl
	WORD $0xc108                 // or    cl, al
	JNE  LBB0_137
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x24442b48; BYTE $0x38 // sub    rax, qword [rsp + 56]
	JA   LBB0_147

LBB0_139:
	WORD $0x8548; BYTE $0xff     // test    rdi, rdi
	JNE  LBB0_147
	LONG $0x24743b48; BYTE $0x38 // cmp    rsi, qword [rsp + 56]
	JAE  LBB0_146

LBB0_141:
	LONG $0x2454894c; BYTE $0x68 // mov    qword [rsp + 104], r10
	LONG $0x24748948; BYTE $0x50 // mov    qword [rsp + 80], rsi
	LONG $0x240c894c             // mov    qword [rsp], r9
	JMP  LBB0_152

LBB0_146:
	LONG $0x24543b4c; BYTE $0x48 // cmp    r10, qword [rsp + 72]
	JBE  LBB0_142

LBB0_147:
	LONG $0x244c2b4c; BYTE $0x28 // sub    r9, qword [rsp + 40]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0x01ea8348             // sub    rdx, 1
	LONG $0x24148948             // mov    qword [rsp], rdx
	WORD $0x920f; BYTE $0xd2     // setb    dl
	LONG $0x24642b4c; BYTE $0x30 // sub    r12, qword [rsp + 48]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB0_149
	LONG $0x240c894c             // mov    qword [rsp], r9

LBB0_149:
	WORD $0xd320                 // and    bl, dl
	WORD $0xd908                 // or    cl, bl
	LONG $0x24542b4c; BYTE $0x48 // sub    r10, qword [rsp + 72]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x894c; BYTE $0xd2     // mov    rdx, r10
	LONG $0x01ea8348             // sub    rdx, 1
	LONG $0xd6920f40             // setb    sil
	WORD $0xc984                 // test    cl, cl
	JNE  LBB0_151
	WORD $0x894c; BYTE $0xd2     // mov    rdx, r10

LBB0_151:
	WORD $0x2040; BYTE $0xf1     // and    cl, sil
	WORD $0xcb08                 // or    bl, cl
	WORD $0xb60f; BYTE $0xcb     // movzx    ecx, bl
	WORD $0x2948; BYTE $0xc8     // sub    rax, rcx
	LONG $0x24448948; BYTE $0x50 // mov    qword [rsp + 80], rax
	LONG $0x24548948; BYTE $0x68 // mov    qword [rsp + 104], rdx

LBB0_152:
	LONG $0x247c8b48; BYTE $0x18         // mov    rdi, qword [rsp + 24]
	WORD $0x8948; BYTE $0xf9             // mov    rcx, rdi
	QUAD $0x000088248caf0f48; BYTE $0x00 // imul    rcx, qword [rsp + 136]
	LONG $0xccaf0f49                     // imul    rcx, r12
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x30         // mul    qword [rsp + 48]
	WORD $0x8949; BYTE $0xd1             // mov    r9, rdx
	LONG $0x24448948; BYTE $0x20         // mov    qword [rsp + 32], rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x28         // mul    qword [rsp + 40]
	WORD $0x8948; BYTE $0xd6             // mov    rsi, rdx
	WORD $0x8948; BYTE $0xc3             // mov    rbx, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x48         // mul    qword [rsp + 72]
	WORD $0x8949; BYTE $0xd0             // mov    r8, rdx
	WORD $0x8949; BYTE $0xc6             // mov    r14, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x38         // mul    qword [rsp + 56]
	WORD $0x8949; BYTE $0xc5             // mov    r13, rax
	WORD $0x8949; BYTE $0xd3             // mov    r11, rdx
	WORD $0x014c; BYTE $0xcb             // add    rbx, r9
	WORD $0x1149; BYTE $0xf6             // adc    r14, rsi
	WORD $0x114d; BYTE $0xc5             // adc    r13, r8
	LONG $0x00d38349                     // adc    r11, 0
	WORD $0x894c; BYTE $0xe0             // mov    rax, r12
	WORD $0xf748; BYTE $0xe7             // mul    rdi
	WORD $0x8949; BYTE $0xd0             // mov    r8, rdx
	WORD $0x8949; BYTE $0xc1             // mov    r9, rax
	WORD $0x894c; BYTE $0xe0             // mov    rax, r12
	LONG $0x2464f748; BYTE $0x10         // mul    qword [rsp + 16]
	WORD $0x8949; BYTE $0xd2             // mov    r10, rdx
	WORD $0x8948; BYTE $0xc6             // mov    rsi, rax
	WORD $0x894c; BYTE $0xe0             // mov    rax, r12
	LONG $0x2464f748; BYTE $0x40         // mul    qword [rsp + 64]
	WORD $0x8949; BYTE $0xd7             // mov    r15, rdx
	WORD $0x8948; BYTE $0xc7             // mov    rdi, rax
	WORD $0x894c; BYTE $0xe0             // mov    rax, r12
	LONG $0x2464f748; BYTE $0x58         // mul    qword [rsp + 88]
	WORD $0x014c; BYTE $0xc6             // add    rsi, r8
	WORD $0x114c; BYTE $0xd7             // adc    rdi, r10
	WORD $0x114c; BYTE $0xf8             // adc    rax, r15
	LONG $0x00d28348                     // adc    rdx, 0
	WORD $0x0148; BYTE $0xde             // add    rsi, rbx
	WORD $0x920f; BYTE $0xd1             // setb    cl
	WORD $0x8949; BYTE $0xf7             // mov    r15, rsi
	WORD $0xff49; BYTE $0xc7             // inc    r15
	LONG $0xd0940f41                     // sete    r8b
	LONG $0x244c034c; BYTE $0x20         // add    r9, qword [rsp + 32]
	WORD $0x920f; BYTE $0xd3             // setb    bl
	JB   LBB0_154
	WORD $0x8949; BYTE $0xf7             // mov    r15, rsi

LBB0_154:
	WORD $0x2044; BYTE $0xc3 // and    bl, r8b
	WORD $0xd908             // or    cl, bl
	WORD $0x0149; BYTE $0xfe // add    r14, rdi
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x894d; BYTE $0xf2 // mov    r10, r14
	WORD $0xff49; BYTE $0xc2 // inc    r10
	LONG $0xd6940f40         // sete    sil
	WORD $0xc984             // test    cl, cl
	JNE  LBB0_156
	WORD $0x894d; BYTE $0xf2 // mov    r10, r14

LBB0_156:
	WORD $0x2040; BYTE $0xf1 // and    cl, sil
	WORD $0xcb08             // or    bl, cl
	WORD $0x0149; BYTE $0xc5 // add    r13, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x894d; BYTE $0xe9 // mov    r9, r13
	WORD $0xff49; BYTE $0xc1 // inc    r9
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB0_158
	WORD $0x894d; BYTE $0xe9 // mov    r9, r13

LBB0_158:
	WORD $0xcb20                 // and    bl, cl
	WORD $0xd808                 // or    al, bl
	WORD $0x0149; BYTE $0xd3     // add    r11, rdx
	LONG $0x2454920f; BYTE $0x20 // setb    byte [rsp + 32]
	WORD $0x894d; BYTE $0xdc     // mov    r12, r11
	WORD $0xff49; BYTE $0xc4     // inc    r12
	WORD $0x940f; BYTE $0xd3     // sete    bl
	WORD $0xc084                 // test    al, al
	JNE  LBB0_160
	WORD $0x894d; BYTE $0xdc     // mov    r12, r11

LBB0_160:
	WORD $0xc320                         // and    bl, al
	LONG $0x24348b4c                     // mov    r14, qword [rsp]
	WORD $0x894c; BYTE $0xf1             // mov    rcx, r14
	LONG $0x246c8b4c; BYTE $0x18         // mov    r13, qword [rsp + 24]
	LONG $0xcdaf0f49                     // imul    rcx, r13
	WORD $0x014c; BYTE $0xf9             // add    rcx, r15
	QUAD $0x000088248caf0f48; BYTE $0x00 // imul    rcx, qword [rsp + 136]
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x30         // mul    qword [rsp + 48]
	LONG $0x24548948; BYTE $0x08         // mov    qword [rsp + 8], rdx
	LONG $0x24448948; BYTE $0x70         // mov    qword [rsp + 112], rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x28         // mul    qword [rsp + 40]
	QUAD $0x000000a024bc894c             // mov    qword [rsp + 160], r15
	WORD $0x8949; BYTE $0xd7             // mov    r15, rdx
	WORD $0x8948; BYTE $0xc7             // mov    rdi, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x48         // mul    qword [rsp + 72]
	WORD $0x8948; BYTE $0xc6             // mov    rsi, rax
	WORD $0x8949; BYTE $0xd0             // mov    r8, rdx
	LONG $0x20245c08                     // or    byte [rsp + 32], bl
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x38         // mul    qword [rsp + 56]
	WORD $0x8949; BYTE $0xd3             // mov    r11, rdx
	LONG $0x247c0348; BYTE $0x08         // add    rdi, qword [rsp + 8]
	WORD $0x114c; BYTE $0xfe             // adc    rsi, r15
	QUAD $0x0000008024b48948             // mov    qword [rsp + 128], rsi
	WORD $0x114c; BYTE $0xc0             // adc    rax, r8
	LONG $0x24448948; BYTE $0x60         // mov    qword [rsp + 96], rax
	LONG $0x00d38349                     // adc    r11, 0
	WORD $0x894c; BYTE $0xf0             // mov    rax, r14
	WORD $0xf749; BYTE $0xe5             // mul    r13
	WORD $0x8949; BYTE $0xd7             // mov    r15, rdx
	LONG $0x24448948; BYTE $0x08         // mov    qword [rsp + 8], rax
	WORD $0x894c; BYTE $0xf0             // mov    rax, r14
	LONG $0x2464f748; BYTE $0x10         // mul    qword [rsp + 16]
	WORD $0x8948; BYTE $0xd3             // mov    rbx, rdx
	WORD $0x8949; BYTE $0xc0             // mov    r8, rax
	WORD $0x894c; BYTE $0xf0             // mov    rax, r14
	LONG $0x2464f748; BYTE $0x40         // mul    qword [rsp + 64]
	WORD $0x8948; BYTE $0xd6             // mov    rsi, rdx
	WORD $0x8949; BYTE $0xc5             // mov    r13, rax
	WORD $0x894c; BYTE $0xf0             // mov    rax, r14
	LONG $0x24748b4c; BYTE $0x70         // mov    r14, qword [rsp + 112]
	LONG $0x2464f748; BYTE $0x58         // mul    qword [rsp + 88]
	WORD $0x014d; BYTE $0xf8             // add    r8, r15
	WORD $0x1149; BYTE $0xdd             // adc    r13, rbx
	WORD $0x1148; BYTE $0xf0             // adc    rax, rsi
	LONG $0x00d28348                     // adc    rdx, 0
	WORD $0x0149; BYTE $0xfa             // add    r10, rdi
	WORD $0x920f; BYTE $0xd3             // setb    bl
	WORD $0x894d; BYTE $0xd7             // mov    r15, r10
	WORD $0xff49; BYTE $0xc7             // inc    r15
	LONG $0xd6940f40                     // sete    sil
	QUAD $0x000000a024b4034c             // add    r14, qword [rsp + 160]
	WORD $0x920f; BYTE $0xd1             // setb    cl
	JB   LBB0_162
	WORD $0x894d; BYTE $0xd7             // mov    r15, r10

LBB0_162:
	LONG $0x54b60f44; WORD $0x2024 // movzx    r10d, byte [rsp + 32]
	WORD $0x2040; BYTE $0xf1       // and    cl, sil
	WORD $0xcb08                   // or    bl, cl
	QUAD $0x00000080248c034c       // add    r9, qword [rsp + 128]
	WORD $0x920f; BYTE $0xd1       // setb    cl
	WORD $0x894c; BYTE $0xcf       // mov    rdi, r9
	WORD $0xff48; BYTE $0xc7       // inc    rdi
	LONG $0xd6940f40               // sete    sil
	WORD $0xdb84                   // test    bl, bl
	JNE  LBB0_164
	WORD $0x894c; BYTE $0xcf       // mov    rdi, r9

LBB0_164:
	WORD $0x2040; BYTE $0xf3     // and    bl, sil
	WORD $0xd908                 // or    cl, bl
	LONG $0x2464034c; BYTE $0x60 // add    r12, qword [rsp + 96]
	LONG $0xd1920f41             // setb    r9b
	WORD $0x894c; BYTE $0xe6     // mov    rsi, r12
	WORD $0xff48; BYTE $0xc6     // inc    rsi
	WORD $0x940f; BYTE $0xd3     // sete    bl
	WORD $0xc984                 // test    cl, cl
	JNE  LBB0_166
	WORD $0x894c; BYTE $0xe6     // mov    rsi, r12

LBB0_166:
	WORD $0xd920             // and    cl, bl
	WORD $0x0841; BYTE $0xc9 // or    r9b, cl
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x894d; BYTE $0xdc // mov    r12, r11
	WORD $0xff49; BYTE $0xc4 // inc    r12
	LONG $0xd2940f41         // sete    r10b
	WORD $0x8445; BYTE $0xc9 // test    r9b, r9b
	JNE  LBB0_168
	WORD $0x894d; BYTE $0xdc // mov    r12, r11

LBB0_168:
	WORD $0x014d; BYTE $0xc7     // add    r15, r8
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x894d; BYTE $0xfb     // mov    r11, r15
	WORD $0xff49; BYTE $0xc3     // inc    r11
	LONG $0xd0940f41             // sete    r8b
	LONG $0x2474034c; BYTE $0x08 // add    r14, qword [rsp + 8]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	JB   LBB0_170
	WORD $0x894d; BYTE $0xfb     // mov    r11, r15

LBB0_170:
	WORD $0x2044; BYTE $0xc1 // and    cl, r8b
	WORD $0xcb08             // or    bl, cl
	WORD $0x014c; BYTE $0xef // add    rdi, r13
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x8949; BYTE $0xfd // mov    r13, rdi
	WORD $0xff49; BYTE $0xc5 // inc    r13
	LONG $0xd0940f41         // sete    r8b
	WORD $0xdb84             // test    bl, bl
	JNE  LBB0_172
	WORD $0x8949; BYTE $0xfd // mov    r13, rdi

LBB0_172:
	WORD $0x2045; BYTE $0xca // and    r10b, r9b
	WORD $0x2044; BYTE $0xc3 // and    bl, r8b
	WORD $0xd908             // or    cl, bl
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x8949; BYTE $0xf6 // mov    r14, rsi
	WORD $0xff49; BYTE $0xc6 // inc    r14
	WORD $0x940f; BYTE $0xd3 // sete    bl
	WORD $0xc984             // test    cl, cl
	JNE  LBB0_174
	WORD $0x8949; BYTE $0xf6 // mov    r14, rsi

LBB0_174:
	LONG $0xf2b60f41         // movzx    esi, r10b
	WORD $0xd920             // and    cl, bl
	WORD $0xc808             // or    al, cl
	WORD $0x0149; BYTE $0xd4 // add    r12, rdx
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x894d; BYTE $0xe7 // mov    r15, r12
	WORD $0xff49; BYTE $0xc7 // inc    r15
	WORD $0x940f; BYTE $0xd2 // sete    dl
	WORD $0xc084             // test    al, al
	JNE  LBB0_176
	WORD $0x894d; BYTE $0xe7 // mov    r15, r12

LBB0_176:
	WORD $0xd020             // and    al, dl
	WORD $0xc108             // or    cl, al
	JNE  LBB0_177
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11

LBB0_179:
	LONG $0x24748948; BYTE $0x20         // mov    qword [rsp + 32], rsi
	LONG $0x245c8b4c; BYTE $0x68         // mov    r11, qword [rsp + 104]
	WORD $0x894c; BYTE $0xd9             // mov    rcx, r11
	LONG $0x24648b4c; BYTE $0x18         // mov    r12, qword [rsp + 24]
	LONG $0xccaf0f49                     // imul    rcx, r12
	QUAD $0x000000a024848948             // mov    qword [rsp + 160], rax
	WORD $0x0148; BYTE $0xc1             // add    rcx, rax
	QUAD $0x000088248caf0f48; BYTE $0x00 // imul    rcx, qword [rsp + 136]
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x30         // mul    qword [rsp + 48]
	WORD $0x8949; BYTE $0xd1             // mov    r9, rdx
	WORD $0x8949; BYTE $0xc2             // mov    r10, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x28         // mul    qword [rsp + 40]
	WORD $0x8948; BYTE $0xd6             // mov    rsi, rdx
	WORD $0x8948; BYTE $0xc3             // mov    rbx, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x48         // mul    qword [rsp + 72]
	WORD $0x8948; BYTE $0xd7             // mov    rdi, rdx
	WORD $0x8949; BYTE $0xc0             // mov    r8, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x38         // mul    qword [rsp + 56]
	WORD $0x014c; BYTE $0xcb             // add    rbx, r9
	WORD $0x1149; BYTE $0xf0             // adc    r8, rsi
	WORD $0x1148; BYTE $0xf8             // adc    rax, rdi
	QUAD $0x0000008024848948             // mov    qword [rsp + 128], rax
	LONG $0x00d28348                     // adc    rdx, 0
	LONG $0x24548948; BYTE $0x60         // mov    qword [rsp + 96], rdx
	WORD $0x894c; BYTE $0xd8             // mov    rax, r11
	WORD $0xf749; BYTE $0xe4             // mul    r12
	WORD $0x8949; BYTE $0xd4             // mov    r12, rdx
	LONG $0x24448948; BYTE $0x08         // mov    qword [rsp + 8], rax
	WORD $0x894c; BYTE $0xd8             // mov    rax, r11
	LONG $0x2464f748; BYTE $0x10         // mul    qword [rsp + 16]
	WORD $0x8948; BYTE $0xd7             // mov    rdi, rdx
	WORD $0x8949; BYTE $0xc1             // mov    r9, rax
	WORD $0x894c; BYTE $0xd8             // mov    rax, r11
	LONG $0x2464f748; BYTE $0x40         // mul    qword [rsp + 64]
	WORD $0x8948; BYTE $0xd1             // mov    rcx, rdx
	WORD $0x8948; BYTE $0xc6             // mov    rsi, rax
	WORD $0x894c; BYTE $0xd8             // mov    rax, r11
	LONG $0x2464f748; BYTE $0x58         // mul    qword [rsp + 88]
	WORD $0x014d; BYTE $0xe1             // add    r9, r12
	WORD $0x1148; BYTE $0xfe             // adc    rsi, rdi
	LONG $0x24348948                     // mov    qword [rsp], rsi
	WORD $0x1148; BYTE $0xc8             // adc    rax, rcx
	LONG $0x00d28348                     // adc    rdx, 0
	WORD $0x0149; BYTE $0xdd             // add    r13, rbx
	WORD $0x920f; BYTE $0xd1             // setb    cl
	WORD $0x894d; BYTE $0xec             // mov    r12, r13
	WORD $0xff49; BYTE $0xc4             // inc    r12
	LONG $0xd6940f40                     // sete    sil
	QUAD $0x000000a02494034c             // add    r10, qword [rsp + 160]
	WORD $0x920f; BYTE $0xd3             // setb    bl
	JB   LBB0_181
	WORD $0x894d; BYTE $0xec             // mov    r12, r13

LBB0_181:
	WORD $0x2040; BYTE $0xf3 // and    bl, sil
	WORD $0xd908             // or    cl, bl
	WORD $0x014d; BYTE $0xc6 // add    r14, r8
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x894c; BYTE $0xf6 // mov    rsi, r14
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	LONG $0xd0940f41         // sete    r8b
	WORD $0xc984             // test    cl, cl
	JNE  LBB0_183
	WORD $0x894c; BYTE $0xf6 // mov    rsi, r14

LBB0_183:
	WORD $0x2044; BYTE $0xc1 // and    cl, r8b
	WORD $0xcb08             // or    bl, cl
	QUAD $0x0000008024bc034c // add    r15, qword [rsp + 128]
	LONG $0xd3920f41         // setb    r11b
	WORD $0x894d; BYTE $0xfd // mov    r13, r15
	WORD $0xff49; BYTE $0xc5 // inc    r13
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB0_185
	WORD $0x894d; BYTE $0xfd // mov    r13, r15

LBB0_185:
	WORD $0xcb20                 // and    bl, cl
	WORD $0x0841; BYTE $0xdb     // or    r11b, bl
	LONG $0x244c8b48; BYTE $0x20 // mov    rcx, qword [rsp + 32]
	LONG $0x244c0348; BYTE $0x60 // add    rcx, qword [rsp + 96]
	LONG $0xd0920f41             // setb    r8b
	WORD $0x8949; BYTE $0xcf     // mov    r15, rcx
	WORD $0xff49; BYTE $0xc7     // inc    r15
	LONG $0xd6940f41             // sete    r14b
	WORD $0x8445; BYTE $0xdb     // test    r11b, r11b
	JNE  LBB0_187
	WORD $0x8949; BYTE $0xcf     // mov    r15, rcx

LBB0_187:
	WORD $0x014d; BYTE $0xcc     // add    r12, r9
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894c; BYTE $0xe7     // mov    rdi, r12
	WORD $0xff48; BYTE $0xc7     // inc    rdi
	LONG $0x247c8948; BYTE $0x20 // mov    qword [rsp + 32], rdi
	LONG $0xd1940f41             // sete    r9b
	LONG $0x2454034c; BYTE $0x08 // add    r10, qword [rsp + 8]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB0_189
	LONG $0x2464894c; BYTE $0x20 // mov    qword [rsp + 32], r12

LBB0_189:
	WORD $0x2045; BYTE $0xde // and    r14b, r11b
	WORD $0x2044; BYTE $0xcb // and    bl, r9b
	WORD $0xd908             // or    cl, bl
	LONG $0x24340348         // add    rsi, qword [rsp]
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xff49; BYTE $0xc1 // inc    r9
	LONG $0xd7940f40         // sete    dil
	WORD $0xc984             // test    cl, cl
	JNE  LBB0_191
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi

LBB0_191:
	WORD $0x0845; BYTE $0xf0 // or    r8b, r14b
	WORD $0x2040; BYTE $0xf9 // and    cl, dil
	WORD $0xcb08             // or    bl, cl
	WORD $0x0149; BYTE $0xc5 // add    r13, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x894d; BYTE $0xeb // mov    r11, r13
	WORD $0xff49; BYTE $0xc3 // inc    r11
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB0_193
	WORD $0x894d; BYTE $0xeb // mov    r11, r13

LBB0_193:
	LONG $0xf0b60f41         // movzx    esi, r8b
	WORD $0xcb20             // and    bl, cl
	WORD $0xd808             // or    al, bl
	WORD $0x0149; BYTE $0xd7 // add    r15, rdx
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x894d; BYTE $0xfe // mov    r14, r15
	WORD $0xff49; BYTE $0xc6 // inc    r14
	WORD $0x940f; BYTE $0xd2 // sete    dl
	WORD $0xc084             // test    al, al
	JNE  LBB0_195
	WORD $0x894d; BYTE $0xfe // mov    r14, r15

LBB0_195:
	WORD $0xd020  // and    al, dl
	WORD $0xc108  // or    cl, al
	JNE  LBB0_196

LBB0_197:
	LONG $0x24348948                     // mov    qword [rsp], rsi
	LONG $0x24748b48; BYTE $0x50         // mov    rsi, qword [rsp + 80]
	WORD $0x8948; BYTE $0xf1             // mov    rcx, rsi
	LONG $0x246c8b4c; BYTE $0x18         // mov    r13, qword [rsp + 24]
	LONG $0xcdaf0f49                     // imul    rcx, r13
	LONG $0x244c0348; BYTE $0x20         // add    rcx, qword [rsp + 32]
	QUAD $0x000088248caf0f48; BYTE $0x00 // imul    rcx, qword [rsp + 136]
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x30         // mul    qword [rsp + 48]
	WORD $0x8949; BYTE $0xd0             // mov    r8, rdx
	WORD $0x8949; BYTE $0xc4             // mov    r12, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x28         // mul    qword [rsp + 40]
	WORD $0x8949; BYTE $0xd7             // mov    r15, rdx
	WORD $0x8948; BYTE $0xc3             // mov    rbx, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x48         // mul    qword [rsp + 72]
	WORD $0x8949; BYTE $0xd2             // mov    r10, rdx
	WORD $0x8948; BYTE $0xc7             // mov    rdi, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x38         // mul    qword [rsp + 56]
	WORD $0x014c; BYTE $0xc3             // add    rbx, r8
	WORD $0x114c; BYTE $0xff             // adc    rdi, r15
	QUAD $0x0000008024bc8948             // mov    qword [rsp + 128], rdi
	WORD $0x114c; BYTE $0xd0             // adc    rax, r10
	LONG $0x24448948; BYTE $0x60         // mov    qword [rsp + 96], rax
	LONG $0x00d28348                     // adc    rdx, 0
	LONG $0x24548948; BYTE $0x08         // mov    qword [rsp + 8], rdx
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	WORD $0xf749; BYTE $0xe5             // mul    r13
	WORD $0x8949; BYTE $0xd2             // mov    r10, rdx
	LONG $0x24448948; BYTE $0x68         // mov    qword [rsp + 104], rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x10         // mul    qword [rsp + 16]
	WORD $0x8949; BYTE $0xd0             // mov    r8, rdx
	WORD $0x8949; BYTE $0xc7             // mov    r15, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x40         // mul    qword [rsp + 64]
	WORD $0x8948; BYTE $0xd1             // mov    rcx, rdx
	WORD $0x8948; BYTE $0xc7             // mov    rdi, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x58         // mul    qword [rsp + 88]
	WORD $0x014d; BYTE $0xd7             // add    r15, r10
	WORD $0x114c; BYTE $0xc7             // adc    rdi, r8
	LONG $0x247c8948; BYTE $0x18         // mov    qword [rsp + 24], rdi
	WORD $0x1148; BYTE $0xc8             // adc    rax, rcx
	LONG $0x00d28348                     // adc    rdx, 0
	WORD $0x0149; BYTE $0xd9             // add    r9, rbx
	WORD $0x920f; BYTE $0xd1             // setb    cl
	WORD $0x894d; BYTE $0xcd             // mov    r13, r9
	WORD $0xff49; BYTE $0xc5             // inc    r13
	LONG $0xd6940f40                     // sete    sil
	LONG $0x2464034c; BYTE $0x20         // add    r12, qword [rsp + 32]
	WORD $0x920f; BYTE $0xd3             // setb    bl
	JB   LBB0_199
	WORD $0x894d; BYTE $0xcd             // mov    r13, r9

LBB0_199:
	WORD $0x2040; BYTE $0xf3 // and    bl, sil
	WORD $0xd908             // or    cl, bl
	QUAD $0x00000080249c034c // add    r11, qword [rsp + 128]
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x894d; BYTE $0xd9 // mov    r9, r11
	WORD $0xff49; BYTE $0xc1 // inc    r9
	LONG $0xd6940f40         // sete    sil
	WORD $0xc984             // test    cl, cl
	JNE  LBB0_201
	WORD $0x894d; BYTE $0xd9 // mov    r9, r11

LBB0_201:
	WORD $0x2040; BYTE $0xf1     // and    cl, sil
	WORD $0xcb08                 // or    bl, cl
	LONG $0x2474034c; BYTE $0x60 // add    r14, qword [rsp + 96]
	LONG $0xd2920f41             // setb    r10b
	WORD $0x894c; BYTE $0xf7     // mov    rdi, r14
	WORD $0xff48; BYTE $0xc7     // inc    rdi
	WORD $0x940f; BYTE $0xd1     // sete    cl
	WORD $0xdb84                 // test    bl, bl
	JNE  LBB0_203
	WORD $0x894c; BYTE $0xf7     // mov    rdi, r14

LBB0_203:
	WORD $0xcb20                 // and    bl, cl
	WORD $0x0841; BYTE $0xda     // or    r10b, bl
	LONG $0x240c8b48             // mov    rcx, qword [rsp]
	LONG $0x244c0348; BYTE $0x08 // add    rcx, qword [rsp + 8]
	LONG $0xd0920f41             // setb    r8b
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xff48; BYTE $0xc6     // inc    rsi
	LONG $0xd3940f41             // sete    r11b
	WORD $0x8445; BYTE $0xd2     // test    r10b, r10b
	JNE  LBB0_205
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx

LBB0_205:
	WORD $0x014d; BYTE $0xfd     // add    r13, r15
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894c; BYTE $0xeb     // mov    rbx, r13
	WORD $0xff48; BYTE $0xc3     // inc    rbx
	LONG $0x241c8948             // mov    qword [rsp], rbx
	LONG $0xd6940f41             // sete    r14b
	LONG $0x2464034c; BYTE $0x68 // add    r12, qword [rsp + 104]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB0_207
	LONG $0x242c894c             // mov    qword [rsp], r13

LBB0_207:
	WORD $0x2045; BYTE $0xd3     // and    r11b, r10b
	WORD $0x2044; BYTE $0xf3     // and    bl, r14b
	WORD $0xd908                 // or    cl, bl
	LONG $0x244c034c; BYTE $0x18 // add    r9, qword [rsp + 24]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x894d; BYTE $0xca     // mov    r10, r9
	WORD $0xff49; BYTE $0xc2     // inc    r10
	LONG $0xd6940f41             // sete    r14b
	WORD $0xc984                 // test    cl, cl
	JNE  LBB0_209
	WORD $0x894d; BYTE $0xca     // mov    r10, r9

LBB0_209:
	WORD $0x0845; BYTE $0xd8 // or    r8b, r11b
	WORD $0x2044; BYTE $0xf1 // and    cl, r14b
	WORD $0xcb08             // or    bl, cl
	WORD $0x0148; BYTE $0xc7 // add    rdi, rax
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xff49; BYTE $0xc1 // inc    r9
	WORD $0x940f; BYTE $0xd0 // sete    al
	WORD $0xdb84             // test    bl, bl
	JNE  LBB0_211
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi

LBB0_211:
	LONG $0xc0b60f45         // movzx    r8d, r8b
	WORD $0xc320             // and    bl, al
	WORD $0xd908             // or    cl, bl
	WORD $0x0148; BYTE $0xd6 // add    rsi, rdx
	WORD $0x920f; BYTE $0xd2 // setb    dl
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi
	WORD $0xff48; BYTE $0xc7 // inc    rdi
	WORD $0x940f; BYTE $0xd0 // sete    al
	WORD $0xc984             // test    cl, cl
	JNE  LBB0_213
	WORD $0x8948; BYTE $0xf7 // mov    rdi, rsi

LBB0_213:
	WORD $0xc120                 // and    cl, al
	WORD $0xca08                 // or    dl, cl
	JNE  LBB0_214
	WORD $0x8948; BYTE $0xfa     // mov    rdx, rdi
	LONG $0x24542b48; BYTE $0x38 // sub    rdx, qword [rsp + 56]
	JA   LBB0_223

LBB0_216:
	WORD $0x854d; BYTE $0xc0     // test    r8, r8
	JNE  LBB0_223
	LONG $0x247c3b48; BYTE $0x38 // cmp    rdi, qword [rsp + 56]
	JAE  LBB0_218

LBB0_228:
	LONG $0x24048b48         // mov    rax, qword [rsp]
	QUAD $0x000000b024848948 // mov    qword [rsp + 176], rax
	QUAD $0x000000b82494894c // mov    qword [rsp + 184], r10
	QUAD $0x000000c0248c894c // mov    qword [rsp + 192], r9
	JMP  LBB0_229

LBB0_218:
	LONG $0x244c3b4c; BYTE $0x48 // cmp    r9, qword [rsp + 72]
	JBE  LBB0_219

LBB0_223:
	LONG $0x24542b4c; BYTE $0x28 // sub    r10, qword [rsp + 40]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894c; BYTE $0xd6     // mov    rsi, r10
	LONG $0x01ee8348             // sub    rsi, 1
	LONG $0xd7920f40             // setb    dil
	LONG $0x24048b48             // mov    rax, qword [rsp]
	LONG $0x24442b48; BYTE $0x30 // sub    rax, qword [rsp + 48]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	LONG $0x24048948             // mov    qword [rsp], rax
	QUAD $0x000000b024848948     // mov    qword [rsp + 176], rax
	JB   LBB0_225
	WORD $0x894c; BYTE $0xd6     // mov    rsi, r10

LBB0_225:
	WORD $0x2040; BYTE $0xfb     // and    bl, dil
	WORD $0xd908                 // or    cl, bl
	QUAD $0x000000b824b48948     // mov    qword [rsp + 184], rsi
	LONG $0x244c2b4c; BYTE $0x48 // sub    r9, qword [rsp + 72]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0x01ee8348             // sub    rsi, 1
	WORD $0x920f; BYTE $0xd0     // setb    al
	WORD $0xc984                 // test    cl, cl
	JNE  LBB0_227
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9

LBB0_227:
	WORD $0xc120             // and    cl, al
	WORD $0xcb08             // or    bl, cl
	QUAD $0x000000c024b48948 // mov    qword [rsp + 192], rsi
	WORD $0xb60f; BYTE $0xc3 // movzx    eax, bl
	WORD $0x2948; BYTE $0xc2 // sub    rdx, rax
	WORD $0x8948; BYTE $0xd7 // mov    rdi, rdx

LBB0_229:
	QUAD $0x000000c824bc8948             // mov    qword [rsp + 200], rdi
	LONG $0xc057f8c5                     // vxorps    xmm0, xmm0, xmm0
	QUAD $0x0000e0248429fcc5; BYTE $0x00 // vmovaps    yword [rsp + 224], ymm0
	QUAD $0x000100248429fcc5; BYTE $0x00 // vmovaps    yword [rsp + 256], ymm0
	QUAD $0x000000f8249c8b4c             // mov    r11, qword [rsp + 248]
	QUAD $0x0000010024ac8b4c             // mov    r13, qword [rsp + 256]
	QUAD $0x0000010824848b48             // mov    rax, qword [rsp + 264]
	LONG $0x24448948; BYTE $0x58         // mov    qword [rsp + 88], rax
	QUAD $0x0000011024848b48             // mov    rax, qword [rsp + 272]
	LONG $0x24448948; BYTE $0x40         // mov    qword [rsp + 64], rax
	LONG $0x000001b8; BYTE $0x00         // mov    eax, 1
	LONG $0x24448948; BYTE $0x20         // mov    qword [rsp + 32], rax
	WORD $0x3145; BYTE $0xc0             // xor    r8d, r8d
	QUAD $0x0000011824848b48             // mov    rax, qword [rsp + 280]
	LONG $0x24448948; BYTE $0x08         // mov    qword [rsp + 8], rax
	WORD $0x3145; BYTE $0xe4             // xor    r12d, r12d
	WORD $0xc031                         // xor    eax, eax
	LONG $0x24448948; BYTE $0x50         // mov    qword [rsp + 80], rax
	WORD $0xc031                         // xor    eax, eax
	LONG $0x24448948; BYTE $0x68         // mov    qword [rsp + 104], rax
	WORD $0xc031                         // xor    eax, eax
	LONG $0x24448948; BYTE $0x18         // mov    qword [rsp + 24], rax
	WORD $0xc031                         // xor    eax, eax
	LONG $0x24448948; BYTE $0x10         // mov    qword [rsp + 16], rax
	WORD $0x3145; BYTE $0xff             // xor    r15d, r15d
	LONG $0x24348b4c                     // mov    r14, qword [rsp]

LBB0_230:
	LONG $0x370c8d4b                     // lea    rcx, [r15 + r14]
	QUAD $0x000088248caf0f48; BYTE $0x00 // imul    rcx, qword [rsp + 136]
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x30         // mul    qword [rsp + 48]
	WORD $0x8948; BYTE $0xd7             // mov    rdi, rdx
	LONG $0x24048948                     // mov    qword [rsp], rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x28         // mul    qword [rsp + 40]
	WORD $0x8948; BYTE $0xd6             // mov    rsi, rdx
	WORD $0x8949; BYTE $0xc2             // mov    r10, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x48         // mul    qword [rsp + 72]
	WORD $0x8948; BYTE $0xd3             // mov    rbx, rdx
	WORD $0x8949; BYTE $0xc1             // mov    r9, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x38         // mul    qword [rsp + 56]
	WORD $0x0149; BYTE $0xfa             // add    r10, rdi
	WORD $0x1149; BYTE $0xf1             // adc    r9, rsi
	WORD $0x1148; BYTE $0xd8             // adc    rax, rbx
	LONG $0x00d28348                     // adc    rdx, 0
	WORD $0x894c; BYTE $0xfb             // mov    rbx, r15
	WORD $0x014c; BYTE $0xf3             // add    rbx, r14
	JB   LBB0_236

LBB0_231:
	LONG $0x2464894c; BYTE $0x40 // mov    qword [rsp + 64], r12
	WORD $0xc931                 // xor    ecx, ecx
	LONG $0x244c8948; BYTE $0x58 // mov    qword [rsp + 88], rcx
	LONG $0x246c8b4c; BYTE $0x50 // mov    r13, qword [rsp + 80]
	LONG $0x245c8b4c; BYTE $0x68 // mov    r11, qword [rsp + 104]

LBB0_240:
	LONG $0x24748b48; BYTE $0x10 // mov    rsi, qword [rsp + 16]
	WORD $0x014c; BYTE $0xd6     // add    rsi, r10
	LONG $0xd7920f40             // setb    dil
	WORD $0x8949; BYTE $0xf7     // mov    r15, rsi
	WORD $0xff49; BYTE $0xc7     // inc    r15
	WORD $0x940f; BYTE $0xd1     // sete    cl
	LONG $0x241c0348             // add    rbx, qword [rsp]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB0_242
	WORD $0x8949; BYTE $0xf7     // mov    r15, rsi

LBB0_242:
	WORD $0xcb20                 // and    bl, cl
	WORD $0x0840; BYTE $0xdf     // or    dil, bl
	LONG $0x24748b48; BYTE $0x18 // mov    rsi, qword [rsp + 24]
	WORD $0x014c; BYTE $0xce     // add    rsi, r9
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x8948; BYTE $0xf3     // mov    rbx, rsi
	WORD $0xff48; BYTE $0xc3     // inc    rbx
	LONG $0x245c8948; BYTE $0x10 // mov    qword [rsp + 16], rbx
	WORD $0x940f; BYTE $0xd3     // sete    bl
	WORD $0x8440; BYTE $0xff     // test    dil, dil
	JNE  LBB0_244
	LONG $0x24748948; BYTE $0x10 // mov    qword [rsp + 16], rsi

LBB0_244:
	WORD $0x2040; BYTE $0xfb     // and    bl, dil
	WORD $0xd908                 // or    cl, bl
	WORD $0x0149; BYTE $0xc3     // add    r11, rax
	WORD $0x920f; BYTE $0xd0     // setb    al
	WORD $0x894c; BYTE $0xde     // mov    rsi, r11
	WORD $0xff48; BYTE $0xc6     // inc    rsi
	LONG $0x24748948; BYTE $0x18 // mov    qword [rsp + 24], rsi
	WORD $0x940f; BYTE $0xd3     // sete    bl
	WORD $0xc984                 // test    cl, cl
	JNE  LBB0_246
	LONG $0x245c894c; BYTE $0x18 // mov    qword [rsp + 24], r11

LBB0_246:
	WORD $0xcb20             // and    bl, cl
	WORD $0xd808             // or    al, bl
	WORD $0x0149; BYTE $0xd5 // add    r13, rdx
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x894d; BYTE $0xeb // mov    r11, r13
	WORD $0xff49; BYTE $0xc3 // inc    r11
	WORD $0x940f; BYTE $0xd2 // sete    dl
	WORD $0xc084             // test    al, al
	JNE  LBB0_248
	WORD $0x894d; BYTE $0xeb // mov    r11, r13

LBB0_248:
	WORD $0xc220                 // and    dl, al
	WORD $0xd108                 // or    cl, dl
	LONG $0x24548b48; BYTE $0x58 // mov    rdx, qword [rsp + 88]
	WORD $0x8949; BYTE $0xd5     // mov    r13, rdx
	WORD $0xff49; BYTE $0xc5     // inc    r13
	WORD $0x940f; BYTE $0xd0     // sete    al
	WORD $0xc984                 // test    cl, cl
	JNE  LBB0_250
	WORD $0x8949; BYTE $0xd5     // mov    r13, rdx

LBB0_250:
	WORD $0xc820                 // and    al, cl
	LONG $0x24548b48; BYTE $0x40 // mov    rdx, qword [rsp + 64]
	WORD $0x8949; BYTE $0xd4     // mov    r12, rdx
	WORD $0xff49; BYTE $0xc4     // inc    r12
	WORD $0x940f; BYTE $0xd1     // sete    cl
	WORD $0xc084                 // test    al, al
	JNE  LBB0_252
	WORD $0x8949; BYTE $0xd4     // mov    r12, rdx

LBB0_252:
	WORD $0xc120                 // and    cl, al
	WORD $0xb60f; BYTE $0xc1     // movzx    eax, cl
	WORD $0x0149; BYTE $0xc0     // add    r8, rax
	LONG $0x24448b48; BYTE $0x20 // mov    rax, qword [rsp + 32]
	LONG $0x04f88348             // cmp    rax, 4
	JE   LBB0_232
	QUAD $0x000000b0c4b48b4c     // mov    r14, qword [rsp + 8*rax + 176]
	LONG $0x01c08348             // add    rax, 1
	LONG $0x24448948; BYTE $0x20 // mov    qword [rsp + 32], rax
	LONG $0x2444894c; BYTE $0x08 // mov    qword [rsp + 8], r8
	LONG $0x2464894c; BYTE $0x40 // mov    qword [rsp + 64], r12
	WORD $0xc031                 // xor    eax, eax
	LONG $0x24448948; BYTE $0x58 // mov    qword [rsp + 88], rax
	WORD $0x894c; BYTE $0xe8     // mov    rax, r13
	LONG $0x246c894c; BYTE $0x50 // mov    qword [rsp + 80], r13
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0x245c894c; BYTE $0x68 // mov    qword [rsp + 104], r11
	JMP  LBB0_230

LBB0_236:
	LONG $0x2444ff48; BYTE $0x10 // inc    qword [rsp + 16]
	JNE  LBB0_231
	LONG $0x2444ff48; BYTE $0x18 // inc    qword [rsp + 24]
	JE   LBB0_238

LBB0_239:
	LONG $0x24448b4c; BYTE $0x08 // mov    r8, qword [rsp + 8]
	JMP  LBB0_240

LBB0_238:
	WORD $0xff49; BYTE $0xc3       // inc    r11
	JNE  LBB0_239
	WORD $0xff49; BYTE $0xc5       // inc    r13
	JNE  LBB0_239
	LONG $0x2444ff48; BYTE $0x58   // inc    qword [rsp + 88]
	JNE  LBB0_239
	LONG $0x2444ff48; BYTE $0x40   // inc    qword [rsp + 64]
	JNE  LBB0_239
	LONG $0x24448348; WORD $0x0108 // add    qword [rsp + 8], 1
	JMP  LBB0_239

LBB0_232:
	QUAD $0x000000e024bc894c                   // mov    qword [rsp + 224], r15
	LONG $0x24448b48; BYTE $0x10               // mov    rax, qword [rsp + 16]
	QUAD $0x000000e824848948                   // mov    qword [rsp + 232], rax
	LONG $0x24448b48; BYTE $0x18               // mov    rax, qword [rsp + 24]
	QUAD $0x000000f024848948                   // mov    qword [rsp + 240], rax
	QUAD $0x000000f8249c894c                   // mov    qword [rsp + 248], r11
	QUAD $0x0000010024ac894c                   // mov    qword [rsp + 256], r13
	QUAD $0x000001082484c748; LONG $0x00000000 // mov    qword [rsp + 264], 0
	QUAD $0x0000011024a4894c                   // mov    qword [rsp + 272], r12
	QUAD $0x000001182484894c                   // mov    qword [rsp + 280], r8
	LONG $0x245c3b4c; BYTE $0x38               // cmp    r11, qword [rsp + 56]
	JA   LBB0_259
	WORD $0x854d; BYTE $0xed                   // test    r13, r13
	JNE  LBB0_259
	LONG $0x245c3b4c; BYTE $0x38               // cmp    r11, qword [rsp + 56]
	JAE  LBB0_254

LBB0_235:
	QUAD $0x000000a824bc8b48     // mov    rdi, qword [rsp + 168]
	WORD $0x894c; BYTE $0x3f     // mov    qword [rdi], r15
	LONG $0x24448b48; BYTE $0x10 // mov    rax, qword [rsp + 16]
	LONG $0x08478948             // mov    qword [rdi + 8], rax
	LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
	LONG $0x10478948             // mov    qword [rdi + 16], rax
	JMP  LBB0_264

LBB0_254:
	LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
	LONG $0x24443b48; BYTE $0x48 // cmp    rax, qword [rsp + 72]
	JBE  LBB0_255

LBB0_259:
	WORD $0x894c; BYTE $0xf8     // mov    rax, r15
	LONG $0x245c8b48; BYTE $0x30 // mov    rbx, qword [rsp + 48]
	WORD $0x2948; BYTE $0xd8     // sub    rax, rbx
	QUAD $0x000000a824bc8b48     // mov    rdi, qword [rsp + 168]
	WORD $0x8948; BYTE $0x07     // mov    qword [rdi], rax
	QUAD $0x000000d024b48b48     // mov    rsi, qword [rsp + 208]
	LONG $0x244c8b48; BYTE $0x10 // mov    rcx, qword [rsp + 16]
	LONG $0x084e2b48             // sub    rcx, qword [rsi + 8]
	WORD $0x920f; BYTE $0xd0     // setb    al
	WORD $0x8948; BYTE $0xca     // mov    rdx, rcx
	LONG $0x01ea8348             // sub    rdx, 1
	LONG $0xd0920f41             // setb    r8b
	WORD $0x3949; BYTE $0xdf     // cmp    r15, rbx
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB0_261
	WORD $0x8948; BYTE $0xca     // mov    rdx, rcx

LBB0_261:
	WORD $0x2044; BYTE $0xc3     // and    bl, r8b
	WORD $0xd808                 // or    al, bl
	LONG $0x08578948             // mov    qword [rdi + 8], rdx
	LONG $0x24548b48; BYTE $0x18 // mov    rdx, qword [rsp + 24]
	LONG $0x10562b48             // sub    rdx, qword [rsi + 16]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x8948; BYTE $0xd3     // mov    rbx, rdx
	LONG $0x01eb8348             // sub    rbx, 1
	LONG $0xd0920f41             // setb    r8b
	WORD $0xc084                 // test    al, al
	JNE  LBB0_263
	WORD $0x8948; BYTE $0xd3     // mov    rbx, rdx

LBB0_263:
	WORD $0x2044; BYTE $0xc0 // and    al, r8b
	WORD $0xc108             // or    cl, al
	LONG $0x105f8948         // mov    qword [rdi + 16], rbx
	LONG $0x185e2b4c         // sub    r11, qword [rsi + 24]
	WORD $0xb60f; BYTE $0xc1 // movzx    eax, cl
	WORD $0x2949; BYTE $0xc3 // sub    r11, rax

LBB0_264:
	LONG $0x185f894c // mov    qword [rdi + 24], r11
	MOVQ 320(SP), SP
	VZEROUPPER
	RET

LBB0_66:
	JB   LBB0_65
	LONG $0x24443b4c; BYTE $0x28 // cmp    r8, qword [rsp + 40]
	JA   LBB0_71
	LONG $0x244c8b48; BYTE $0x18 // mov    rcx, qword [rsp + 24]
	LONG $0x244c3b48; BYTE $0x30 // cmp    rcx, qword [rsp + 48]
	JB   LBB0_65
	LONG $0x24443b4c; BYTE $0x28 // cmp    r8, qword [rsp + 40]
	JAE  LBB0_71
	JMP  LBB0_65

LBB0_142:
	JB   LBB0_141
	LONG $0x244c3b4c; BYTE $0x28 // cmp    r9, qword [rsp + 40]
	JA   LBB0_147
	LONG $0x24643b4c; BYTE $0x30 // cmp    r12, qword [rsp + 48]
	JB   LBB0_141
	LONG $0x244c3b4c; BYTE $0x28 // cmp    r9, qword [rsp + 40]
	JAE  LBB0_147
	JMP  LBB0_141

LBB0_219:
	JB   LBB0_228
	LONG $0x24543b4c; BYTE $0x28 // cmp    r10, qword [rsp + 40]
	JA   LBB0_223
	LONG $0x24048b48             // mov    rax, qword [rsp]
	LONG $0x24443b48; BYTE $0x30 // cmp    rax, qword [rsp + 48]
	JB   LBB0_228
	LONG $0x24543b4c; BYTE $0x28 // cmp    r10, qword [rsp + 40]
	JAE  LBB0_223
	JMP  LBB0_228

LBB0_255:
	JB   LBB0_235
	LONG $0x24448b48; BYTE $0x10 // mov    rax, qword [rsp + 16]
	LONG $0x24443b48; BYTE $0x28 // cmp    rax, qword [rsp + 40]
	JA   LBB0_259
	LONG $0x247c3b4c; BYTE $0x30 // cmp    r15, qword [rsp + 48]
	JB   LBB0_235
	LONG $0x24448b48; BYTE $0x10 // mov    rax, qword [rsp + 16]
	LONG $0x24443b48; BYTE $0x28 // cmp    rax, qword [rsp + 40]
	JAE  LBB0_259
	JMP  LBB0_235

LBB0_25:
	LONG $0xffb60f40 // movzx    edi, dil
	LONG $0x01c78348 // add    rdi, 1
	JMP  LBB0_26

LBB0_43:
	LONG $0xf6b60f40 // movzx    esi, sil
	LONG $0x01c68348 // add    rsi, 1
	JMP  LBB0_44

LBB0_61:
	LONG $0xf6b60f40             // movzx    esi, sil
	LONG $0x01c68348             // add    rsi, 1
	WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
	LONG $0x24442b48; BYTE $0x38 // sub    rax, qword [rsp + 56]
	JBE  LBB0_63
	JMP  LBB0_71

LBB0_101:
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	WORD $0xb60f; BYTE $0xc0     // movzx    eax, al
	LONG $0x01c08348             // add    rax, 1
	LONG $0x24448948; BYTE $0x08 // mov    qword [rsp + 8], rax
	JMP  LBB0_102

LBB0_119:
	LONG $0x24448b48; BYTE $0x60 // mov    rax, qword [rsp + 96]
	WORD $0xb60f; BYTE $0xc0     // movzx    eax, al
	LONG $0x01c08348             // add    rax, 1
	LONG $0x24448948; BYTE $0x60 // mov    qword [rsp + 96], rax
	JMP  LBB0_120

LBB0_137:
	LONG $0xffb60f40             // movzx    edi, dil
	LONG $0x01c78348             // add    rdi, 1
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x24442b48; BYTE $0x38 // sub    rax, qword [rsp + 56]
	JBE  LBB0_139
	JMP  LBB0_147

LBB0_177:
	WORD $0x894c; BYTE $0xd8 // mov    rax, r11
	LONG $0xf6b60f40         // movzx    esi, sil
	LONG $0x01c68348         // add    rsi, 1
	JMP  LBB0_179

LBB0_196:
	LONG $0xf6b60f40 // movzx    esi, sil
	LONG $0x01c68348 // add    rsi, 1
	JMP  LBB0_197

LBB0_214:
	LONG $0xc0b60f45             // movzx    r8d, r8b
	LONG $0x01c08349             // add    r8, 1
	WORD $0x8948; BYTE $0xfa     // mov    rdx, rdi
	LONG $0x24542b48; BYTE $0x38 // sub    rdx, qword [rsp + 56]
	JBE  LBB0_216
	JMP  LBB0_223

TEXT Â·_mont_mod_exp(SB), $456-48

	MOVQ res+0(FP), DI
	MOVQ in1+8(FP), SI
	MOVQ in2+16(FP), DX
	MOVQ p+24(FP), CX
	MOVQ rr+32(FP), R8
	MOVQ k0+40(FP), R9
	MOVQ SP, BP
	ADDQ $32, SP
	ANDQ $-32, SP
	MOVQ BP, 416(SP)

	QUAD $0x00000088248c894c     // mov    qword [rsp + 136], r9
	QUAD $0x000000902484894c     // mov    qword [rsp + 144], r8
	LONG $0x18428b48             // mov    rax, qword [rdx + 24]
	LONG $0x000100bb; BYTE $0x00 // mov    ebx, 256
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	QUAD $0x0000014824bc8948     // mov    qword [rsp + 328], rdi
	QUAD $0x0000016024948948     // mov    qword [rsp + 352], rdx
	JNE  LBB1_4
	LONG $0x10428b48             // mov    rax, qword [rdx + 16]
	LONG $0x0000c0bb; BYTE $0x00 // mov    ebx, 192
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JNE  LBB1_4
	LONG $0x08428b48             // mov    rax, qword [rdx + 8]
	LONG $0x000080bb; BYTE $0x00 // mov    ebx, 128
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JNE  LBB1_4
	WORD $0x8b48; BYTE $0x02     // mov    rax, qword [rdx]
	LONG $0x000040bb; BYTE $0x00 // mov    ebx, 64
	WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE   LBB1_319

LBB1_4:
	LONG $0xc0bd0f48         // bsr    rax, rax
	WORD $0xf083; BYTE $0x3f // xor    eax, 63
	WORD $0xc329             // sub    ebx, eax
	QUAD $0x000000b8249c8948 // mov    qword [rsp + 184], rbx

LBB1_5:
	WORD $0x8b4c; BYTE $0x0e             // mov    r9, qword [rsi]
	WORD $0x8b48; BYTE $0x11             // mov    rdx, qword [rcx]
	LONG $0x08598b48                     // mov    rbx, qword [rcx + 8]
	LONG $0x10518b4c                     // mov    r10, qword [rcx + 16]
	QUAD $0x0000009024848b48             // mov    rax, qword [rsp + 144]
	WORD $0x8b4c; BYTE $0x00             // mov    r8, qword [rax]
	WORD $0x894c; BYTE $0xcf             // mov    rdi, r9
	QUAD $0x00008824bcaf0f48; BYTE $0x00 // imul    rdi, qword [rsp + 136]
	LONG $0xf8af0f49                     // imul    rdi, r8
	WORD $0x8948; BYTE $0xf8             // mov    rax, rdi
	LONG $0x24548948; BYTE $0x60         // mov    qword [rsp + 96], rdx
	WORD $0xf748; BYTE $0xe2             // mul    rdx
	LONG $0x24548948; BYTE $0x18         // mov    qword [rsp + 24], rdx
	LONG $0x24448948; BYTE $0x40         // mov    qword [rsp + 64], rax
	WORD $0x8948; BYTE $0xf8             // mov    rax, rdi
	LONG $0x245c8948; BYTE $0x48         // mov    qword [rsp + 72], rbx
	WORD $0xf748; BYTE $0xe3             // mul    rbx
	WORD $0x8949; BYTE $0xd4             // mov    r12, rdx
	WORD $0x8949; BYTE $0xc3             // mov    r11, rax
	WORD $0x8948; BYTE $0xf8             // mov    rax, rdi
	LONG $0x2454894c; BYTE $0x78         // mov    qword [rsp + 120], r10
	WORD $0xf749; BYTE $0xe2             // mul    r10
	WORD $0x8949; BYTE $0xc7             // mov    r15, rax
	WORD $0x8949; BYTE $0xd5             // mov    r13, rdx
	QUAD $0x00000150248c8948             // mov    qword [rsp + 336], rcx
	LONG $0x18498b48                     // mov    rcx, qword [rcx + 24]
	WORD $0x8948; BYTE $0xf8             // mov    rax, rdi
	LONG $0x244c8948; BYTE $0x68         // mov    qword [rsp + 104], rcx
	WORD $0xf748; BYTE $0xe1             // mul    rcx
	WORD $0x8949; BYTE $0xc6             // mov    r14, rax
	WORD $0x8949; BYTE $0xd2             // mov    r10, rdx
	LONG $0x245c034c; BYTE $0x18         // add    r11, qword [rsp + 24]
	WORD $0x114d; BYTE $0xe7             // adc    r15, r12
	WORD $0x114d; BYTE $0xee             // adc    r14, r13
	LONG $0x00d28349                     // adc    r10, 0
	WORD $0x894c; BYTE $0xc0             // mov    rax, r8
	LONG $0x244c894c; BYTE $0x18         // mov    qword [rsp + 24], r9
	WORD $0xf749; BYTE $0xe1             // mul    r9
	WORD $0x8949; BYTE $0xc4             // mov    r12, rax
	WORD $0x8949; BYTE $0xd5             // mov    r13, rdx
	LONG $0x084e8b48                     // mov    rcx, qword [rsi + 8]
	WORD $0x894c; BYTE $0xc0             // mov    rax, r8
	LONG $0x244c8948; BYTE $0x38         // mov    qword [rsp + 56], rcx
	WORD $0xf748; BYTE $0xe1             // mul    rcx
	WORD $0x8948; BYTE $0xc7             // mov    rdi, rax
	WORD $0x8948; BYTE $0xd1             // mov    rcx, rdx
	LONG $0x10568b48                     // mov    rdx, qword [rsi + 16]
	WORD $0x894c; BYTE $0xc0             // mov    rax, r8
	LONG $0x24548948; BYTE $0x20         // mov    qword [rsp + 32], rdx
	WORD $0xf748; BYTE $0xe2             // mul    rdx
	WORD $0x8949; BYTE $0xc1             // mov    r9, rax
	WORD $0x8948; BYTE $0xd3             // mov    rbx, rdx
	LONG $0x18568b48                     // mov    rdx, qword [rsi + 24]
	WORD $0x894c; BYTE $0xc0             // mov    rax, r8
	LONG $0x24548948; BYTE $0x28         // mov    qword [rsp + 40], rdx
	WORD $0xf748; BYTE $0xe2             // mul    rdx
	WORD $0x014c; BYTE $0xef             // add    rdi, r13
	WORD $0x1149; BYTE $0xc9             // adc    r9, rcx
	WORD $0x1148; BYTE $0xd8             // adc    rax, rbx
	LONG $0x00d28348                     // adc    rdx, 0
	WORD $0x014c; BYTE $0xdf             // add    rdi, r11
	WORD $0x920f; BYTE $0xd1             // setb    cl
	WORD $0x8948; BYTE $0xfe             // mov    rsi, rdi
	WORD $0xff48; BYTE $0xc6             // inc    rsi
	LONG $0x24748948; BYTE $0x30         // mov    qword [rsp + 48], rsi
	LONG $0xd6940f40                     // sete    sil
	LONG $0x2464034c; BYTE $0x40         // add    r12, qword [rsp + 64]
	WORD $0x920f; BYTE $0xd3             // setb    bl
	JB   LBB1_7
	LONG $0x247c8948; BYTE $0x30         // mov    qword [rsp + 48], rdi

LBB1_7:
	WORD $0x2040; BYTE $0xf3 // and    bl, sil
	WORD $0xd908             // or    cl, bl
	WORD $0x014d; BYTE $0xcf // add    r15, r9
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x894d; BYTE $0xf9 // mov    r9, r15
	WORD $0xff49; BYTE $0xc1 // inc    r9
	LONG $0xd6940f40         // sete    sil
	WORD $0xc984             // test    cl, cl
	JNE  LBB1_9
	WORD $0x894d; BYTE $0xf9 // mov    r9, r15

LBB1_9:
	WORD $0x2040; BYTE $0xf1 // and    cl, sil
	WORD $0xcb08             // or    bl, cl
	WORD $0x0149; BYTE $0xc6 // add    r14, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x894d; BYTE $0xf3 // mov    r11, r14
	WORD $0xff49; BYTE $0xc3 // inc    r11
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB1_11
	WORD $0x894d; BYTE $0xf3 // mov    r11, r14

LBB1_11:
	WORD $0xcb20                 // and    bl, cl
	WORD $0xd808                 // or    al, bl
	WORD $0x0149; BYTE $0xd2     // add    r10, rdx
	LONG $0x2454920f; BYTE $0x40 // setb    byte [rsp + 64]
	WORD $0x894d; BYTE $0xd6     // mov    r14, r10
	WORD $0xff49; BYTE $0xc6     // inc    r14
	LONG $0xd0940f41             // sete    r8b
	WORD $0xc084                 // test    al, al
	JNE  LBB1_13
	WORD $0x894d; BYTE $0xd6     // mov    r14, r10

LBB1_13:
	WORD $0x2041; BYTE $0xc0             // and    r8b, al
	QUAD $0x0000009024848b48             // mov    rax, qword [rsp + 144]
	LONG $0x08708b48                     // mov    rsi, qword [rax + 8]
	WORD $0x8948; BYTE $0xf7             // mov    rdi, rsi
	LONG $0x246c8b4c; BYTE $0x18         // mov    r13, qword [rsp + 24]
	LONG $0xfdaf0f49                     // imul    rdi, r13
	LONG $0x247c0348; BYTE $0x30         // add    rdi, qword [rsp + 48]
	QUAD $0x00008824bcaf0f48; BYTE $0x00 // imul    rdi, qword [rsp + 136]
	WORD $0x8948; BYTE $0xf8             // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x60         // mul    qword [rsp + 96]
	WORD $0x8949; BYTE $0xd2             // mov    r10, rdx
	QUAD $0x000000a024848948             // mov    qword [rsp + 160], rax
	WORD $0x8948; BYTE $0xf8             // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x48         // mul    qword [rsp + 72]
	WORD $0x8949; BYTE $0xd7             // mov    r15, rdx
	WORD $0x8948; BYTE $0xc3             // mov    rbx, rax
	WORD $0x8948; BYTE $0xf8             // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x78         // mul    qword [rsp + 120]
	WORD $0x8948; BYTE $0xc1             // mov    rcx, rax
	WORD $0x8949; BYTE $0xd4             // mov    r12, rdx
	LONG $0x24440844; BYTE $0x40         // or    byte [rsp + 64], r8b
	WORD $0x8948; BYTE $0xf8             // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x68         // mul    qword [rsp + 104]
	WORD $0x8949; BYTE $0xd0             // mov    r8, rdx
	WORD $0x014c; BYTE $0xd3             // add    rbx, r10
	WORD $0x114c; BYTE $0xf9             // adc    rcx, r15
	QUAD $0x00000080248c8948             // mov    qword [rsp + 128], rcx
	WORD $0x114c; BYTE $0xe0             // adc    rax, r12
	QUAD $0x0000009824848948             // mov    qword [rsp + 152], rax
	LONG $0x00d08349                     // adc    r8, 0
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	WORD $0xf749; BYTE $0xe5             // mul    r13
	WORD $0x8949; BYTE $0xd4             // mov    r12, rdx
	LONG $0x24448948; BYTE $0x70         // mov    qword [rsp + 112], rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x38         // mul    qword [rsp + 56]
	WORD $0x8949; BYTE $0xd5             // mov    r13, rdx
	WORD $0x8948; BYTE $0xc1             // mov    rcx, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x20         // mul    qword [rsp + 32]
	WORD $0x8948; BYTE $0xd7             // mov    rdi, rdx
	WORD $0x8949; BYTE $0xc2             // mov    r10, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x28         // mul    qword [rsp + 40]
	WORD $0x014c; BYTE $0xe1             // add    rcx, r12
	LONG $0x244c8948; BYTE $0x50         // mov    qword [rsp + 80], rcx
	WORD $0x114d; BYTE $0xea             // adc    r10, r13
	WORD $0x1148; BYTE $0xf8             // adc    rax, rdi
	LONG $0x00d28348                     // adc    rdx, 0
	LONG $0x24548948; BYTE $0x58         // mov    qword [rsp + 88], rdx
	WORD $0x0149; BYTE $0xd9             // add    r9, rbx
	WORD $0x920f; BYTE $0xd3             // setb    bl
	WORD $0x894d; BYTE $0xcc             // mov    r12, r9
	WORD $0xff49; BYTE $0xc4             // inc    r12
	LONG $0xd6940f40                     // sete    sil
	QUAD $0x000000a024948b48             // mov    rdx, qword [rsp + 160]
	LONG $0x24540348; BYTE $0x30         // add    rdx, qword [rsp + 48]
	WORD $0x920f; BYTE $0xd1             // setb    cl
	JB   LBB1_15
	WORD $0x894d; BYTE $0xcc             // mov    r12, r9

LBB1_15:
	LONG $0x7cb60f44; WORD $0x4024 // movzx    r15d, byte [rsp + 64]
	WORD $0x2040; BYTE $0xf1       // and    cl, sil
	WORD $0xcb08                   // or    bl, cl
	QUAD $0x00000080249c034c       // add    r11, qword [rsp + 128]
	WORD $0x920f; BYTE $0xd1       // setb    cl
	WORD $0x894c; BYTE $0xdf       // mov    rdi, r11
	WORD $0xff48; BYTE $0xc7       // inc    rdi
	LONG $0xd6940f40               // sete    sil
	WORD $0xdb84                   // test    bl, bl
	JNE  LBB1_17
	WORD $0x894c; BYTE $0xdf       // mov    rdi, r11

LBB1_17:
	WORD $0x2040; BYTE $0xf3 // and    bl, sil
	WORD $0xd908             // or    cl, bl
	QUAD $0x0000009824b4034c // add    r14, qword [rsp + 152]
	LONG $0xd3920f41         // setb    r11b
	WORD $0x894c; BYTE $0xf6 // mov    rsi, r14
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	WORD $0x940f; BYTE $0xd3 // sete    bl
	WORD $0xc984             // test    cl, cl
	JNE  LBB1_19
	WORD $0x894c; BYTE $0xf6 // mov    rsi, r14

LBB1_19:
	WORD $0xd920             // and    cl, bl
	WORD $0x0841; BYTE $0xcb // or    r11b, cl
	WORD $0x014d; BYTE $0xf8 // add    r8, r15
	WORD $0x894d; BYTE $0xc5 // mov    r13, r8
	WORD $0xff49; BYTE $0xc5 // inc    r13
	LONG $0xd7940f41         // sete    r15b
	WORD $0x8445; BYTE $0xdb // test    r11b, r11b
	JNE  LBB1_21
	WORD $0x894d; BYTE $0xc5 // mov    r13, r8

LBB1_21:
	LONG $0x2464034c; BYTE $0x50 // add    r12, qword [rsp + 80]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894d; BYTE $0xe1     // mov    r9, r12
	WORD $0xff49; BYTE $0xc1     // inc    r9
	LONG $0xd0940f41             // sete    r8b
	LONG $0x24540348; BYTE $0x70 // add    rdx, qword [rsp + 112]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB1_23
	WORD $0x894d; BYTE $0xe1     // mov    r9, r12

LBB1_23:
	WORD $0x2044; BYTE $0xc3 // and    bl, r8b
	WORD $0xd908             // or    cl, bl
	WORD $0x014c; BYTE $0xd7 // add    rdi, r10
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x8949; BYTE $0xfc // mov    r12, rdi
	WORD $0xff49; BYTE $0xc4 // inc    r12
	LONG $0xd0940f41         // sete    r8b
	WORD $0xc984             // test    cl, cl
	JNE  LBB1_25
	WORD $0x8949; BYTE $0xfc // mov    r12, rdi

LBB1_25:
	WORD $0x2045; BYTE $0xdf // and    r15b, r11b
	WORD $0x2044; BYTE $0xc1 // and    cl, r8b
	WORD $0xcb08             // or    bl, cl
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xff49; BYTE $0xc3 // inc    r11
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB1_27
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi

LBB1_27:
	LONG $0xf7b60f41             // movzx    esi, r15b
	LONG $0x24748948; BYTE $0x30 // mov    qword [rsp + 48], rsi
	WORD $0xcb20                 // and    bl, cl
	WORD $0xd808                 // or    al, bl
	LONG $0x246c034c; BYTE $0x58 // add    r13, qword [rsp + 88]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894d; BYTE $0xef     // mov    r15, r13
	WORD $0xff49; BYTE $0xc7     // inc    r15
	WORD $0x940f; BYTE $0xd2     // sete    dl
	WORD $0xc084                 // test    al, al
	JNE  LBB1_29
	WORD $0x894d; BYTE $0xef     // mov    r15, r13

LBB1_29:
	WORD $0xd020  // and    al, dl
	WORD $0xc108  // or    cl, al
	JNE  LBB1_320

LBB1_30:
	QUAD $0x0000009024848b48             // mov    rax, qword [rsp + 144]
	LONG $0x10788b48                     // mov    rdi, qword [rax + 16]
	WORD $0x8948; BYTE $0xfe             // mov    rsi, rdi
	LONG $0x246c8b4c; BYTE $0x18         // mov    r13, qword [rsp + 24]
	LONG $0xf5af0f49                     // imul    rsi, r13
	WORD $0x014c; BYTE $0xce             // add    rsi, r9
	QUAD $0x00008824b4af0f48; BYTE $0x00 // imul    rsi, qword [rsp + 136]
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x60         // mul    qword [rsp + 96]
	QUAD $0x00000080248c894c             // mov    qword [rsp + 128], r9
	WORD $0x8949; BYTE $0xd1             // mov    r9, rdx
	WORD $0x8949; BYTE $0xc0             // mov    r8, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x48         // mul    qword [rsp + 72]
	WORD $0x8949; BYTE $0xd2             // mov    r10, rdx
	WORD $0x8948; BYTE $0xc3             // mov    rbx, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x78         // mul    qword [rsp + 120]
	WORD $0x8949; BYTE $0xd6             // mov    r14, rdx
	WORD $0x8948; BYTE $0xc1             // mov    rcx, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x68         // mul    qword [rsp + 104]
	WORD $0x014c; BYTE $0xcb             // add    rbx, r9
	WORD $0x114c; BYTE $0xd1             // adc    rcx, r10
	QUAD $0x00000098248c8948             // mov    qword [rsp + 152], rcx
	WORD $0x114c; BYTE $0xf0             // adc    rax, r14
	LONG $0x24448948; BYTE $0x50         // mov    qword [rsp + 80], rax
	LONG $0x00d28348                     // adc    rdx, 0
	LONG $0x24548948; BYTE $0x70         // mov    qword [rsp + 112], rdx
	WORD $0x8948; BYTE $0xf8             // mov    rax, rdi
	WORD $0xf749; BYTE $0xe5             // mul    r13
	WORD $0x8949; BYTE $0xd5             // mov    r13, rdx
	LONG $0x24448948; BYTE $0x58         // mov    qword [rsp + 88], rax
	WORD $0x8948; BYTE $0xf8             // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x38         // mul    qword [rsp + 56]
	WORD $0x8949; BYTE $0xd2             // mov    r10, rdx
	WORD $0x8949; BYTE $0xc1             // mov    r9, rax
	WORD $0x8948; BYTE $0xf8             // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x20         // mul    qword [rsp + 32]
	WORD $0x8948; BYTE $0xd1             // mov    rcx, rdx
	WORD $0x8948; BYTE $0xc6             // mov    rsi, rax
	WORD $0x8948; BYTE $0xf8             // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x28         // mul    qword [rsp + 40]
	WORD $0x014d; BYTE $0xe9             // add    r9, r13
	WORD $0x114c; BYTE $0xd6             // adc    rsi, r10
	LONG $0x24748948; BYTE $0x40         // mov    qword [rsp + 64], rsi
	WORD $0x1148; BYTE $0xc8             // adc    rax, rcx
	LONG $0x00d28348                     // adc    rdx, 0
	WORD $0x0149; BYTE $0xdc             // add    r12, rbx
	WORD $0x920f; BYTE $0xd1             // setb    cl
	WORD $0x894d; BYTE $0xe6             // mov    r14, r12
	WORD $0xff49; BYTE $0xc6             // inc    r14
	LONG $0xd6940f40                     // sete    sil
	QUAD $0x000000802484034c             // add    r8, qword [rsp + 128]
	WORD $0x894d; BYTE $0xc2             // mov    r10, r8
	WORD $0x920f; BYTE $0xd3             // setb    bl
	JB   LBB1_32
	WORD $0x894d; BYTE $0xe6             // mov    r14, r12

LBB1_32:
	WORD $0x2040; BYTE $0xf3 // and    bl, sil
	WORD $0xd908             // or    cl, bl
	QUAD $0x00000098249c034c // add    r11, qword [rsp + 152]
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x894c; BYTE $0xde // mov    rsi, r11
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	LONG $0xd0940f41         // sete    r8b
	WORD $0xc984             // test    cl, cl
	JNE  LBB1_34
	WORD $0x894c; BYTE $0xde // mov    rsi, r11

LBB1_34:
	WORD $0x2044; BYTE $0xc1     // and    cl, r8b
	WORD $0xcb08                 // or    bl, cl
	LONG $0x247c034c; BYTE $0x50 // add    r15, qword [rsp + 80]
	LONG $0xd3920f41             // setb    r11b
	WORD $0x894d; BYTE $0xfd     // mov    r13, r15
	WORD $0xff49; BYTE $0xc5     // inc    r13
	WORD $0x940f; BYTE $0xd1     // sete    cl
	WORD $0xdb84                 // test    bl, bl
	JNE  LBB1_36
	WORD $0x894d; BYTE $0xfd     // mov    r13, r15

LBB1_36:
	WORD $0xcb20                 // and    bl, cl
	WORD $0x0841; BYTE $0xdb     // or    r11b, bl
	LONG $0x244c8b48; BYTE $0x30 // mov    rcx, qword [rsp + 48]
	LONG $0x244c0348; BYTE $0x70 // add    rcx, qword [rsp + 112]
	LONG $0xd0920f41             // setb    r8b
	WORD $0x8949; BYTE $0xcc     // mov    r12, rcx
	WORD $0xff49; BYTE $0xc4     // inc    r12
	LONG $0xd7940f41             // sete    r15b
	WORD $0x8445; BYTE $0xdb     // test    r11b, r11b
	JNE  LBB1_38
	WORD $0x8949; BYTE $0xcc     // mov    r12, rcx

LBB1_38:
	WORD $0x014d; BYTE $0xce     // add    r14, r9
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894c; BYTE $0xf7     // mov    rdi, r14
	WORD $0xff48; BYTE $0xc7     // inc    rdi
	LONG $0xd1940f41             // sete    r9b
	LONG $0x2454034c; BYTE $0x58 // add    r10, qword [rsp + 88]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB1_40
	WORD $0x894c; BYTE $0xf7     // mov    rdi, r14

LBB1_40:
	WORD $0x2045; BYTE $0xdf     // and    r15b, r11b
	WORD $0x2044; BYTE $0xcb     // and    bl, r9b
	WORD $0xd908                 // or    cl, bl
	LONG $0x24740348; BYTE $0x40 // add    rsi, qword [rsp + 64]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x8949; BYTE $0xf3     // mov    r11, rsi
	WORD $0xff49; BYTE $0xc3     // inc    r11
	LONG $0xd2940f41             // sete    r10b
	WORD $0xc984                 // test    cl, cl
	JNE  LBB1_42
	WORD $0x8949; BYTE $0xf3     // mov    r11, rsi

LBB1_42:
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0x0845; BYTE $0xf8 // or    r8b, r15b
	WORD $0x2044; BYTE $0xd1 // and    cl, r10b
	WORD $0xcb08             // or    bl, cl
	WORD $0x0149; BYTE $0xc5 // add    r13, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x894d; BYTE $0xee // mov    r14, r13
	WORD $0xff49; BYTE $0xc6 // inc    r14
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB1_44
	WORD $0x894d; BYTE $0xee // mov    r14, r13

LBB1_44:
	LONG $0xf0b60f41         // movzx    esi, r8b
	WORD $0xcb20             // and    bl, cl
	WORD $0xd808             // or    al, bl
	WORD $0x0149; BYTE $0xd4 // add    r12, rdx
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x894d; BYTE $0xe7 // mov    r15, r12
	WORD $0xff49; BYTE $0xc7 // inc    r15
	WORD $0x940f; BYTE $0xd2 // sete    dl
	WORD $0xc084             // test    al, al
	JNE  LBB1_46
	WORD $0x894d; BYTE $0xe7 // mov    r15, r12

LBB1_46:
	WORD $0xd020  // and    al, dl
	WORD $0xc108  // or    cl, al
	JNE  LBB1_321

LBB1_47:
	LONG $0x24748948; BYTE $0x30         // mov    qword [rsp + 48], rsi
	QUAD $0x0000009024848b48             // mov    rax, qword [rsp + 144]
	LONG $0x18788b48                     // mov    rdi, qword [rax + 24]
	WORD $0x8948; BYTE $0xfe             // mov    rsi, rdi
	LONG $0x246c8b4c; BYTE $0x18         // mov    r13, qword [rsp + 24]
	LONG $0xf5af0f49                     // imul    rsi, r13
	LONG $0x244c894c; BYTE $0x50         // mov    qword [rsp + 80], r9
	WORD $0x014c; BYTE $0xce             // add    rsi, r9
	QUAD $0x00008824b4af0f48; BYTE $0x00 // imul    rsi, qword [rsp + 136]
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x60         // mul    qword [rsp + 96]
	WORD $0x8949; BYTE $0xd1             // mov    r9, rdx
	WORD $0x8949; BYTE $0xc4             // mov    r12, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x48         // mul    qword [rsp + 72]
	WORD $0x8949; BYTE $0xd2             // mov    r10, rdx
	WORD $0x8948; BYTE $0xc3             // mov    rbx, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x78         // mul    qword [rsp + 120]
	WORD $0x8948; BYTE $0xd1             // mov    rcx, rdx
	WORD $0x8949; BYTE $0xc0             // mov    r8, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x68         // mul    qword [rsp + 104]
	WORD $0x014c; BYTE $0xcb             // add    rbx, r9
	WORD $0x114d; BYTE $0xd0             // adc    r8, r10
	WORD $0x1148; BYTE $0xc8             // adc    rax, rcx
	LONG $0x24448948; BYTE $0x70         // mov    qword [rsp + 112], rax
	LONG $0x00d28348                     // adc    rdx, 0
	LONG $0x24548948; BYTE $0x58         // mov    qword [rsp + 88], rdx
	WORD $0x8948; BYTE $0xf8             // mov    rax, rdi
	WORD $0xf749; BYTE $0xe5             // mul    r13
	WORD $0x8949; BYTE $0xd5             // mov    r13, rdx
	LONG $0x24448948; BYTE $0x40         // mov    qword [rsp + 64], rax
	WORD $0x8948; BYTE $0xf8             // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x38         // mul    qword [rsp + 56]
	WORD $0x8949; BYTE $0xd2             // mov    r10, rdx
	WORD $0x8949; BYTE $0xc1             // mov    r9, rax
	WORD $0x8948; BYTE $0xf8             // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x20         // mul    qword [rsp + 32]
	WORD $0x8948; BYTE $0xd1             // mov    rcx, rdx
	WORD $0x8948; BYTE $0xc6             // mov    rsi, rax
	WORD $0x8948; BYTE $0xf8             // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x28         // mul    qword [rsp + 40]
	WORD $0x014d; BYTE $0xe9             // add    r9, r13
	WORD $0x114c; BYTE $0xd6             // adc    rsi, r10
	LONG $0x24748948; BYTE $0x18         // mov    qword [rsp + 24], rsi
	WORD $0x1148; BYTE $0xc8             // adc    rax, rcx
	LONG $0x00d28348                     // adc    rdx, 0
	WORD $0x0149; BYTE $0xdb             // add    r11, rbx
	WORD $0x920f; BYTE $0xd1             // setb    cl
	WORD $0x894d; BYTE $0xdd             // mov    r13, r11
	WORD $0xff49; BYTE $0xc5             // inc    r13
	LONG $0xd7940f40                     // sete    dil
	LONG $0x2464034c; BYTE $0x50         // add    r12, qword [rsp + 80]
	WORD $0x894d; BYTE $0xe2             // mov    r10, r12
	WORD $0x920f; BYTE $0xd3             // setb    bl
	JB   LBB1_49
	WORD $0x894d; BYTE $0xdd             // mov    r13, r11

LBB1_49:
	WORD $0x2040; BYTE $0xfb // and    bl, dil
	WORD $0xd908             // or    cl, bl
	WORD $0x014d; BYTE $0xc6 // add    r14, r8
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x894c; BYTE $0xf7 // mov    rdi, r14
	WORD $0xff48; BYTE $0xc7 // inc    rdi
	LONG $0xd0940f41         // sete    r8b
	WORD $0xc984             // test    cl, cl
	JNE  LBB1_51
	WORD $0x894c; BYTE $0xf7 // mov    rdi, r14

LBB1_51:
	WORD $0x2044; BYTE $0xc1     // and    cl, r8b
	WORD $0xcb08                 // or    bl, cl
	LONG $0x247c034c; BYTE $0x70 // add    r15, qword [rsp + 112]
	LONG $0xd3920f41             // setb    r11b
	WORD $0x894d; BYTE $0xfc     // mov    r12, r15
	WORD $0xff49; BYTE $0xc4     // inc    r12
	WORD $0x940f; BYTE $0xd1     // sete    cl
	WORD $0xdb84                 // test    bl, bl
	LONG $0x24748b48; BYTE $0x30 // mov    rsi, qword [rsp + 48]
	JNE  LBB1_53
	WORD $0x894d; BYTE $0xfc     // mov    r12, r15

LBB1_53:
	WORD $0xcb20                 // and    bl, cl
	WORD $0x0841; BYTE $0xdb     // or    r11b, bl
	LONG $0x24740348; BYTE $0x58 // add    rsi, qword [rsp + 88]
	LONG $0xd0920f41             // setb    r8b
	WORD $0x8949; BYTE $0xf7     // mov    r15, rsi
	WORD $0xff49; BYTE $0xc7     // inc    r15
	LONG $0xd6940f41             // sete    r14b
	WORD $0x8445; BYTE $0xdb     // test    r11b, r11b
	JNE  LBB1_55
	WORD $0x8949; BYTE $0xf7     // mov    r15, rsi

LBB1_55:
	WORD $0x014d; BYTE $0xcd     // add    r13, r9
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894c; BYTE $0xee     // mov    rsi, r13
	WORD $0xff48; BYTE $0xc6     // inc    rsi
	QUAD $0x000000b024b48948     // mov    qword [rsp + 176], rsi
	LONG $0xd1940f41             // sete    r9b
	LONG $0x2454034c; BYTE $0x40 // add    r10, qword [rsp + 64]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB1_57
	QUAD $0x000000b024ac894c     // mov    qword [rsp + 176], r13

LBB1_57:
	WORD $0x2045; BYTE $0xde     // and    r14b, r11b
	WORD $0x2044; BYTE $0xcb     // and    bl, r9b
	WORD $0xd908                 // or    cl, bl
	LONG $0x247c0348; BYTE $0x18 // add    rdi, qword [rsp + 24]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x8949; BYTE $0xf9     // mov    r9, rdi
	WORD $0xff49; BYTE $0xc1     // inc    r9
	LONG $0xd6940f40             // sete    sil
	WORD $0xc984                 // test    cl, cl
	JNE  LBB1_59
	WORD $0x8949; BYTE $0xf9     // mov    r9, rdi

LBB1_59:
	WORD $0x0845; BYTE $0xf0 // or    r8b, r14b
	WORD $0x2040; BYTE $0xf1 // and    cl, sil
	WORD $0xcb08             // or    bl, cl
	WORD $0x0149; BYTE $0xc4 // add    r12, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x894c; BYTE $0xe7 // mov    rdi, r12
	WORD $0xff48; BYTE $0xc7 // inc    rdi
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB1_61
	WORD $0x894c; BYTE $0xe7 // mov    rdi, r12

LBB1_61:
	LONG $0xf0b60f41         // movzx    esi, r8b
	WORD $0xcb20             // and    bl, cl
	WORD $0xd808             // or    al, bl
	WORD $0x0149; BYTE $0xd7 // add    r15, rdx
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x894c; BYTE $0xfa // mov    rdx, r15
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	QUAD $0x000000c824948948 // mov    qword [rsp + 200], rdx
	WORD $0x940f; BYTE $0xd2 // sete    dl
	WORD $0xc084             // test    al, al
	JNE  LBB1_63
	QUAD $0x000000c824bc894c // mov    qword [rsp + 200], r15

LBB1_63:
	WORD $0xd020                 // and    al, dl
	WORD $0xc108                 // or    cl, al
	JNE  LBB1_322
	QUAD $0x000000c824848b48     // mov    rax, qword [rsp + 200]
	LONG $0x24442b48; BYTE $0x68 // sub    rax, qword [rsp + 104]
	JA   LBB1_69

LBB1_65:
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JNE  LBB1_69
	QUAD $0x000000c8248c8b48     // mov    rcx, qword [rsp + 200]
	LONG $0x244c3b48; BYTE $0x68 // cmp    rcx, qword [rsp + 104]
	JAE  LBB1_68

LBB1_67:
	QUAD $0x000000c024bc8948 // mov    qword [rsp + 192], rdi
	QUAD $0x000000a8248c894c // mov    qword [rsp + 168], r9
	JMP  LBB1_74

LBB1_68:
	LONG $0x247c3b48; BYTE $0x78 // cmp    rdi, qword [rsp + 120]
	JBE  LBB1_307

LBB1_69:
	LONG $0x244c2b4c; BYTE $0x48 // sub    r9, qword [rsp + 72]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	LONG $0x01ea8348             // sub    rdx, 1
	QUAD $0x000000a824948948     // mov    qword [rsp + 168], rdx
	WORD $0x920f; BYTE $0xd2     // setb    dl
	QUAD $0x000000b024b48b48     // mov    rsi, qword [rsp + 176]
	LONG $0x24742b48; BYTE $0x60 // sub    rsi, qword [rsp + 96]
	QUAD $0x000000b024b48948     // mov    qword [rsp + 176], rsi
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB1_71
	QUAD $0x000000a8248c894c     // mov    qword [rsp + 168], r9

LBB1_71:
	WORD $0xd320                 // and    bl, dl
	WORD $0xd908                 // or    cl, bl
	LONG $0x247c2b48; BYTE $0x78 // sub    rdi, qword [rsp + 120]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x8948; BYTE $0xfa     // mov    rdx, rdi
	LONG $0x01ea8348             // sub    rdx, 1
	LONG $0xd6920f40             // setb    sil
	WORD $0xc984                 // test    cl, cl
	JNE  LBB1_73
	WORD $0x8948; BYTE $0xfa     // mov    rdx, rdi

LBB1_73:
	WORD $0x2040; BYTE $0xf1 // and    cl, sil
	WORD $0xcb08             // or    bl, cl
	WORD $0xb60f; BYTE $0xcb // movzx    ecx, bl
	WORD $0x2948; BYTE $0xc8 // sub    rax, rcx
	QUAD $0x000000c824848948 // mov    qword [rsp + 200], rax
	QUAD $0x000000c024948948 // mov    qword [rsp + 192], rdx

LBB1_74:
	LONG $0xc057f8c5                     // vxorps    xmm0, xmm0, xmm0
	QUAD $0x0000e0248429fcc5; BYTE $0x00 // vmovaps    yword [rsp + 224], ymm0
	QUAD $0x000100248429fcc5; BYTE $0x00 // vmovaps    yword [rsp + 256], ymm0
	QUAD $0x000000f824848b48             // mov    rax, qword [rsp + 248]
	LONG $0x24448948; BYTE $0x18         // mov    qword [rsp + 24], rax
	QUAD $0x00000100248c8b4c             // mov    r9, qword [rsp + 256]
	QUAD $0x0000010824848b48             // mov    rax, qword [rsp + 264]
	LONG $0x24448948; BYTE $0x40         // mov    qword [rsp + 64], rax
	QUAD $0x0000011024848b48             // mov    rax, qword [rsp + 272]
	QUAD $0x0000008024848948             // mov    qword [rsp + 128], rax
	WORD $0x3145; BYTE $0xd2             // xor    r10d, r10d
	QUAD $0x0000011824848b48             // mov    rax, qword [rsp + 280]
	LONG $0x24448948; BYTE $0x30         // mov    qword [rsp + 48], rax
	WORD $0xc031                         // xor    eax, eax
	LONG $0x24448948; BYTE $0x58         // mov    qword [rsp + 88], rax
	WORD $0x3145; BYTE $0xdb             // xor    r11d, r11d
	WORD $0x3145; BYTE $0xc0             // xor    r8d, r8d
	WORD $0xc031                         // xor    eax, eax
	LONG $0x24448948; BYTE $0x20         // mov    qword [rsp + 32], rax
	WORD $0xc031                         // xor    eax, eax
	LONG $0x24448948; BYTE $0x28         // mov    qword [rsp + 40], rax
	WORD $0xc031                         // xor    eax, eax
	LONG $0x24448948; BYTE $0x38         // mov    qword [rsp + 56], rax
	WORD $0xc931                         // xor    ecx, ecx

LBB1_75:
	QUAD $0x0000009024848b48             // mov    rax, qword [rsp + 144]
	LONG $0x244c8948; BYTE $0x70         // mov    qword [rsp + 112], rcx
	LONG $0xc82c8b4c                     // mov    r13, qword [rax + 8*rcx]
	LONG $0x24748b4c; BYTE $0x38         // mov    r14, qword [rsp + 56]
	LONG $0x2e348d4b                     // lea    rsi, [r14 + r13]
	QUAD $0x00008824b4af0f48; BYTE $0x00 // imul    rsi, qword [rsp + 136]
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x60         // mul    qword [rsp + 96]
	WORD $0x8949; BYTE $0xd4             // mov    r12, rdx
	LONG $0x24448948; BYTE $0x50         // mov    qword [rsp + 80], rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x48         // mul    qword [rsp + 72]
	WORD $0x8948; BYTE $0xd1             // mov    rcx, rdx
	WORD $0x8948; BYTE $0xc3             // mov    rbx, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x78         // mul    qword [rsp + 120]
	WORD $0x8948; BYTE $0xd7             // mov    rdi, rdx
	WORD $0x8949; BYTE $0xc7             // mov    r15, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x68         // mul    qword [rsp + 104]
	WORD $0x014c; BYTE $0xe3             // add    rbx, r12
	QUAD $0x00000098249c8948             // mov    qword [rsp + 152], rbx
	WORD $0x1149; BYTE $0xcf             // adc    r15, rcx
	WORD $0x1148; BYTE $0xf8             // adc    rax, rdi
	LONG $0x00d28348                     // adc    rdx, 0
	WORD $0x014d; BYTE $0xee             // add    r14, r13
	JB   LBB1_90

LBB1_76:
	LONG $0x2454894c; BYTE $0x30 // mov    qword [rsp + 48], r10
	WORD $0xc931                 // xor    ecx, ecx
	LONG $0x244c8948; BYTE $0x40 // mov    qword [rsp + 64], rcx
	WORD $0x894d; BYTE $0xd9     // mov    r9, r11
	LONG $0x2444894c; BYTE $0x18 // mov    qword [rsp + 24], r8

LBB1_77:
	LONG $0x24748b48; BYTE $0x28 // mov    rsi, qword [rsp + 40]
	QUAD $0x0000009824b40348     // add    rsi, qword [rsp + 152]
	LONG $0xd0920f41             // setb    r8b
	WORD $0x8948; BYTE $0xf1     // mov    rcx, rsi
	WORD $0xff48; BYTE $0xc1     // inc    rcx
	LONG $0x244c8948; BYTE $0x38 // mov    qword [rsp + 56], rcx
	WORD $0x940f; BYTE $0xd1     // sete    cl
	LONG $0x2474034c; BYTE $0x50 // add    r14, qword [rsp + 80]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB1_79
	LONG $0x24748948; BYTE $0x38 // mov    qword [rsp + 56], rsi

LBB1_79:
	WORD $0xcb20                 // and    bl, cl
	WORD $0x0841; BYTE $0xd8     // or    r8b, bl
	LONG $0x247c8b48; BYTE $0x20 // mov    rdi, qword [rsp + 32]
	WORD $0x014c; BYTE $0xff     // add    rdi, r15
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x8948; BYTE $0xfe     // mov    rsi, rdi
	WORD $0xff48; BYTE $0xc6     // inc    rsi
	LONG $0x24748948; BYTE $0x28 // mov    qword [rsp + 40], rsi
	WORD $0x940f; BYTE $0xd3     // sete    bl
	WORD $0x8445; BYTE $0xc0     // test    r8b, r8b
	JNE  LBB1_81
	WORD $0x8948; BYTE $0xfe     // mov    rsi, rdi
	LONG $0x247c8948; BYTE $0x28 // mov    qword [rsp + 40], rdi

LBB1_81:
	WORD $0x2044; BYTE $0xc3     // and    bl, r8b
	WORD $0xd908                 // or    cl, bl
	LONG $0x24748b48; BYTE $0x18 // mov    rsi, qword [rsp + 24]
	WORD $0x0148; BYTE $0xc6     // add    rsi, rax
	WORD $0x920f; BYTE $0xd0     // setb    al
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	WORD $0xff48; BYTE $0xc7     // inc    rdi
	LONG $0x247c8948; BYTE $0x20 // mov    qword [rsp + 32], rdi
	WORD $0x940f; BYTE $0xd3     // sete    bl
	WORD $0xc984                 // test    cl, cl
	JNE  LBB1_83
	LONG $0x24748948; BYTE $0x20 // mov    qword [rsp + 32], rsi

LBB1_83:
	WORD $0xcb20                 // and    bl, cl
	WORD $0xd808                 // or    al, bl
	WORD $0x0149; BYTE $0xd1     // add    r9, rdx
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	LONG $0x24548948; BYTE $0x18 // mov    qword [rsp + 24], rdx
	WORD $0x940f; BYTE $0xd2     // sete    dl
	WORD $0xc084                 // test    al, al
	JNE  LBB1_85
	LONG $0x244c894c; BYTE $0x18 // mov    qword [rsp + 24], r9

LBB1_85:
	WORD $0xc220                 // and    dl, al
	WORD $0xd108                 // or    cl, dl
	LONG $0x24548b48; BYTE $0x40 // mov    rdx, qword [rsp + 64]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	WORD $0xff49; BYTE $0xc1     // inc    r9
	WORD $0x940f; BYTE $0xd0     // sete    al
	WORD $0xc984                 // test    cl, cl
	JNE  LBB1_87
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx

LBB1_87:
	WORD $0xc820                 // and    al, cl
	LONG $0x24548b48; BYTE $0x58 // mov    rdx, qword [rsp + 88]
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx
	WORD $0xff48; BYTE $0xc6     // inc    rsi
	WORD $0x940f; BYTE $0xd1     // sete    cl
	WORD $0xc084                 // test    al, al
	JNE  LBB1_89
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx

LBB1_89:
	WORD $0xc120                 // and    cl, al
	WORD $0xb60f; BYTE $0xc1     // movzx    eax, cl
	LONG $0x24548b4c; BYTE $0x30 // mov    r10, qword [rsp + 48]
	WORD $0x0149; BYTE $0xc2     // add    r10, rax
	LONG $0x244c8b48; BYTE $0x70 // mov    rcx, qword [rsp + 112]
	LONG $0x01c18348             // add    rcx, 1
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	LONG $0x24448948; BYTE $0x40 // mov    qword [rsp + 64], rax
	LONG $0x2454894c; BYTE $0x30 // mov    qword [rsp + 48], r10
	QUAD $0x0000008024b48948     // mov    qword [rsp + 128], rsi
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x24748948; BYTE $0x58 // mov    qword [rsp + 88], rsi
	WORD $0x894d; BYTE $0xcb     // mov    r11, r9
	LONG $0x24448b4c; BYTE $0x18 // mov    r8, qword [rsp + 24]
	LONG $0x04f98348             // cmp    rcx, 4
	JNE  LBB1_75
	JMP  LBB1_98

LBB1_90:
	LONG $0x2444ff48; BYTE $0x28 // inc    qword [rsp + 40]
	JNE  LBB1_76
	LONG $0x2444ff48; BYTE $0x20 // inc    qword [rsp + 32]
	JE   LBB1_93

LBB1_92:
	QUAD $0x0000008024a48b4c     // mov    r12, qword [rsp + 128]
	LONG $0x2464894c; BYTE $0x58 // mov    qword [rsp + 88], r12
	JMP  LBB1_77

LBB1_93:
	LONG $0x2444ff48; BYTE $0x18   // inc    qword [rsp + 24]
	JNE  LBB1_92
	WORD $0xff49; BYTE $0xc1       // inc    r9
	JNE  LBB1_92
	LONG $0x2444ff48; BYTE $0x40   // inc    qword [rsp + 64]
	JNE  LBB1_92
	QUAD $0x000000802484ff48       // inc    qword [rsp + 128]
	JNE  LBB1_92
	LONG $0x24448348; WORD $0x0130 // add    qword [rsp + 48], 1
	JMP  LBB1_92

LBB1_98:
	LONG $0x24448b48; BYTE $0x38               // mov    rax, qword [rsp + 56]
	QUAD $0x000000e024848948                   // mov    qword [rsp + 224], rax
	LONG $0x24448b48; BYTE $0x28               // mov    rax, qword [rsp + 40]
	QUAD $0x000000e824848948                   // mov    qword [rsp + 232], rax
	LONG $0x24448b48; BYTE $0x20               // mov    rax, qword [rsp + 32]
	QUAD $0x000000f024848948                   // mov    qword [rsp + 240], rax
	LONG $0x24448b48; BYTE $0x18               // mov    rax, qword [rsp + 24]
	QUAD $0x000000f824848948                   // mov    qword [rsp + 248], rax
	QUAD $0x00000100248c894c                   // mov    qword [rsp + 256], r9
	QUAD $0x000001082484c748; LONG $0x00000000 // mov    qword [rsp + 264], 0
	QUAD $0x00000080248c8b48                   // mov    rcx, qword [rsp + 128]
	QUAD $0x00000110248c8948                   // mov    qword [rsp + 272], rcx
	LONG $0x244c8b48; BYTE $0x30               // mov    rcx, qword [rsp + 48]
	QUAD $0x00000118248c8948                   // mov    qword [rsp + 280], rcx
	LONG $0x24442b48; BYTE $0x68               // sub    rax, qword [rsp + 104]
	JA   LBB1_103
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	JNE  LBB1_103
	LONG $0x244c8b48; BYTE $0x18               // mov    rcx, qword [rsp + 24]
	LONG $0x244c3b48; BYTE $0x68               // cmp    rcx, qword [rsp + 104]
	JAE  LBB1_102

LBB1_101:
	LONG $0x24448b48; BYTE $0x38 // mov    rax, qword [rsp + 56]
	QUAD $0x0000012024848948     // mov    qword [rsp + 288], rax
	LONG $0x24448b48; BYTE $0x28 // mov    rax, qword [rsp + 40]
	QUAD $0x0000012824848948     // mov    qword [rsp + 296], rax
	LONG $0x24448b48; BYTE $0x20 // mov    rax, qword [rsp + 32]
	QUAD $0x0000013024848948     // mov    qword [rsp + 304], rax
	LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
	JMP  LBB1_108

LBB1_102:
	LONG $0x244c8b48; BYTE $0x20 // mov    rcx, qword [rsp + 32]
	LONG $0x244c3b48; BYTE $0x78 // cmp    rcx, qword [rsp + 120]
	JBE  LBB1_311

LBB1_103:
	LONG $0x244c8b48; BYTE $0x28 // mov    rcx, qword [rsp + 40]
	LONG $0x244c2b48; BYTE $0x48 // sub    rcx, qword [rsp + 72]
	WORD $0x920f; BYTE $0xd2     // setb    dl
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	LONG $0x01e98349             // sub    r9, 1
	LONG $0xd0920f41             // setb    r8b
	LONG $0x24748b48; BYTE $0x38 // mov    rsi, qword [rsp + 56]
	LONG $0x24742b48; BYTE $0x60 // sub    rsi, qword [rsp + 96]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	LONG $0x24748948; BYTE $0x38 // mov    qword [rsp + 56], rsi
	QUAD $0x0000012024b48948     // mov    qword [rsp + 288], rsi
	JB   LBB1_105
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx

LBB1_105:
	WORD $0x2044; BYTE $0xc3     // and    bl, r8b
	WORD $0xda08                 // or    dl, bl
	QUAD $0x00000128248c894c     // mov    qword [rsp + 296], r9
	LONG $0x24748b48; BYTE $0x20 // mov    rsi, qword [rsp + 32]
	LONG $0x24742b48; BYTE $0x78 // sub    rsi, qword [rsp + 120]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	LONG $0x01ef8348             // sub    rdi, 1
	LONG $0xd0920f41             // setb    r8b
	WORD $0xd284                 // test    dl, dl
	JNE  LBB1_107
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi

LBB1_107:
	WORD $0x2044; BYTE $0xc2     // and    dl, r8b
	WORD $0xd308                 // or    bl, dl
	QUAD $0x0000013024bc8948     // mov    qword [rsp + 304], rdi
	WORD $0xb60f; BYTE $0xd3     // movzx    edx, bl
	WORD $0x2948; BYTE $0xd0     // sub    rax, rdx
	WORD $0x8948; BYTE $0xfa     // mov    rdx, rdi
	LONG $0x247c8948; BYTE $0x20 // mov    qword [rsp + 32], rdi
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0x244c894c; BYTE $0x28 // mov    qword [rsp + 40], r9

LBB1_108:
	LONG $0x24448948; BYTE $0x18         // mov    qword [rsp + 24], rax
	QUAD $0x0000013824848948             // mov    qword [rsp + 312], rax
	QUAD $0x000000b824848b48             // mov    rax, qword [rsp + 184]
	WORD $0xc085                         // test    eax, eax
	JLE  LBB1_271
	QUAD $0x000000b0248c8b48             // mov    rcx, qword [rsp + 176]
	QUAD $0x000088248caf0f48; BYTE $0x00 // imul    rcx, qword [rsp + 136]
	QUAD $0x00000158248c8948             // mov    qword [rsp + 344], rcx
	WORD $0xc083; BYTE $0x01             // add    eax, 1
	QUAD $0x000000b824848948             // mov    qword [rsp + 184], rax
	JMP  LBB1_112

LBB1_110:
	LONG $0x2444894c; BYTE $0x28 // mov    qword [rsp + 40], r8

LBB1_111:
	QUAD $0x000000b824848b48 // mov    rax, qword [rsp + 184]
	WORD $0xc083; BYTE $0xff // add    eax, -1
	QUAD $0x000000b824848948 // mov    qword [rsp + 184], rax
	WORD $0xf883; BYTE $0x01 // cmp    eax, 1
	JLE  LBB1_270

LBB1_112:
	LONG $0x247c8b48; BYTE $0x38         // mov    rdi, qword [rsp + 56]
	WORD $0x8948; BYTE $0xf9             // mov    rcx, rdi
	QUAD $0x000088248caf0f48; BYTE $0x00 // imul    rcx, qword [rsp + 136]
	LONG $0xcfaf0f48                     // imul    rcx, rdi
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x60         // mul    qword [rsp + 96]
	WORD $0x8948; BYTE $0xd6             // mov    rsi, rdx
	WORD $0x8949; BYTE $0xc0             // mov    r8, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x48         // mul    qword [rsp + 72]
	WORD $0x8949; BYTE $0xd7             // mov    r15, rdx
	WORD $0x8949; BYTE $0xc4             // mov    r12, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x78         // mul    qword [rsp + 120]
	WORD $0x8949; BYTE $0xd2             // mov    r10, rdx
	WORD $0x8949; BYTE $0xc1             // mov    r9, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x68         // mul    qword [rsp + 104]
	WORD $0x8949; BYTE $0xc5             // mov    r13, rax
	WORD $0x8949; BYTE $0xd3             // mov    r11, rdx
	WORD $0x0149; BYTE $0xf4             // add    r12, rsi
	WORD $0x114d; BYTE $0xf9             // adc    r9, r15
	WORD $0x114d; BYTE $0xd5             // adc    r13, r10
	LONG $0x00d38349                     // adc    r11, 0
	WORD $0x8948; BYTE $0xf8             // mov    rax, rdi
	WORD $0xf748; BYTE $0xe7             // mul    rdi
	WORD $0x8948; BYTE $0xd1             // mov    rcx, rdx
	WORD $0x8949; BYTE $0xc2             // mov    r10, rax
	LONG $0x24448b48; BYTE $0x28         // mov    rax, qword [rsp + 40]
	WORD $0xf748; BYTE $0xe7             // mul    rdi
	WORD $0x8949; BYTE $0xd7             // mov    r15, rdx
	WORD $0x8948; BYTE $0xc6             // mov    rsi, rax
	LONG $0x24448b48; BYTE $0x20         // mov    rax, qword [rsp + 32]
	WORD $0xf748; BYTE $0xe7             // mul    rdi
	WORD $0x8949; BYTE $0xd6             // mov    r14, rdx
	WORD $0x8948; BYTE $0xc3             // mov    rbx, rax
	LONG $0x24448b48; BYTE $0x18         // mov    rax, qword [rsp + 24]
	WORD $0xf748; BYTE $0xe7             // mul    rdi
	QUAD $0x000000a024b48948             // mov    qword [rsp + 160], rsi
	WORD $0x0148; BYTE $0xf1             // add    rcx, rsi
	QUAD $0x00000090249c8948             // mov    qword [rsp + 144], rbx
	WORD $0x8948; BYTE $0xdf             // mov    rdi, rbx
	LONG $0x247c894c; BYTE $0x70         // mov    qword [rsp + 112], r15
	WORD $0x114c; BYTE $0xff             // adc    rdi, r15
	QUAD $0x0000009824848948             // mov    qword [rsp + 152], rax
	WORD $0x8949; BYTE $0xc7             // mov    r15, rax
	LONG $0x2474894c; BYTE $0x58         // mov    qword [rsp + 88], r14
	WORD $0x114d; BYTE $0xf7             // adc    r15, r14
	LONG $0x24548948; BYTE $0x40         // mov    qword [rsp + 64], rdx
	WORD $0x8949; BYTE $0xd6             // mov    r14, rdx
	LONG $0x00d68349                     // adc    r14, 0
	WORD $0x014c; BYTE $0xe1             // add    rcx, r12
	WORD $0x920f; BYTE $0xd0             // setb    al
	WORD $0x8948; BYTE $0xca             // mov    rdx, rcx
	WORD $0xff48; BYTE $0xc2             // inc    rdx
	LONG $0x24548948; BYTE $0x30         // mov    qword [rsp + 48], rdx
	WORD $0x940f; BYTE $0xd3             // sete    bl
	WORD $0x014d; BYTE $0xc2             // add    r10, r8
	WORD $0x920f; BYTE $0xd2             // setb    dl
	JB   LBB1_114
	LONG $0x244c8948; BYTE $0x30         // mov    qword [rsp + 48], rcx

LBB1_114:
	WORD $0xda20             // and    dl, bl
	WORD $0xd008             // or    al, dl
	WORD $0x0149; BYTE $0xf9 // add    r9, rdi
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x894d; BYTE $0xc8 // mov    r8, r9
	WORD $0xff49; BYTE $0xc0 // inc    r8
	WORD $0x940f; BYTE $0xd2 // sete    dl
	WORD $0xc084             // test    al, al
	JNE  LBB1_116
	WORD $0x894d; BYTE $0xc8 // mov    r8, r9

LBB1_116:
	WORD $0xd020             // and    al, dl
	WORD $0xc108             // or    cl, al
	WORD $0x014d; BYTE $0xfd // add    r13, r15
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x894d; BYTE $0xec // mov    r12, r13
	WORD $0xff49; BYTE $0xc4 // inc    r12
	WORD $0x940f; BYTE $0xd2 // sete    dl
	WORD $0xc984             // test    cl, cl
	JNE  LBB1_118
	WORD $0x894d; BYTE $0xec // mov    r12, r13

LBB1_118:
	WORD $0xd120                 // and    cl, dl
	WORD $0xc808                 // or    al, cl
	WORD $0x014d; BYTE $0xf3     // add    r11, r14
	LONG $0x2454920f; BYTE $0x50 // setb    byte [rsp + 80]
	WORD $0x894d; BYTE $0xde     // mov    r14, r11
	WORD $0xff49; BYTE $0xc6     // inc    r14
	LONG $0xd1940f41             // sete    r9b
	WORD $0xc084                 // test    al, al
	JNE  LBB1_120
	WORD $0x894d; BYTE $0xde     // mov    r14, r11

LBB1_120:
	WORD $0x2041; BYTE $0xc1             // and    r9b, al
	LONG $0x24748b48; BYTE $0x28         // mov    rsi, qword [rsp + 40]
	WORD $0x8948; BYTE $0xf1             // mov    rcx, rsi
	LONG $0x4caf0f48; WORD $0x3824       // imul    rcx, qword [rsp + 56]
	LONG $0x244c0348; BYTE $0x30         // add    rcx, qword [rsp + 48]
	QUAD $0x000088248caf0f48; BYTE $0x00 // imul    rcx, qword [rsp + 136]
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x60         // mul    qword [rsp + 96]
	QUAD $0x0000008024948948             // mov    qword [rsp + 128], rdx
	WORD $0x8949; BYTE $0xc3             // mov    r11, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x48         // mul    qword [rsp + 72]
	WORD $0x8949; BYTE $0xd7             // mov    r15, rdx
	WORD $0x8948; BYTE $0xc7             // mov    rdi, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x78         // mul    qword [rsp + 120]
	WORD $0x8949; BYTE $0xd5             // mov    r13, rdx
	WORD $0x8948; BYTE $0xc3             // mov    rbx, rax
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x68         // mul    qword [rsp + 104]
	WORD $0x8949; BYTE $0xd2             // mov    r10, rdx
	LONG $0x244c0844; BYTE $0x50         // or    byte [rsp + 80], r9b
	QUAD $0x0000008024bc0348             // add    rdi, qword [rsp + 128]
	WORD $0x114c; BYTE $0xfb             // adc    rbx, r15
	QUAD $0x00000168249c8948             // mov    qword [rsp + 360], rbx
	WORD $0x114c; BYTE $0xe8             // adc    rax, r13
	QUAD $0x0000017024848948             // mov    qword [rsp + 368], rax
	LONG $0x00d28349                     // adc    r10, 0
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	WORD $0xf748; BYTE $0xe6             // mul    rsi
	WORD $0x8949; BYTE $0xd7             // mov    r15, rdx
	WORD $0x8949; BYTE $0xc1             // mov    r9, rax
	LONG $0x24448b48; BYTE $0x20         // mov    rax, qword [rsp + 32]
	WORD $0xf748; BYTE $0xe6             // mul    rsi
	WORD $0x8948; BYTE $0xd1             // mov    rcx, rdx
	WORD $0x8948; BYTE $0xc3             // mov    rbx, rax
	LONG $0x24448b48; BYTE $0x18         // mov    rax, qword [rsp + 24]
	WORD $0xf748; BYTE $0xe6             // mul    rsi
	LONG $0x244c014c; BYTE $0x70         // add    qword [rsp + 112], r9
	QUAD $0x00000178249c8948             // mov    qword [rsp + 376], rbx
	WORD $0x1149; BYTE $0xdf             // adc    r15, rbx
	QUAD $0x0000008024848948             // mov    qword [rsp + 128], rax
	QUAD $0x00000180248c8948             // mov    qword [rsp + 384], rcx
	WORD $0x1148; BYTE $0xc8             // adc    rax, rcx
	QUAD $0x000000d024848948             // mov    qword [rsp + 208], rax
	LONG $0x24548948; BYTE $0x28         // mov    qword [rsp + 40], rdx
	LONG $0x00d28348                     // adc    rdx, 0
	QUAD $0x000000d824948948             // mov    qword [rsp + 216], rdx
	WORD $0x0149; BYTE $0xf8             // add    r8, rdi
	WORD $0x920f; BYTE $0xd0             // setb    al
	WORD $0x894c; BYTE $0xc7             // mov    rdi, r8
	WORD $0xff48; BYTE $0xc7             // inc    rdi
	WORD $0x940f; BYTE $0xd2             // sete    dl
	LONG $0x245c034c; BYTE $0x30         // add    r11, qword [rsp + 48]
	WORD $0x894d; BYTE $0xdd             // mov    r13, r11
	WORD $0x920f; BYTE $0xd3             // setb    bl
	JB   LBB1_122
	WORD $0x894c; BYTE $0xc7             // mov    rdi, r8

LBB1_122:
	LONG $0x44b60f44; WORD $0x5024 // movzx    r8d, byte [rsp + 80]
	WORD $0xd320                   // and    bl, dl
	WORD $0xd808                   // or    al, bl
	QUAD $0x0000016824a4034c       // add    r12, qword [rsp + 360]
	WORD $0x920f; BYTE $0xd2       // setb    dl
	WORD $0x894c; BYTE $0xe6       // mov    rsi, r12
	WORD $0xff48; BYTE $0xc6       // inc    rsi
	WORD $0x940f; BYTE $0xd3       // sete    bl
	WORD $0xc084                   // test    al, al
	JNE  LBB1_124
	WORD $0x894c; BYTE $0xe6       // mov    rsi, r12

LBB1_124:
	WORD $0xd820             // and    al, bl
	WORD $0xc208             // or    dl, al
	QUAD $0x0000017024b4034c // add    r14, qword [rsp + 368]
	LONG $0xd3920f41         // setb    r11b
	WORD $0x894c; BYTE $0xf3 // mov    rbx, r14
	WORD $0xff48; BYTE $0xc3 // inc    rbx
	WORD $0x940f; BYTE $0xd0 // sete    al
	WORD $0xd284             // test    dl, dl
	JNE  LBB1_126
	WORD $0x894c; BYTE $0xf3 // mov    rbx, r14

LBB1_126:
	WORD $0xc220             // and    dl, al
	WORD $0x0841; BYTE $0xd3 // or    r11b, dl
	WORD $0x014d; BYTE $0xc2 // add    r10, r8
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10
	WORD $0xff48; BYTE $0xc1 // inc    rcx
	LONG $0xd1940f41         // sete    r9b
	WORD $0x8445; BYTE $0xdb // test    r11b, r11b
	JNE  LBB1_128
	WORD $0x894c; BYTE $0xd1 // mov    rcx, r10

LBB1_128:
	LONG $0x247c0348; BYTE $0x70 // add    rdi, qword [rsp + 112]
	WORD $0x920f; BYTE $0xd2     // setb    dl
	WORD $0x8949; BYTE $0xf8     // mov    r8, rdi
	WORD $0xff49; BYTE $0xc0     // inc    r8
	LONG $0xd2940f41             // sete    r10b
	QUAD $0x000000a024ac034c     // add    r13, qword [rsp + 160]
	WORD $0x920f; BYTE $0xd0     // setb    al
	JB   LBB1_130
	WORD $0x8949; BYTE $0xf8     // mov    r8, rdi

LBB1_130:
	WORD $0x2044; BYTE $0xd0 // and    al, r10b
	WORD $0xc208             // or    dl, al
	WORD $0x014c; BYTE $0xfe // add    rsi, r15
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x8949; BYTE $0xf6 // mov    r14, rsi
	WORD $0xff49; BYTE $0xc6 // inc    r14
	LONG $0xd7940f40         // sete    dil
	WORD $0xd284             // test    dl, dl
	JNE  LBB1_132
	WORD $0x8949; BYTE $0xf6 // mov    r14, rsi

LBB1_132:
	WORD $0x2045; BYTE $0xd9 // and    r9b, r11b
	WORD $0x2040; BYTE $0xfa // and    dl, dil
	WORD $0xd008             // or    al, dl
	QUAD $0x000000d0249c0348 // add    rbx, qword [rsp + 208]
	WORD $0x920f; BYTE $0xd2 // setb    dl
	WORD $0x8949; BYTE $0xdc // mov    r12, rbx
	WORD $0xff49; BYTE $0xc4 // inc    r12
	LONG $0xd6940f40         // sete    sil
	WORD $0xc084             // test    al, al
	JNE  LBB1_134
	WORD $0x8949; BYTE $0xdc // mov    r12, rbx

LBB1_134:
	LONG $0xf9b60f41             // movzx    edi, r9b
	LONG $0x247c8948; BYTE $0x30 // mov    qword [rsp + 48], rdi
	WORD $0x2040; BYTE $0xf0     // and    al, sil
	WORD $0xc208                 // or    dl, al
	QUAD $0x000000d8248c0348     // add    rcx, qword [rsp + 216]
	WORD $0x920f; BYTE $0xd0     // setb    al
	WORD $0x8949; BYTE $0xcf     // mov    r15, rcx
	WORD $0xff49; BYTE $0xc7     // inc    r15
	WORD $0x940f; BYTE $0xd3     // sete    bl
	WORD $0xd284                 // test    dl, dl
	JNE  LBB1_136
	WORD $0x8949; BYTE $0xcf     // mov    r15, rcx

LBB1_136:
	WORD $0xda20  // and    dl, bl
	WORD $0xd008  // or    al, dl
	JNE  LBB1_264

LBB1_137:
	LONG $0x244c8b48; BYTE $0x20         // mov    rcx, qword [rsp + 32]
	WORD $0x8948; BYTE $0xce             // mov    rsi, rcx
	LONG $0x74af0f48; WORD $0x3824       // imul    rsi, qword [rsp + 56]
	WORD $0x014c; BYTE $0xc6             // add    rsi, r8
	QUAD $0x00008824b4af0f48; BYTE $0x00 // imul    rsi, qword [rsp + 136]
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x60         // mul    qword [rsp + 96]
	WORD $0x8949; BYTE $0xd3             // mov    r11, rdx
	QUAD $0x000000d824848948             // mov    qword [rsp + 216], rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x48         // mul    qword [rsp + 72]
	WORD $0x8948; BYTE $0xd3             // mov    rbx, rdx
	WORD $0x8949; BYTE $0xc5             // mov    r13, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x78         // mul    qword [rsp + 120]
	WORD $0x8948; BYTE $0xd7             // mov    rdi, rdx
	QUAD $0x000000d02484894c             // mov    qword [rsp + 208], r8
	WORD $0x8949; BYTE $0xc0             // mov    r8, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x68         // mul    qword [rsp + 104]
	WORD $0x8949; BYTE $0xc1             // mov    r9, rax
	WORD $0x8949; BYTE $0xd2             // mov    r10, rdx
	WORD $0x014d; BYTE $0xdd             // add    r13, r11
	WORD $0x1149; BYTE $0xd8             // adc    r8, rbx
	WORD $0x1149; BYTE $0xf9             // adc    r9, rdi
	LONG $0x00d28349                     // adc    r10, 0
	QUAD $0x0000017824848b48             // mov    rax, qword [rsp + 376]
	LONG $0x24440148; BYTE $0x58         // add    qword [rsp + 88], rax
	QUAD $0x0000018024b48b48             // mov    rsi, qword [rsp + 384]
	LONG $0x00d68348                     // adc    rsi, 0
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	WORD $0xf748; BYTE $0xe1             // mul    rcx
	WORD $0x8948; BYTE $0xd7             // mov    rdi, rdx
	WORD $0x8949; BYTE $0xc3             // mov    r11, rax
	LONG $0x24448b48; BYTE $0x18         // mov    rax, qword [rsp + 24]
	WORD $0xf748; BYTE $0xe1             // mul    rcx
	WORD $0x0149; BYTE $0xf3             // add    r11, rsi
	LONG $0x24448948; BYTE $0x50         // mov    qword [rsp + 80], rax
	WORD $0x1148; BYTE $0xc7             // adc    rdi, rax
	LONG $0x247c8948; BYTE $0x20         // mov    qword [rsp + 32], rdi
	LONG $0x24548948; BYTE $0x70         // mov    qword [rsp + 112], rdx
	LONG $0x00d28348                     // adc    rdx, 0
	QUAD $0x000000a024948948             // mov    qword [rsp + 160], rdx
	WORD $0x014d; BYTE $0xee             // add    r14, r13
	QUAD $0x000000d824ac8b4c             // mov    r13, qword [rsp + 216]
	WORD $0x920f; BYTE $0xd2             // setb    dl
	WORD $0x894c; BYTE $0xf0             // mov    rax, r14
	WORD $0xff48; BYTE $0xc0             // inc    rax
	WORD $0x940f; BYTE $0xd3             // sete    bl
	QUAD $0x000000d024ac034c             // add    r13, qword [rsp + 208]
	WORD $0x920f; BYTE $0xd1             // setb    cl
	JB   LBB1_139
	WORD $0x894c; BYTE $0xf0             // mov    rax, r14

LBB1_139:
	WORD $0xd920             // and    cl, bl
	WORD $0xca08             // or    dl, cl
	WORD $0x014d; BYTE $0xc4 // add    r12, r8
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x894c; BYTE $0xe6 // mov    rsi, r12
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xd284             // test    dl, dl
	JNE  LBB1_141
	WORD $0x894c; BYTE $0xe6 // mov    rsi, r12

LBB1_141:
	WORD $0xca20             // and    dl, cl
	WORD $0xd308             // or    bl, dl
	WORD $0x014d; BYTE $0xcf // add    r15, r9
	LONG $0xd0920f41         // setb    r8b
	WORD $0x894c; BYTE $0xff // mov    rdi, r15
	WORD $0xff48; BYTE $0xc7 // inc    rdi
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB1_143
	WORD $0x894c; BYTE $0xff // mov    rdi, r15

LBB1_143:
	WORD $0xcb20                 // and    bl, cl
	WORD $0x0841; BYTE $0xd8     // or    r8b, bl
	LONG $0x244c8b48; BYTE $0x30 // mov    rcx, qword [rsp + 48]
	WORD $0x014c; BYTE $0xd1     // add    rcx, r10
	LONG $0xd1920f41             // setb    r9b
	WORD $0x8948; BYTE $0xca     // mov    rdx, rcx
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	LONG $0xd2940f41             // sete    r10b
	WORD $0x8445; BYTE $0xc0     // test    r8b, r8b
	JNE  LBB1_145
	WORD $0x8948; BYTE $0xca     // mov    rdx, rcx

LBB1_145:
	LONG $0x24440348; BYTE $0x58 // add    rax, qword [rsp + 88]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x8949; BYTE $0xc4     // mov    r12, rax
	WORD $0xff49; BYTE $0xc4     // inc    r12
	LONG $0xd6940f41             // sete    r14b
	QUAD $0x0000009024ac034c     // add    r13, qword [rsp + 144]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	JB   LBB1_147
	WORD $0x8949; BYTE $0xc4     // mov    r12, rax

LBB1_147:
	WORD $0x2045; BYTE $0xc2 // and    r10b, r8b
	WORD $0x2044; BYTE $0xf1 // and    cl, r14b
	WORD $0xcb08             // or    bl, cl
	WORD $0x014c; BYTE $0xde // add    rsi, r11
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x8949; BYTE $0xf0 // mov    r8, rsi
	WORD $0xff49; BYTE $0xc0 // inc    r8
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB1_149
	WORD $0x8949; BYTE $0xf0 // mov    r8, rsi

LBB1_149:
	WORD $0x0845; BYTE $0xd1     // or    r9b, r10b
	WORD $0xcb20                 // and    bl, cl
	WORD $0xd808                 // or    al, bl
	LONG $0x247c0348; BYTE $0x20 // add    rdi, qword [rsp + 32]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x8949; BYTE $0xfb     // mov    r11, rdi
	WORD $0xff49; BYTE $0xc3     // inc    r11
	WORD $0x940f; BYTE $0xd1     // sete    cl
	WORD $0xc084                 // test    al, al
	JNE  LBB1_151
	WORD $0x8949; BYTE $0xfb     // mov    r11, rdi

LBB1_151:
	LONG $0xf1b60f41             // movzx    esi, r9b
	LONG $0x24748948; BYTE $0x20 // mov    qword [rsp + 32], rsi
	WORD $0xc820                 // and    al, cl
	WORD $0xc308                 // or    bl, al
	QUAD $0x000000a024940348     // add    rdx, qword [rsp + 160]
	WORD $0x920f; BYTE $0xd0     // setb    al
	WORD $0x8949; BYTE $0xd7     // mov    r15, rdx
	WORD $0xff49; BYTE $0xc7     // inc    r15
	WORD $0x940f; BYTE $0xd1     // sete    cl
	WORD $0xdb84                 // test    bl, bl
	JNE  LBB1_153
	WORD $0x8949; BYTE $0xd7     // mov    r15, rdx

LBB1_153:
	WORD $0xcb20  // and    bl, cl
	WORD $0xd808  // or    al, bl
	JNE  LBB1_265

LBB1_154:
	LONG $0x24748b48; BYTE $0x38         // mov    rsi, qword [rsp + 56]
	LONG $0x245c8b48; BYTE $0x18         // mov    rbx, qword [rsp + 24]
	LONG $0xf3af0f48                     // imul    rsi, rbx
	WORD $0x014c; BYTE $0xe6             // add    rsi, r12
	QUAD $0x00008824b4af0f48; BYTE $0x00 // imul    rsi, qword [rsp + 136]
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x60         // mul    qword [rsp + 96]
	WORD $0x8949; BYTE $0xd6             // mov    r14, rdx
	WORD $0x8949; BYTE $0xc1             // mov    r9, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x48         // mul    qword [rsp + 72]
	WORD $0x8949; BYTE $0xd5             // mov    r13, rdx
	WORD $0x8948; BYTE $0xc7             // mov    rdi, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x78         // mul    qword [rsp + 120]
	WORD $0x8948; BYTE $0xd1             // mov    rcx, rdx
	LONG $0x2464894c; BYTE $0x38         // mov    qword [rsp + 56], r12
	WORD $0x8949; BYTE $0xc4             // mov    r12, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x68         // mul    qword [rsp + 104]
	WORD $0x8949; BYTE $0xc2             // mov    r10, rax
	WORD $0x014c; BYTE $0xf7             // add    rdi, r14
	WORD $0x8949; BYTE $0xd6             // mov    r14, rdx
	WORD $0x114d; BYTE $0xec             // adc    r12, r13
	WORD $0x1149; BYTE $0xca             // adc    r10, rcx
	LONG $0x00d68349                     // adc    r14, 0
	QUAD $0x0000008024848b48             // mov    rax, qword [rsp + 128]
	LONG $0x24440148; BYTE $0x40         // add    qword [rsp + 64], rax
	LONG $0x24448b48; BYTE $0x28         // mov    rax, qword [rsp + 40]
	LONG $0x00d08348                     // adc    rax, 0
	LONG $0x24440348; BYTE $0x50         // add    rax, qword [rsp + 80]
	LONG $0x24448948; BYTE $0x28         // mov    qword [rsp + 40], rax
	LONG $0x244c8b48; BYTE $0x70         // mov    rcx, qword [rsp + 112]
	LONG $0x00d18348                     // adc    rcx, 0
	WORD $0x8948; BYTE $0xd8             // mov    rax, rbx
	WORD $0xf748; BYTE $0xe3             // mul    rbx
	WORD $0x0148; BYTE $0xc8             // add    rax, rcx
	LONG $0x00d28348                     // adc    rdx, 0
	WORD $0x0149; BYTE $0xf8             // add    r8, rdi
	WORD $0x920f; BYTE $0xd1             // setb    cl
	WORD $0x894c; BYTE $0xc6             // mov    rsi, r8
	WORD $0xff48; BYTE $0xc6             // inc    rsi
	LONG $0xd7940f40                     // sete    dil
	LONG $0x244c034c; BYTE $0x38         // add    r9, qword [rsp + 56]
	WORD $0x894d; BYTE $0xcd             // mov    r13, r9
	WORD $0x920f; BYTE $0xd3             // setb    bl
	JB   LBB1_156
	WORD $0x894c; BYTE $0xc6             // mov    rsi, r8

LBB1_156:
	WORD $0x2040; BYTE $0xfb // and    bl, dil
	WORD $0xd908             // or    cl, bl
	WORD $0x014d; BYTE $0xe3 // add    r11, r12
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x894c; BYTE $0xdf // mov    rdi, r11
	WORD $0xff48; BYTE $0xc7 // inc    rdi
	LONG $0xd0940f41         // sete    r8b
	WORD $0xc984             // test    cl, cl
	JNE  LBB1_158
	WORD $0x894c; BYTE $0xdf // mov    rdi, r11

LBB1_158:
	WORD $0x2044; BYTE $0xc1 // and    cl, r8b
	WORD $0xcb08             // or    bl, cl
	WORD $0x014d; BYTE $0xd7 // add    r15, r10
	LONG $0xd2920f41         // setb    r10b
	WORD $0x894d; BYTE $0xfb // mov    r11, r15
	WORD $0xff49; BYTE $0xc3 // inc    r11
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB1_160
	WORD $0x894d; BYTE $0xfb // mov    r11, r15

LBB1_160:
	WORD $0xcb20                 // and    bl, cl
	WORD $0x0841; BYTE $0xda     // or    r10b, bl
	LONG $0x244c8b48; BYTE $0x20 // mov    rcx, qword [rsp + 32]
	WORD $0x014c; BYTE $0xf1     // add    rcx, r14
	LONG $0xd0920f41             // setb    r8b
	WORD $0x8949; BYTE $0xce     // mov    r14, rcx
	WORD $0xff49; BYTE $0xc6     // inc    r14
	LONG $0xd1940f41             // sete    r9b
	WORD $0x8445; BYTE $0xd2     // test    r10b, r10b
	JNE  LBB1_162
	WORD $0x8949; BYTE $0xce     // mov    r14, rcx

LBB1_162:
	LONG $0x24740348; BYTE $0x40 // add    rsi, qword [rsp + 64]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x8948; BYTE $0xf3     // mov    rbx, rsi
	WORD $0xff48; BYTE $0xc3     // inc    rbx
	LONG $0x245c8948; BYTE $0x38 // mov    qword [rsp + 56], rbx
	LONG $0xd7940f41             // sete    r15b
	QUAD $0x0000009824ac034c     // add    r13, qword [rsp + 152]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB1_164
	LONG $0x24748948; BYTE $0x38 // mov    qword [rsp + 56], rsi

LBB1_164:
	WORD $0x2045; BYTE $0xd1     // and    r9b, r10b
	WORD $0x2044; BYTE $0xfb     // and    bl, r15b
	WORD $0xd908                 // or    cl, bl
	LONG $0x247c0348; BYTE $0x28 // add    rdi, qword [rsp + 40]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x8949; BYTE $0xfa     // mov    r10, rdi
	WORD $0xff49; BYTE $0xc2     // inc    r10
	LONG $0xd6940f40             // sete    sil
	WORD $0xc984                 // test    cl, cl
	JNE  LBB1_166
	WORD $0x8949; BYTE $0xfa     // mov    r10, rdi

LBB1_166:
	WORD $0x0845; BYTE $0xc8     // or    r8b, r9b
	WORD $0x2040; BYTE $0xf1     // and    cl, sil
	WORD $0xcb08                 // or    bl, cl
	WORD $0x0149; BYTE $0xc3     // add    r11, rax
	WORD $0x920f; BYTE $0xd0     // setb    al
	WORD $0x894c; BYTE $0xd9     // mov    rcx, r11
	WORD $0xff48; BYTE $0xc1     // inc    rcx
	LONG $0x244c8948; BYTE $0x20 // mov    qword [rsp + 32], rcx
	WORD $0x940f; BYTE $0xd1     // sete    cl
	WORD $0xdb84                 // test    bl, bl
	JNE  LBB1_168
	LONG $0x245c894c; BYTE $0x20 // mov    qword [rsp + 32], r11

LBB1_168:
	LONG $0xf0b60f41             // movzx    esi, r8b
	WORD $0xcb20                 // and    bl, cl
	WORD $0xd808                 // or    al, bl
	WORD $0x0149; BYTE $0xd6     // add    r14, rdx
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894c; BYTE $0xf2     // mov    rdx, r14
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	LONG $0x24548948; BYTE $0x18 // mov    qword [rsp + 24], rdx
	WORD $0x940f; BYTE $0xd2     // sete    dl
	WORD $0xc084                 // test    al, al
	JNE  LBB1_170
	LONG $0x2474894c; BYTE $0x18 // mov    qword [rsp + 24], r14

LBB1_170:
	WORD $0xd020  // and    al, dl
	WORD $0xc108  // or    cl, al
	JNE  LBB1_266

LBB1_171:
	QUAD $0x000000b824848b48     // mov    rax, qword [rsp + 184]
	LONG $0xfe408d44             // lea    r8d, [rax - 2]
	LONG $0x24548b48; BYTE $0x18 // mov    rdx, qword [rsp + 24]
	LONG $0x24542b48; BYTE $0x68 // sub    rdx, qword [rsp + 104]
	JA   LBB1_176
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JNE  LBB1_176
	LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
	LONG $0x24443b48; BYTE $0x68 // cmp    rax, qword [rsp + 104]
	JAE  LBB1_175

LBB1_174:
	LONG $0x2454894c; BYTE $0x28 // mov    qword [rsp + 40], r10
	JMP  LBB1_181

LBB1_175:
	LONG $0x24448b48; BYTE $0x20 // mov    rax, qword [rsp + 32]
	LONG $0x24443b48; BYTE $0x78 // cmp    rax, qword [rsp + 120]
	JBE  LBB1_250

LBB1_176:
	LONG $0x24542b4c; BYTE $0x48 // sub    r10, qword [rsp + 72]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894c; BYTE $0xd0     // mov    rax, r10
	LONG $0x01e88348             // sub    rax, 1
	LONG $0x24448948; BYTE $0x28 // mov    qword [rsp + 40], rax
	WORD $0x920f; BYTE $0xd3     // setb    bl
	LONG $0x24448b48; BYTE $0x38 // mov    rax, qword [rsp + 56]
	LONG $0x24442b48; BYTE $0x60 // sub    rax, qword [rsp + 96]
	LONG $0x24448948; BYTE $0x38 // mov    qword [rsp + 56], rax
	WORD $0x920f; BYTE $0xd0     // setb    al
	JB   LBB1_178
	LONG $0x2454894c; BYTE $0x28 // mov    qword [rsp + 40], r10

LBB1_178:
	WORD $0xd820                 // and    al, bl
	WORD $0xc108                 // or    cl, al
	LONG $0x24748b48; BYTE $0x20 // mov    rsi, qword [rsp + 32]
	LONG $0x24742b48; BYTE $0x78 // sub    rsi, qword [rsp + 120]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	LONG $0x01ef8348             // sub    rdi, 1
	WORD $0x920f; BYTE $0xd0     // setb    al
	WORD $0xc984                 // test    cl, cl
	JNE  LBB1_180
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi

LBB1_180:
	WORD $0xc120                 // and    cl, al
	WORD $0xcb08                 // or    bl, cl
	WORD $0xb60f; BYTE $0xc3     // movzx    eax, bl
	WORD $0x2948; BYTE $0xc2     // sub    rdx, rax
	WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
	LONG $0x247c8948; BYTE $0x20 // mov    qword [rsp + 32], rdi
	LONG $0x24548948; BYTE $0x18 // mov    qword [rsp + 24], rdx

LBB1_181:
	WORD $0x8944; BYTE $0xc0     // mov    eax, r8d
	WORD $0xe8c1; BYTE $0x06     // shr    eax, 6
	QUAD $0x00000160248c8b48     // mov    rcx, qword [rsp + 352]
	LONG $0xc1048b48             // mov    rax, qword [rcx + 8*rax]
	LONG $0xc0a30f4c             // bt    rax, r8
	JAE  LBB1_111
	QUAD $0x00000158248c8b48     // mov    rcx, qword [rsp + 344]
	LONG $0x247c8b48; BYTE $0x38 // mov    rdi, qword [rsp + 56]
	LONG $0xcfaf0f48             // imul    rcx, rdi
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x60 // mul    qword [rsp + 96]
	WORD $0x8949; BYTE $0xd2     // mov    r10, rdx
	WORD $0x8949; BYTE $0xc4     // mov    r12, rax
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x48 // mul    qword [rsp + 72]
	WORD $0x8949; BYTE $0xd3     // mov    r11, rdx
	WORD $0x8949; BYTE $0xc6     // mov    r14, rax
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x78 // mul    qword [rsp + 120]
	WORD $0x8948; BYTE $0xd3     // mov    rbx, rdx
	WORD $0x8948; BYTE $0xc6     // mov    rsi, rax
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x68 // mul    qword [rsp + 104]
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	WORD $0x8949; BYTE $0xd5     // mov    r13, rdx
	WORD $0x014d; BYTE $0xd6     // add    r14, r10
	WORD $0x114c; BYTE $0xde     // adc    rsi, r11
	WORD $0x1149; BYTE $0xd9     // adc    r9, rbx
	LONG $0x00d58349             // adc    r13, 0
	WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
	QUAD $0x000000b0248c8b48     // mov    rcx, qword [rsp + 176]
	WORD $0xf748; BYTE $0xe1     // mul    rcx
	WORD $0x8949; BYTE $0xd2     // mov    r10, rdx
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	LONG $0x24448b48; BYTE $0x28 // mov    rax, qword [rsp + 40]
	WORD $0xf748; BYTE $0xe1     // mul    rcx
	WORD $0x8949; BYTE $0xd7     // mov    r15, rdx
	WORD $0x8948; BYTE $0xc3     // mov    rbx, rax
	LONG $0x24448b48; BYTE $0x20 // mov    rax, qword [rsp + 32]
	WORD $0xf748; BYTE $0xe1     // mul    rcx
	WORD $0x8949; BYTE $0xd0     // mov    r8, rdx
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
	WORD $0xf748; BYTE $0xe1     // mul    rcx
	WORD $0x014c; BYTE $0xd3     // add    rbx, r10
	WORD $0x114c; BYTE $0xff     // adc    rdi, r15
	WORD $0x114c; BYTE $0xc0     // adc    rax, r8
	LONG $0x00d28348             // adc    rdx, 0
	WORD $0x014c; BYTE $0xf3     // add    rbx, r14
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x8949; BYTE $0xdf     // mov    r15, rbx
	WORD $0xff49; BYTE $0xc7     // inc    r15
	LONG $0xd0940f41             // sete    r8b
	WORD $0x014d; BYTE $0xe3     // add    r11, r12
	LONG $0xd2920f41             // setb    r10b
	JB   LBB1_184
	WORD $0x8949; BYTE $0xdf     // mov    r15, rbx

LBB1_184:
	WORD $0x2045; BYTE $0xc2 // and    r10b, r8b
	WORD $0x0844; BYTE $0xd1 // or    cl, r10b
	WORD $0x0148; BYTE $0xfe // add    rsi, rdi
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xff49; BYTE $0xc3 // inc    r11
	LONG $0xd7940f40         // sete    dil
	WORD $0xc984             // test    cl, cl
	JNE  LBB1_186
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi

LBB1_186:
	WORD $0x2040; BYTE $0xf9 // and    cl, dil
	WORD $0xcb08             // or    bl, cl
	WORD $0x0149; BYTE $0xc1 // add    r9, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x894d; BYTE $0xca // mov    r10, r9
	WORD $0xff49; BYTE $0xc2 // inc    r10
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB1_188
	WORD $0x894d; BYTE $0xca // mov    r10, r9

LBB1_188:
	WORD $0xcb20             // and    bl, cl
	WORD $0xd808             // or    al, bl
	WORD $0x0149; BYTE $0xd5 // add    r13, rdx
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x894d; BYTE $0xe9 // mov    r9, r13
	WORD $0xff49; BYTE $0xc1 // inc    r9
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xc084             // test    al, al
	JNE  LBB1_190
	WORD $0x894d; BYTE $0xe9 // mov    r9, r13

LBB1_190:
	WORD $0xc120                         // and    cl, al
	LONG $0x246c8b4c; BYTE $0x38         // mov    r13, qword [rsp + 56]
	WORD $0x894c; BYTE $0xee             // mov    rsi, r13
	QUAD $0x000000a824b48b4c             // mov    r14, qword [rsp + 168]
	LONG $0xf6af0f49                     // imul    rsi, r14
	WORD $0x014c; BYTE $0xfe             // add    rsi, r15
	QUAD $0x00008824b4af0f48; BYTE $0x00 // imul    rsi, qword [rsp + 136]
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x60         // mul    qword [rsp + 96]
	LONG $0x24548948; BYTE $0x30         // mov    qword [rsp + 48], rdx
	QUAD $0x0000008024848948             // mov    qword [rsp + 128], rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x48         // mul    qword [rsp + 72]
	QUAD $0x000000a024bc894c             // mov    qword [rsp + 160], r15
	LONG $0x24548948; BYTE $0x40         // mov    qword [rsp + 64], rdx
	WORD $0x8949; BYTE $0xc0             // mov    r8, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x78         // mul    qword [rsp + 120]
	WORD $0x8948; BYTE $0xc7             // mov    rdi, rax
	WORD $0x8949; BYTE $0xd7             // mov    r15, rdx
	WORD $0xcb08                         // or    bl, cl
	LONG $0x50245c88                     // mov    byte [rsp + 80], bl
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x68         // mul    qword [rsp + 104]
	WORD $0x8949; BYTE $0xd4             // mov    r12, rdx
	LONG $0x2444034c; BYTE $0x30         // add    r8, qword [rsp + 48]
	LONG $0x247c1348; BYTE $0x40         // adc    rdi, qword [rsp + 64]
	QUAD $0x0000009024bc8948             // mov    qword [rsp + 144], rdi
	WORD $0x114c; BYTE $0xf8             // adc    rax, r15
	QUAD $0x0000009824848948             // mov    qword [rsp + 152], rax
	LONG $0x00d48349                     // adc    r12, 0
	WORD $0x894c; BYTE $0xe8             // mov    rax, r13
	WORD $0xf749; BYTE $0xe6             // mul    r14
	WORD $0x8949; BYTE $0xd5             // mov    r13, rdx
	LONG $0x24448948; BYTE $0x58         // mov    qword [rsp + 88], rax
	LONG $0x24448b48; BYTE $0x28         // mov    rax, qword [rsp + 40]
	WORD $0xf749; BYTE $0xe6             // mul    r14
	WORD $0x8949; BYTE $0xd7             // mov    r15, rdx
	WORD $0x8948; BYTE $0xc1             // mov    rcx, rax
	LONG $0x24448b48; BYTE $0x20         // mov    rax, qword [rsp + 32]
	WORD $0xf749; BYTE $0xe6             // mul    r14
	WORD $0x8948; BYTE $0xd6             // mov    rsi, rdx
	WORD $0x8948; BYTE $0xc7             // mov    rdi, rax
	LONG $0x24448b48; BYTE $0x18         // mov    rax, qword [rsp + 24]
	WORD $0xf749; BYTE $0xe6             // mul    r14
	WORD $0x014c; BYTE $0xe9             // add    rcx, r13
	LONG $0x244c8948; BYTE $0x70         // mov    qword [rsp + 112], rcx
	WORD $0x114c; BYTE $0xff             // adc    rdi, r15
	LONG $0x247c8948; BYTE $0x40         // mov    qword [rsp + 64], rdi
	WORD $0x1148; BYTE $0xf0             // adc    rax, rsi
	LONG $0x00d28348                     // adc    rdx, 0
	LONG $0x24548948; BYTE $0x30         // mov    qword [rsp + 48], rdx
	WORD $0x014d; BYTE $0xc3             // add    r11, r8
	WORD $0x920f; BYTE $0xd1             // setb    cl
	WORD $0x894d; BYTE $0xdf             // mov    r15, r11
	WORD $0xff49; BYTE $0xc7             // inc    r15
	LONG $0xd7940f40                     // sete    dil
	QUAD $0x0000008024948b48             // mov    rdx, qword [rsp + 128]
	QUAD $0x000000a024940348             // add    rdx, qword [rsp + 160]
	WORD $0x920f; BYTE $0xd3             // setb    bl
	JB   LBB1_192
	WORD $0x894d; BYTE $0xdf             // mov    r15, r11

LBB1_192:
	LONG $0x2474b60f; BYTE $0x50 // movzx    esi, byte [rsp + 80]
	WORD $0x2040; BYTE $0xfb     // and    bl, dil
	WORD $0xd908                 // or    cl, bl
	QUAD $0x000000902494034c     // add    r10, qword [rsp + 144]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x894d; BYTE $0xd6     // mov    r14, r10
	WORD $0xff49; BYTE $0xc6     // inc    r14
	LONG $0xd7940f40             // sete    dil
	WORD $0xc984                 // test    cl, cl
	JNE  LBB1_194
	WORD $0x894d; BYTE $0xd6     // mov    r14, r10

LBB1_194:
	WORD $0x2040; BYTE $0xf9 // and    cl, dil
	WORD $0xcb08             // or    bl, cl
	QUAD $0x00000098248c034c // add    r9, qword [rsp + 152]
	LONG $0xd2920f41         // setb    r10b
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9
	WORD $0xff48; BYTE $0xc7 // inc    rdi
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB1_196
	WORD $0x894c; BYTE $0xcf // mov    rdi, r9

LBB1_196:
	WORD $0xcb20             // and    bl, cl
	WORD $0x0841; BYTE $0xda // or    r10b, bl
	WORD $0x0149; BYTE $0xf4 // add    r12, rsi
	WORD $0x894d; BYTE $0xe5 // mov    r13, r12
	WORD $0xff49; BYTE $0xc5 // inc    r13
	LONG $0xd3940f41         // sete    r11b
	WORD $0x8445; BYTE $0xd2 // test    r10b, r10b
	JNE  LBB1_198
	WORD $0x894d; BYTE $0xe5 // mov    r13, r12

LBB1_198:
	LONG $0x247c034c; BYTE $0x70 // add    r15, qword [rsp + 112]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894c; BYTE $0xfe     // mov    rsi, r15
	WORD $0xff48; BYTE $0xc6     // inc    rsi
	LONG $0xd0940f41             // sete    r8b
	LONG $0x24540348; BYTE $0x58 // add    rdx, qword [rsp + 88]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB1_200
	WORD $0x894c; BYTE $0xfe     // mov    rsi, r15

LBB1_200:
	WORD $0x8949; BYTE $0xf7     // mov    r15, rsi
	WORD $0x2044; BYTE $0xc3     // and    bl, r8b
	WORD $0xd908                 // or    cl, bl
	LONG $0x2474034c; BYTE $0x40 // add    r14, qword [rsp + 64]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x894d; BYTE $0xf4     // mov    r12, r14
	WORD $0xff49; BYTE $0xc4     // inc    r12
	LONG $0xd0940f41             // sete    r8b
	WORD $0xc984                 // test    cl, cl
	JNE  LBB1_202
	WORD $0x894d; BYTE $0xf4     // mov    r12, r14

LBB1_202:
	WORD $0x2045; BYTE $0xd3 // and    r11b, r10b
	WORD $0x2044; BYTE $0xc1 // and    cl, r8b
	WORD $0xcb08             // or    bl, cl
	WORD $0x0148; BYTE $0xc7 // add    rdi, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xff49; BYTE $0xc1 // inc    r9
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB1_204
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi

LBB1_204:
	LONG $0xfbb60f41             // movzx    edi, r11b
	WORD $0xcb20                 // and    bl, cl
	WORD $0xd808                 // or    al, bl
	LONG $0x246c034c; BYTE $0x30 // add    r13, qword [rsp + 48]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894d; BYTE $0xee     // mov    r14, r13
	WORD $0xff49; BYTE $0xc6     // inc    r14
	WORD $0x940f; BYTE $0xd2     // sete    dl
	WORD $0xc084                 // test    al, al
	JNE  LBB1_206
	WORD $0x894d; BYTE $0xee     // mov    r14, r13

LBB1_206:
	WORD $0xd020  // and    al, dl
	WORD $0xc108  // or    cl, al
	JNE  LBB1_267

LBB1_207:
	LONG $0x247c8948; BYTE $0x30         // mov    qword [rsp + 48], rdi
	LONG $0x244c8b48; BYTE $0x38         // mov    rcx, qword [rsp + 56]
	WORD $0x8948; BYTE $0xce             // mov    rsi, rcx
	QUAD $0x000000c024ac8b4c             // mov    r13, qword [rsp + 192]
	LONG $0xf5af0f49                     // imul    rsi, r13
	QUAD $0x0000009024bc894c             // mov    qword [rsp + 144], r15
	WORD $0x014c; BYTE $0xfe             // add    rsi, r15
	QUAD $0x00008824b4af0f48; BYTE $0x00 // imul    rsi, qword [rsp + 136]
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x60         // mul    qword [rsp + 96]
	WORD $0x8949; BYTE $0xd0             // mov    r8, rdx
	WORD $0x8949; BYTE $0xc7             // mov    r15, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x48         // mul    qword [rsp + 72]
	WORD $0x8949; BYTE $0xd3             // mov    r11, rdx
	WORD $0x8948; BYTE $0xc7             // mov    rdi, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x78         // mul    qword [rsp + 120]
	WORD $0x8948; BYTE $0xd3             // mov    rbx, rdx
	WORD $0x8949; BYTE $0xc2             // mov    r10, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x68         // mul    qword [rsp + 104]
	WORD $0x014c; BYTE $0xc7             // add    rdi, r8
	WORD $0x114d; BYTE $0xda             // adc    r10, r11
	WORD $0x1148; BYTE $0xd8             // adc    rax, rbx
	QUAD $0x0000009824848948             // mov    qword [rsp + 152], rax
	LONG $0x00d28348                     // adc    rdx, 0
	LONG $0x24548948; BYTE $0x50         // mov    qword [rsp + 80], rdx
	WORD $0x8948; BYTE $0xc8             // mov    rax, rcx
	WORD $0xf749; BYTE $0xe5             // mul    r13
	WORD $0x8948; BYTE $0xd1             // mov    rcx, rdx
	LONG $0x24448948; BYTE $0x70         // mov    qword [rsp + 112], rax
	LONG $0x24448b48; BYTE $0x28         // mov    rax, qword [rsp + 40]
	WORD $0xf749; BYTE $0xe5             // mul    r13
	WORD $0x8948; BYTE $0xd3             // mov    rbx, rdx
	WORD $0x8949; BYTE $0xc3             // mov    r11, rax
	LONG $0x24448b48; BYTE $0x20         // mov    rax, qword [rsp + 32]
	WORD $0xf749; BYTE $0xe5             // mul    r13
	WORD $0x8949; BYTE $0xd0             // mov    r8, rdx
	WORD $0x8948; BYTE $0xc6             // mov    rsi, rax
	LONG $0x24448b48; BYTE $0x18         // mov    rax, qword [rsp + 24]
	WORD $0xf749; BYTE $0xe5             // mul    r13
	WORD $0x0149; BYTE $0xcb             // add    r11, rcx
	WORD $0x1148; BYTE $0xde             // adc    rsi, rbx
	LONG $0x24748948; BYTE $0x58         // mov    qword [rsp + 88], rsi
	WORD $0x114c; BYTE $0xc0             // adc    rax, r8
	LONG $0x00d28348                     // adc    rdx, 0
	LONG $0x24548948; BYTE $0x40         // mov    qword [rsp + 64], rdx
	WORD $0x0149; BYTE $0xfc             // add    r12, rdi
	WORD $0x920f; BYTE $0xd1             // setb    cl
	WORD $0x894c; BYTE $0xe7             // mov    rdi, r12
	WORD $0xff48; BYTE $0xc7             // inc    rdi
	LONG $0xd6940f40                     // sete    sil
	QUAD $0x0000009024bc034c             // add    r15, qword [rsp + 144]
	WORD $0x894c; BYTE $0xfa             // mov    rdx, r15
	WORD $0x920f; BYTE $0xd3             // setb    bl
	JB   LBB1_209
	WORD $0x894c; BYTE $0xe7             // mov    rdi, r12

LBB1_209:
	WORD $0x2040; BYTE $0xf3 // and    bl, sil
	WORD $0xd908             // or    cl, bl
	WORD $0x014d; BYTE $0xd1 // add    r9, r10
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	LONG $0xd0940f41         // sete    r8b
	WORD $0xc984             // test    cl, cl
	JNE  LBB1_211
	WORD $0x894c; BYTE $0xce // mov    rsi, r9

LBB1_211:
	WORD $0x2044; BYTE $0xc1     // and    cl, r8b
	WORD $0xcb08                 // or    bl, cl
	QUAD $0x0000009824b4034c     // add    r14, qword [rsp + 152]
	LONG $0xd1920f41             // setb    r9b
	WORD $0x894d; BYTE $0xf4     // mov    r12, r14
	WORD $0xff49; BYTE $0xc4     // inc    r12
	LONG $0xd0940f41             // sete    r8b
	WORD $0xdb84                 // test    bl, bl
	LONG $0x244c8b48; BYTE $0x30 // mov    rcx, qword [rsp + 48]
	JNE  LBB1_213
	WORD $0x894d; BYTE $0xf4     // mov    r12, r14

LBB1_213:
	WORD $0x2044; BYTE $0xc3     // and    bl, r8b
	WORD $0x0841; BYTE $0xd9     // or    r9b, bl
	LONG $0x244c0348; BYTE $0x50 // add    rcx, qword [rsp + 80]
	LONG $0xd0920f41             // setb    r8b
	WORD $0x8949; BYTE $0xcf     // mov    r15, rcx
	WORD $0xff49; BYTE $0xc7     // inc    r15
	LONG $0xd2940f41             // sete    r10b
	WORD $0x8445; BYTE $0xc9     // test    r9b, r9b
	JNE  LBB1_215
	WORD $0x8949; BYTE $0xcf     // mov    r15, rcx

LBB1_215:
	WORD $0x014c; BYTE $0xdf     // add    rdi, r11
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x8949; BYTE $0xfd     // mov    r13, rdi
	WORD $0xff49; BYTE $0xc5     // inc    r13
	LONG $0xd3940f41             // sete    r11b
	LONG $0x24540348; BYTE $0x70 // add    rdx, qword [rsp + 112]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB1_217
	WORD $0x8949; BYTE $0xfd     // mov    r13, rdi

LBB1_217:
	WORD $0x2045; BYTE $0xca     // and    r10b, r9b
	WORD $0x2044; BYTE $0xdb     // and    bl, r11b
	WORD $0xd908                 // or    cl, bl
	LONG $0x24740348; BYTE $0x58 // add    rsi, qword [rsp + 88]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x8949; BYTE $0xf3     // mov    r11, rsi
	WORD $0xff49; BYTE $0xc3     // inc    r11
	LONG $0xd7940f40             // sete    dil
	WORD $0xc984                 // test    cl, cl
	JNE  LBB1_219
	WORD $0x8949; BYTE $0xf3     // mov    r11, rsi

LBB1_219:
	WORD $0x0845; BYTE $0xd0 // or    r8b, r10b
	WORD $0x2040; BYTE $0xf9 // and    cl, dil
	WORD $0xcb08             // or    bl, cl
	WORD $0x0149; BYTE $0xc4 // add    r12, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x894d; BYTE $0xe6 // mov    r14, r12
	WORD $0xff49; BYTE $0xc6 // inc    r14
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB1_221
	WORD $0x894d; BYTE $0xe6 // mov    r14, r12

LBB1_221:
	LONG $0xf0b60f41             // movzx    esi, r8b
	LONG $0x24748948; BYTE $0x30 // mov    qword [rsp + 48], rsi
	WORD $0xcb20                 // and    bl, cl
	WORD $0xd808                 // or    al, bl
	LONG $0x247c034c; BYTE $0x40 // add    r15, qword [rsp + 64]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894d; BYTE $0xfc     // mov    r12, r15
	WORD $0xff49; BYTE $0xc4     // inc    r12
	WORD $0x940f; BYTE $0xd2     // sete    dl
	WORD $0xc084                 // test    al, al
	JNE  LBB1_223
	WORD $0x894d; BYTE $0xfc     // mov    r12, r15

LBB1_223:
	WORD $0xd020  // and    al, dl
	WORD $0xc108  // or    cl, al
	JNE  LBB1_268

LBB1_224:
	LONG $0x247c8b4c; BYTE $0x38         // mov    r15, qword [rsp + 56]
	WORD $0x894c; BYTE $0xfe             // mov    rsi, r15
	QUAD $0x000000c8248c8b48             // mov    rcx, qword [rsp + 200]
	LONG $0xf1af0f48                     // imul    rsi, rcx
	WORD $0x014c; BYTE $0xee             // add    rsi, r13
	QUAD $0x00008824b4af0f48; BYTE $0x00 // imul    rsi, qword [rsp + 136]
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x60         // mul    qword [rsp + 96]
	WORD $0x8949; BYTE $0xd0             // mov    r8, rdx
	WORD $0x8949; BYTE $0xc1             // mov    r9, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x48         // mul    qword [rsp + 72]
	LONG $0x246c894c; BYTE $0x50         // mov    qword [rsp + 80], r13
	WORD $0x8949; BYTE $0xd5             // mov    r13, rdx
	WORD $0x8948; BYTE $0xc7             // mov    rdi, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x78         // mul    qword [rsp + 120]
	WORD $0x8948; BYTE $0xd3             // mov    rbx, rdx
	WORD $0x8949; BYTE $0xc2             // mov    r10, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x68         // mul    qword [rsp + 104]
	WORD $0x014c; BYTE $0xc7             // add    rdi, r8
	WORD $0x114d; BYTE $0xea             // adc    r10, r13
	WORD $0x1148; BYTE $0xd8             // adc    rax, rbx
	LONG $0x24448948; BYTE $0x70         // mov    qword [rsp + 112], rax
	LONG $0x00d28348                     // adc    rdx, 0
	LONG $0x24548948; BYTE $0x58         // mov    qword [rsp + 88], rdx
	WORD $0x894c; BYTE $0xf8             // mov    rax, r15
	WORD $0x894d; BYTE $0xcf             // mov    r15, r9
	WORD $0xf748; BYTE $0xe1             // mul    rcx
	WORD $0x8949; BYTE $0xd5             // mov    r13, rdx
	LONG $0x24448948; BYTE $0x40         // mov    qword [rsp + 64], rax
	LONG $0x24448b48; BYTE $0x28         // mov    rax, qword [rsp + 40]
	WORD $0xf748; BYTE $0xe1             // mul    rcx
	WORD $0x8949; BYTE $0xd1             // mov    r9, rdx
	WORD $0x8949; BYTE $0xc0             // mov    r8, rax
	LONG $0x24448b48; BYTE $0x20         // mov    rax, qword [rsp + 32]
	WORD $0xf748; BYTE $0xe1             // mul    rcx
	WORD $0x8948; BYTE $0xd6             // mov    rsi, rdx
	WORD $0x8948; BYTE $0xc3             // mov    rbx, rax
	LONG $0x24448b48; BYTE $0x18         // mov    rax, qword [rsp + 24]
	WORD $0xf748; BYTE $0xe1             // mul    rcx
	WORD $0x014d; BYTE $0xe8             // add    r8, r13
	WORD $0x114c; BYTE $0xcb             // adc    rbx, r9
	LONG $0x245c8948; BYTE $0x18         // mov    qword [rsp + 24], rbx
	WORD $0x1148; BYTE $0xf0             // adc    rax, rsi
	LONG $0x00d28348                     // adc    rdx, 0
	WORD $0x0149; BYTE $0xfb             // add    r11, rdi
	WORD $0x920f; BYTE $0xd1             // setb    cl
	WORD $0x894d; BYTE $0xdd             // mov    r13, r11
	WORD $0xff49; BYTE $0xc5             // inc    r13
	LONG $0xd6940f40                     // sete    sil
	LONG $0x247c034c; BYTE $0x50         // add    r15, qword [rsp + 80]
	WORD $0x920f; BYTE $0xd3             // setb    bl
	JB   LBB1_226
	WORD $0x894d; BYTE $0xdd             // mov    r13, r11

LBB1_226:
	WORD $0x2040; BYTE $0xf3 // and    bl, sil
	WORD $0xd908             // or    cl, bl
	WORD $0x014d; BYTE $0xd6 // add    r14, r10
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x894c; BYTE $0xf6 // mov    rsi, r14
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	LONG $0xd7940f40         // sete    dil
	WORD $0xc984             // test    cl, cl
	JNE  LBB1_228
	WORD $0x894c; BYTE $0xf6 // mov    rsi, r14

LBB1_228:
	WORD $0x2040; BYTE $0xf9     // and    cl, dil
	WORD $0xcb08                 // or    bl, cl
	LONG $0x2464034c; BYTE $0x70 // add    r12, qword [rsp + 112]
	LONG $0xd2920f41             // setb    r10b
	WORD $0x894c; BYTE $0xe7     // mov    rdi, r12
	WORD $0xff48; BYTE $0xc7     // inc    rdi
	WORD $0x940f; BYTE $0xd1     // sete    cl
	WORD $0xdb84                 // test    bl, bl
	JNE  LBB1_230
	WORD $0x894c; BYTE $0xe7     // mov    rdi, r12

LBB1_230:
	WORD $0xcb20                 // and    bl, cl
	WORD $0x0841; BYTE $0xda     // or    r10b, bl
	LONG $0x244c8b48; BYTE $0x30 // mov    rcx, qword [rsp + 48]
	LONG $0x244c0348; BYTE $0x58 // add    rcx, qword [rsp + 88]
	LONG $0xd1920f41             // setb    r9b
	WORD $0x8949; BYTE $0xcb     // mov    r11, rcx
	WORD $0xff49; BYTE $0xc3     // inc    r11
	LONG $0xd6940f41             // sete    r14b
	WORD $0x8445; BYTE $0xd2     // test    r10b, r10b
	JNE  LBB1_232
	WORD $0x8949; BYTE $0xcb     // mov    r11, rcx

LBB1_232:
	WORD $0x014d; BYTE $0xc5     // add    r13, r8
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894c; BYTE $0xeb     // mov    rbx, r13
	WORD $0xff48; BYTE $0xc3     // inc    rbx
	LONG $0x245c8948; BYTE $0x38 // mov    qword [rsp + 56], rbx
	LONG $0xd0940f41             // sete    r8b
	LONG $0x247c034c; BYTE $0x40 // add    r15, qword [rsp + 64]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB1_234
	LONG $0x246c894c; BYTE $0x38 // mov    qword [rsp + 56], r13

LBB1_234:
	WORD $0x2045; BYTE $0xd6     // and    r14b, r10b
	WORD $0x2044; BYTE $0xc3     // and    bl, r8b
	WORD $0xd908                 // or    cl, bl
	LONG $0x24740348; BYTE $0x18 // add    rsi, qword [rsp + 24]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x8949; BYTE $0xf0     // mov    r8, rsi
	WORD $0xff49; BYTE $0xc0     // inc    r8
	LONG $0xd2940f41             // sete    r10b
	WORD $0xc984                 // test    cl, cl
	JNE  LBB1_236
	WORD $0x8949; BYTE $0xf0     // mov    r8, rsi

LBB1_236:
	WORD $0x0845; BYTE $0xf1     // or    r9b, r14b
	WORD $0x2044; BYTE $0xd1     // and    cl, r10b
	WORD $0xcb08                 // or    bl, cl
	WORD $0x0148; BYTE $0xc7     // add    rdi, rax
	WORD $0x920f; BYTE $0xd0     // setb    al
	WORD $0x8948; BYTE $0xf9     // mov    rcx, rdi
	WORD $0xff48; BYTE $0xc1     // inc    rcx
	LONG $0x244c8948; BYTE $0x20 // mov    qword [rsp + 32], rcx
	WORD $0x940f; BYTE $0xd1     // sete    cl
	WORD $0xdb84                 // test    bl, bl
	JNE  LBB1_238
	LONG $0x247c8948; BYTE $0x20 // mov    qword [rsp + 32], rdi

LBB1_238:
	LONG $0xf9b60f41             // movzx    edi, r9b
	WORD $0xcb20                 // and    bl, cl
	WORD $0xd808                 // or    al, bl
	WORD $0x0149; BYTE $0xd3     // add    r11, rdx
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894c; BYTE $0xda     // mov    rdx, r11
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	LONG $0x24548948; BYTE $0x18 // mov    qword [rsp + 24], rdx
	WORD $0x940f; BYTE $0xd2     // sete    dl
	WORD $0xc084                 // test    al, al
	JNE  LBB1_240
	LONG $0x245c894c; BYTE $0x18 // mov    qword [rsp + 24], r11

LBB1_240:
	WORD $0xd020                 // and    al, dl
	WORD $0xc108                 // or    cl, al
	JNE  LBB1_269
	LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
	LONG $0x24442b48; BYTE $0x68 // sub    rax, qword [rsp + 104]
	JA   LBB1_245

LBB1_242:
	WORD $0x8548; BYTE $0xff     // test    rdi, rdi
	JNE  LBB1_245
	LONG $0x244c8b48; BYTE $0x18 // mov    rcx, qword [rsp + 24]
	LONG $0x244c3b48; BYTE $0x68 // cmp    rcx, qword [rsp + 104]
	JB   LBB1_110
	LONG $0x244c8b48; BYTE $0x20 // mov    rcx, qword [rsp + 32]
	LONG $0x244c3b48; BYTE $0x78 // cmp    rcx, qword [rsp + 120]
	JBE  LBB1_252

LBB1_245:
	LONG $0x24442b4c; BYTE $0x48 // sub    r8, qword [rsp + 72]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894c; BYTE $0xc2     // mov    rdx, r8
	LONG $0x01ea8348             // sub    rdx, 1
	LONG $0x24548948; BYTE $0x28 // mov    qword [rsp + 40], rdx
	WORD $0x920f; BYTE $0xd2     // setb    dl
	LONG $0x24748b48; BYTE $0x38 // mov    rsi, qword [rsp + 56]
	LONG $0x24742b48; BYTE $0x60 // sub    rsi, qword [rsp + 96]
	LONG $0x24748948; BYTE $0x38 // mov    qword [rsp + 56], rsi
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB1_247
	LONG $0x2444894c; BYTE $0x28 // mov    qword [rsp + 40], r8

LBB1_247:
	WORD $0xd320                 // and    bl, dl
	WORD $0xd908                 // or    cl, bl
	LONG $0x247c8b48; BYTE $0x20 // mov    rdi, qword [rsp + 32]
	LONG $0x247c2b48; BYTE $0x78 // sub    rdi, qword [rsp + 120]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x8948; BYTE $0xfa     // mov    rdx, rdi
	LONG $0x01ea8348             // sub    rdx, 1
	LONG $0xd6920f40             // setb    sil
	WORD $0xc984                 // test    cl, cl
	JNE  LBB1_249
	WORD $0x8948; BYTE $0xfa     // mov    rdx, rdi

LBB1_249:
	WORD $0x2040; BYTE $0xf1     // and    cl, sil
	WORD $0xcb08                 // or    bl, cl
	WORD $0xb60f; BYTE $0xcb     // movzx    ecx, bl
	WORD $0x2948; BYTE $0xc8     // sub    rax, rcx
	LONG $0x24448948; BYTE $0x18 // mov    qword [rsp + 24], rax
	LONG $0x24548948; BYTE $0x20 // mov    qword [rsp + 32], rdx
	JMP  LBB1_111

LBB1_250:
	JB   LBB1_174
	LONG $0x24543b4c; BYTE $0x48 // cmp    r10, qword [rsp + 72]
	JA   LBB1_176
	LONG $0x24448b48; BYTE $0x38 // mov    rax, qword [rsp + 56]
	LONG $0x24443b48; BYTE $0x60 // cmp    rax, qword [rsp + 96]
	JB   LBB1_174
	LONG $0x24543b4c; BYTE $0x48 // cmp    r10, qword [rsp + 72]
	JAE  LBB1_176
	JMP  LBB1_174

LBB1_252:
	JB   LBB1_110
	LONG $0x24443b4c; BYTE $0x48 // cmp    r8, qword [rsp + 72]
	JA   LBB1_245
	LONG $0x244c8b48; BYTE $0x38 // mov    rcx, qword [rsp + 56]
	LONG $0x244c3b48; BYTE $0x60 // cmp    rcx, qword [rsp + 96]
	JB   LBB1_110
	LONG $0x24443b4c; BYTE $0x48 // cmp    r8, qword [rsp + 72]
	JAE  LBB1_245
	JMP  LBB1_110

LBB1_264:
	LONG $0x24448b48; BYTE $0x30 // mov    rax, qword [rsp + 48]
	WORD $0xb60f; BYTE $0xc0     // movzx    eax, al
	LONG $0x01c08348             // add    rax, 1
	LONG $0x24448948; BYTE $0x30 // mov    qword [rsp + 48], rax
	JMP  LBB1_137

LBB1_265:
	LONG $0x24448b48; BYTE $0x20 // mov    rax, qword [rsp + 32]
	WORD $0xb60f; BYTE $0xc0     // movzx    eax, al
	LONG $0x01c08348             // add    rax, 1
	LONG $0x24448948; BYTE $0x20 // mov    qword [rsp + 32], rax
	JMP  LBB1_154

LBB1_266:
	LONG $0xf6b60f40 // movzx    esi, sil
	LONG $0x01c68348 // add    rsi, 1
	JMP  LBB1_171

LBB1_267:
	LONG $0xffb60f40 // movzx    edi, dil
	LONG $0x01c78348 // add    rdi, 1
	JMP  LBB1_207

LBB1_268:
	LONG $0x24448b48; BYTE $0x30 // mov    rax, qword [rsp + 48]
	WORD $0xb60f; BYTE $0xc0     // movzx    eax, al
	LONG $0x01c08348             // add    rax, 1
	LONG $0x24448948; BYTE $0x30 // mov    qword [rsp + 48], rax
	JMP  LBB1_224

LBB1_269:
	LONG $0xffb60f40             // movzx    edi, dil
	LONG $0x01c78348             // add    rdi, 1
	LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
	LONG $0x24442b48; BYTE $0x68 // sub    rax, qword [rsp + 104]
	JBE  LBB1_242
	JMP  LBB1_245

LBB1_270:
	LONG $0x24448b48; BYTE $0x38 // mov    rax, qword [rsp + 56]
	QUAD $0x0000012024848948     // mov    qword [rsp + 288], rax
	LONG $0x24448b48; BYTE $0x28 // mov    rax, qword [rsp + 40]
	QUAD $0x0000012824848948     // mov    qword [rsp + 296], rax
	LONG $0x24448b48; BYTE $0x20 // mov    rax, qword [rsp + 32]
	QUAD $0x0000013024848948     // mov    qword [rsp + 304], rax
	LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
	QUAD $0x0000013824848948     // mov    qword [rsp + 312], rax

LBB1_271:
	LONG $0xc057f8c5                     // vxorps    xmm0, xmm0, xmm0
	QUAD $0x0000e0248429fcc5; BYTE $0x00 // vmovaps    yword [rsp + 224], ymm0
	QUAD $0x000100248429fcc5; BYTE $0x00 // vmovaps    yword [rsp + 256], ymm0
	QUAD $0x000000f824b48b4c             // mov    r14, qword [rsp + 248]
	QUAD $0x00000100249c8b4c             // mov    r11, qword [rsp + 256]
	QUAD $0x0000010824848b48             // mov    rax, qword [rsp + 264]
	LONG $0x24448948; BYTE $0x30         // mov    qword [rsp + 48], rax
	QUAD $0x0000011024848b48             // mov    rax, qword [rsp + 272]
	LONG $0x24448948; BYTE $0x28         // mov    qword [rsp + 40], rax
	LONG $0x000001b8; BYTE $0x00         // mov    eax, 1
	LONG $0x24448948; BYTE $0x40         // mov    qword [rsp + 64], rax
	WORD $0x3145; BYTE $0xc0             // xor    r8d, r8d
	QUAD $0x0000011824848b48             // mov    rax, qword [rsp + 280]
	LONG $0x24448948; BYTE $0x50         // mov    qword [rsp + 80], rax
	WORD $0x3145; BYTE $0xe4             // xor    r12d, r12d
	WORD $0xc031                         // xor    eax, eax
	LONG $0x24448948; BYTE $0x58         // mov    qword [rsp + 88], rax
	WORD $0xc031                         // xor    eax, eax
	LONG $0x24448948; BYTE $0x70         // mov    qword [rsp + 112], rax
	WORD $0xc031                         // xor    eax, eax
	LONG $0x24448948; BYTE $0x18         // mov    qword [rsp + 24], rax
	WORD $0xc031                         // xor    eax, eax
	LONG $0x24448948; BYTE $0x20         // mov    qword [rsp + 32], rax
	WORD $0x3145; BYTE $0xff             // xor    r15d, r15d
	LONG $0x246c8b4c; BYTE $0x38         // mov    r13, qword [rsp + 56]

LBB1_272:
	LONG $0x2f348d4b                     // lea    rsi, [r15 + r13]
	QUAD $0x00008824b4af0f48; BYTE $0x00 // imul    rsi, qword [rsp + 136]
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x60         // mul    qword [rsp + 96]
	WORD $0x8948; BYTE $0xd7             // mov    rdi, rdx
	LONG $0x24448948; BYTE $0x38         // mov    qword [rsp + 56], rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x48         // mul    qword [rsp + 72]
	WORD $0x8948; BYTE $0xd1             // mov    rcx, rdx
	WORD $0x8949; BYTE $0xc2             // mov    r10, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x78         // mul    qword [rsp + 120]
	WORD $0x8948; BYTE $0xd3             // mov    rbx, rdx
	WORD $0x8949; BYTE $0xc1             // mov    r9, rax
	WORD $0x8948; BYTE $0xf0             // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x68         // mul    qword [rsp + 104]
	WORD $0x0149; BYTE $0xfa             // add    r10, rdi
	WORD $0x1149; BYTE $0xc9             // adc    r9, rcx
	WORD $0x1148; BYTE $0xd8             // adc    rax, rbx
	LONG $0x00d28348                     // adc    rdx, 0
	WORD $0x894c; BYTE $0xfb             // mov    rbx, r15
	WORD $0x014c; BYTE $0xeb             // add    rbx, r13
	JB   LBB1_288

LBB1_273:
	LONG $0x2464894c; BYTE $0x28 // mov    qword [rsp + 40], r12
	WORD $0xc931                 // xor    ecx, ecx
	LONG $0x244c8948; BYTE $0x30 // mov    qword [rsp + 48], rcx
	LONG $0x245c8b4c; BYTE $0x58 // mov    r11, qword [rsp + 88]
	LONG $0x24748b4c; BYTE $0x70 // mov    r14, qword [rsp + 112]

LBB1_274:
	LONG $0x24748b48; BYTE $0x20 // mov    rsi, qword [rsp + 32]
	WORD $0x014c; BYTE $0xd6     // add    rsi, r10
	LONG $0xd7920f40             // setb    dil
	WORD $0x8949; BYTE $0xf7     // mov    r15, rsi
	WORD $0xff49; BYTE $0xc7     // inc    r15
	WORD $0x940f; BYTE $0xd1     // sete    cl
	LONG $0x245c0348; BYTE $0x38 // add    rbx, qword [rsp + 56]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB1_276
	WORD $0x8949; BYTE $0xf7     // mov    r15, rsi

LBB1_276:
	WORD $0xcb20                 // and    bl, cl
	WORD $0x0840; BYTE $0xdf     // or    dil, bl
	LONG $0x24748b48; BYTE $0x18 // mov    rsi, qword [rsp + 24]
	WORD $0x014c; BYTE $0xce     // add    rsi, r9
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x8948; BYTE $0xf3     // mov    rbx, rsi
	WORD $0xff48; BYTE $0xc3     // inc    rbx
	LONG $0x245c8948; BYTE $0x20 // mov    qword [rsp + 32], rbx
	WORD $0x940f; BYTE $0xd3     // sete    bl
	WORD $0x8440; BYTE $0xff     // test    dil, dil
	JNE  LBB1_278
	LONG $0x24748948; BYTE $0x20 // mov    qword [rsp + 32], rsi

LBB1_278:
	WORD $0x2040; BYTE $0xfb     // and    bl, dil
	WORD $0xd908                 // or    cl, bl
	WORD $0x0149; BYTE $0xc6     // add    r14, rax
	WORD $0x920f; BYTE $0xd0     // setb    al
	WORD $0x894c; BYTE $0xf6     // mov    rsi, r14
	WORD $0xff48; BYTE $0xc6     // inc    rsi
	LONG $0x24748948; BYTE $0x18 // mov    qword [rsp + 24], rsi
	WORD $0x940f; BYTE $0xd3     // sete    bl
	WORD $0xc984                 // test    cl, cl
	JNE  LBB1_280
	LONG $0x2474894c; BYTE $0x18 // mov    qword [rsp + 24], r14

LBB1_280:
	WORD $0xcb20             // and    bl, cl
	WORD $0xd808             // or    al, bl
	WORD $0x0149; BYTE $0xd3 // add    r11, rdx
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x894d; BYTE $0xde // mov    r14, r11
	WORD $0xff49; BYTE $0xc6 // inc    r14
	WORD $0x940f; BYTE $0xd2 // sete    dl
	WORD $0xc084             // test    al, al
	JNE  LBB1_282
	WORD $0x894d; BYTE $0xde // mov    r14, r11

LBB1_282:
	WORD $0xc220                 // and    dl, al
	WORD $0xd108                 // or    cl, dl
	LONG $0x24548b48; BYTE $0x30 // mov    rdx, qword [rsp + 48]
	WORD $0x8949; BYTE $0xd3     // mov    r11, rdx
	WORD $0xff49; BYTE $0xc3     // inc    r11
	WORD $0x940f; BYTE $0xd0     // sete    al
	WORD $0xc984                 // test    cl, cl
	JNE  LBB1_284
	WORD $0x8949; BYTE $0xd3     // mov    r11, rdx

LBB1_284:
	WORD $0xc820                 // and    al, cl
	LONG $0x24548b48; BYTE $0x28 // mov    rdx, qword [rsp + 40]
	WORD $0x8949; BYTE $0xd4     // mov    r12, rdx
	WORD $0xff49; BYTE $0xc4     // inc    r12
	WORD $0x940f; BYTE $0xd1     // sete    cl
	WORD $0xc084                 // test    al, al
	JNE  LBB1_286
	WORD $0x8949; BYTE $0xd4     // mov    r12, rdx

LBB1_286:
	WORD $0xc120                 // and    cl, al
	WORD $0xb60f; BYTE $0xc1     // movzx    eax, cl
	WORD $0x0149; BYTE $0xc0     // add    r8, rax
	LONG $0x24448b48; BYTE $0x40 // mov    rax, qword [rsp + 64]
	LONG $0x04f88348             // cmp    rax, 4
	JE   LBB1_296
	QUAD $0x00000120c4ac8b4c     // mov    r13, qword [rsp + 8*rax + 288]
	LONG $0x01c08348             // add    rax, 1
	LONG $0x24448948; BYTE $0x40 // mov    qword [rsp + 64], rax
	LONG $0x2444894c; BYTE $0x50 // mov    qword [rsp + 80], r8
	LONG $0x2464894c; BYTE $0x28 // mov    qword [rsp + 40], r12
	WORD $0xc031                 // xor    eax, eax
	LONG $0x24448948; BYTE $0x30 // mov    qword [rsp + 48], rax
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0x245c894c; BYTE $0x58 // mov    qword [rsp + 88], r11
	WORD $0x894c; BYTE $0xf0     // mov    rax, r14
	LONG $0x2474894c; BYTE $0x70 // mov    qword [rsp + 112], r14
	JMP  LBB1_272

LBB1_288:
	LONG $0x2444ff48; BYTE $0x20 // inc    qword [rsp + 32]
	JNE  LBB1_273
	LONG $0x2444ff48; BYTE $0x18 // inc    qword [rsp + 24]
	JE   LBB1_291

LBB1_290:
	LONG $0x24448b4c; BYTE $0x50 // mov    r8, qword [rsp + 80]
	JMP  LBB1_274

LBB1_291:
	WORD $0xff49; BYTE $0xc6       // inc    r14
	JNE  LBB1_290
	WORD $0xff49; BYTE $0xc3       // inc    r11
	JNE  LBB1_290
	LONG $0x2444ff48; BYTE $0x30   // inc    qword [rsp + 48]
	JNE  LBB1_290
	LONG $0x2444ff48; BYTE $0x28   // inc    qword [rsp + 40]
	JNE  LBB1_290
	LONG $0x24448348; WORD $0x0150 // add    qword [rsp + 80], 1
	JMP  LBB1_290

LBB1_296:
	QUAD $0x000000e024bc894c                   // mov    qword [rsp + 224], r15
	LONG $0x24448b48; BYTE $0x20               // mov    rax, qword [rsp + 32]
	QUAD $0x000000e824848948                   // mov    qword [rsp + 232], rax
	LONG $0x24448b48; BYTE $0x18               // mov    rax, qword [rsp + 24]
	QUAD $0x000000f024848948                   // mov    qword [rsp + 240], rax
	QUAD $0x000000f824b4894c                   // mov    qword [rsp + 248], r14
	QUAD $0x00000100249c894c                   // mov    qword [rsp + 256], r11
	QUAD $0x000001082484c748; LONG $0x00000000 // mov    qword [rsp + 264], 0
	QUAD $0x0000011024a4894c                   // mov    qword [rsp + 272], r12
	QUAD $0x000001182484894c                   // mov    qword [rsp + 280], r8
	LONG $0x24743b4c; BYTE $0x68               // cmp    r14, qword [rsp + 104]
	JA   LBB1_301
	WORD $0x854d; BYTE $0xdb                   // test    r11, r11
	JNE  LBB1_301
	LONG $0x24743b4c; BYTE $0x68               // cmp    r14, qword [rsp + 104]
	JAE  LBB1_300

LBB1_299:
	QUAD $0x0000014824b48b48     // mov    rsi, qword [rsp + 328]
	WORD $0x894c; BYTE $0x3e     // mov    qword [rsi], r15
	LONG $0x24448b48; BYTE $0x20 // mov    rax, qword [rsp + 32]
	LONG $0x08468948             // mov    qword [rsi + 8], rax
	LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
	LONG $0x10468948             // mov    qword [rsi + 16], rax
	JMP  LBB1_306

LBB1_300:
	LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
	LONG $0x24443b48; BYTE $0x78 // cmp    rax, qword [rsp + 120]
	JBE  LBB1_315

LBB1_301:
	WORD $0x894c; BYTE $0xf8     // mov    rax, r15
	LONG $0x245c8b48; BYTE $0x60 // mov    rbx, qword [rsp + 96]
	WORD $0x2948; BYTE $0xd8     // sub    rax, rbx
	QUAD $0x0000014824b48b48     // mov    rsi, qword [rsp + 328]
	WORD $0x8948; BYTE $0x06     // mov    qword [rsi], rax
	QUAD $0x0000015024bc8b48     // mov    rdi, qword [rsp + 336]
	LONG $0x244c8b48; BYTE $0x20 // mov    rcx, qword [rsp + 32]
	LONG $0x084f2b48             // sub    rcx, qword [rdi + 8]
	WORD $0x920f; BYTE $0xd0     // setb    al
	WORD $0x8948; BYTE $0xca     // mov    rdx, rcx
	LONG $0x01ea8348             // sub    rdx, 1
	LONG $0xd0920f41             // setb    r8b
	WORD $0x3949; BYTE $0xdf     // cmp    r15, rbx
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB1_303
	WORD $0x8948; BYTE $0xca     // mov    rdx, rcx

LBB1_303:
	WORD $0x2044; BYTE $0xc3     // and    bl, r8b
	WORD $0xd808                 // or    al, bl
	LONG $0x08568948             // mov    qword [rsi + 8], rdx
	LONG $0x24548b48; BYTE $0x18 // mov    rdx, qword [rsp + 24]
	LONG $0x10572b48             // sub    rdx, qword [rdi + 16]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x8948; BYTE $0xd3     // mov    rbx, rdx
	LONG $0x01eb8348             // sub    rbx, 1
	LONG $0xd0920f41             // setb    r8b
	WORD $0xc084                 // test    al, al
	JNE  LBB1_305
	WORD $0x8948; BYTE $0xd3     // mov    rbx, rdx

LBB1_305:
	WORD $0x2044; BYTE $0xc0 // and    al, r8b
	WORD $0xc108             // or    cl, al
	LONG $0x105e8948         // mov    qword [rsi + 16], rbx
	LONG $0x18772b4c         // sub    r14, qword [rdi + 24]
	WORD $0xb60f; BYTE $0xc1 // movzx    eax, cl
	WORD $0x2949; BYTE $0xc6 // sub    r14, rax

LBB1_306:
	LONG $0x1876894c // mov    qword [rsi + 24], r14
	MOVQ 416(SP), SP
	VZEROUPPER
	RET

LBB1_307:
	JB   LBB1_67
	LONG $0x244c3b4c; BYTE $0x48 // cmp    r9, qword [rsp + 72]
	JA   LBB1_69
	QUAD $0x000000b0248c8b48     // mov    rcx, qword [rsp + 176]
	LONG $0x244c3b48; BYTE $0x60 // cmp    rcx, qword [rsp + 96]
	JB   LBB1_67
	LONG $0x244c3b4c; BYTE $0x48 // cmp    r9, qword [rsp + 72]
	JAE  LBB1_69
	JMP  LBB1_67

LBB1_311:
	JB   LBB1_101
	LONG $0x244c8b48; BYTE $0x28 // mov    rcx, qword [rsp + 40]
	LONG $0x244c3b48; BYTE $0x48 // cmp    rcx, qword [rsp + 72]
	JA   LBB1_103
	LONG $0x244c8b48; BYTE $0x38 // mov    rcx, qword [rsp + 56]
	LONG $0x244c3b48; BYTE $0x60 // cmp    rcx, qword [rsp + 96]
	JB   LBB1_101
	LONG $0x244c8b48; BYTE $0x28 // mov    rcx, qword [rsp + 40]
	LONG $0x244c3b48; BYTE $0x48 // cmp    rcx, qword [rsp + 72]
	JAE  LBB1_103
	JMP  LBB1_101

LBB1_315:
	JB   LBB1_299
	LONG $0x24448b48; BYTE $0x20 // mov    rax, qword [rsp + 32]
	LONG $0x24443b48; BYTE $0x48 // cmp    rax, qword [rsp + 72]
	JA   LBB1_301
	LONG $0x247c3b4c; BYTE $0x60 // cmp    r15, qword [rsp + 96]
	JB   LBB1_299
	LONG $0x24448b48; BYTE $0x20 // mov    rax, qword [rsp + 32]
	LONG $0x24443b48; BYTE $0x48 // cmp    rax, qword [rsp + 72]
	JAE  LBB1_301
	JMP  LBB1_299

LBB1_319:
	WORD $0xc031             // xor    eax, eax
	QUAD $0x000000b824848948 // mov    qword [rsp + 184], rax
	JMP  LBB1_5

LBB1_320:
	LONG $0x24448b48; BYTE $0x30 // mov    rax, qword [rsp + 48]
	WORD $0xb60f; BYTE $0xc0     // movzx    eax, al
	LONG $0x01c08348             // add    rax, 1
	LONG $0x24448948; BYTE $0x30 // mov    qword [rsp + 48], rax
	JMP  LBB1_30

LBB1_321:
	LONG $0xf6b60f40 // movzx    esi, sil
	LONG $0x01c68348 // add    rsi, 1
	JMP  LBB1_47

LBB1_322:
	LONG $0xf6b60f40             // movzx    esi, sil
	LONG $0x01c68348             // add    rsi, 1
	QUAD $0x000000c824848b48     // mov    rax, qword [rsp + 200]
	LONG $0x24442b48; BYTE $0x68 // sub    rax, qword [rsp + 104]
	JBE  LBB1_65
	JMP  LBB1_69

TEXT Â·_vli_sm2_mult_p(SB), $0-16

	MOVQ res+0(FP), DI
	MOVQ u+8(FP), SI

	LONG $0x087f8348; BYTE $0x05               // cmp    qword [rdi + 8], 5
	JL   LBB2_13
	WORD $0x8b48; BYTE $0x3f                   // mov    rdi, qword [rdi]
	WORD $0x8948; BYTE $0xf2                   // mov    rdx, rsi
	LONG $0x20e2c148                           // shl    rdx, 32
	WORD $0x8948; BYTE $0xf1                   // mov    rcx, rsi
	LONG $0x20e9c148                           // shr    rcx, 32
	QUAD $0x000000002847c748                   // mov    qword [rdi + 40], 0
	WORD $0x8949; BYTE $0xc8                   // mov    r8, rcx
	WORD $0xf749; BYTE $0xd0                   // not    r8
	WORD $0x0149; BYTE $0xf0                   // add    r8, rsi
	LONG $0x2047894c                           // mov    qword [rdi + 32], r8
	WORD $0xf748; BYTE $0xd9                   // neg    rcx
	LONG $0xd1920f41                           // setb    r9b
	WORD $0x8949; BYTE $0xca                   // mov    r10, rcx
	LONG $0x01ea8349                           // sub    r10, 1
	LONG $0xd3920f41                           // setb    r11b
	WORD $0xf748; BYTE $0xda                   // neg    rdx
	WORD $0x920f; BYTE $0xd0                   // setb    al
	LONG $0x0007c748; WORD $0x0000; BYTE $0x00 // mov    qword [rdi], 0
	LONG $0x08578948                           // mov    qword [rdi + 8], rdx
	JB   LBB2_3
	WORD $0x8949; BYTE $0xca                   // mov    r10, rcx

LBB2_3:
	WORD $0x2044; BYTE $0xd8 // and    al, r11b
	WORD $0x0841; BYTE $0xc1 // or    r9b, al
	LONG $0x1057894c         // mov    qword [rdi + 16], r10
	WORD $0x8948; BYTE $0xd0 // mov    rax, rdx
	LONG $0x01e88348         // sub    rax, 1
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x8445; BYTE $0xc9 // test    r9b, r9b
	JNE  LBB2_5
	WORD $0x8948; BYTE $0xd0 // mov    rax, rdx

LBB2_5:
	WORD $0x2044; BYTE $0xc9 // and    cl, r9b
	LONG $0x18478948         // mov    qword [rdi + 24], rax
	WORD $0xf980; BYTE $0x01 // cmp    cl, 1
	JNE  LBB2_7
	LONG $0xffc08349         // add    r8, -1
	LONG $0x2047894c         // mov    qword [rdi + 32], r8

LBB2_7:
	LONG $0xff4e8d48         // lea    rcx, [rsi - 1]
	WORD $0xf748; BYTE $0xde // neg    rsi
	WORD $0x8948; BYTE $0x37 // mov    qword [rdi], rsi
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	LONG $0xd1940f41         // sete    r9b
	WORD $0x0148; BYTE $0xca // add    rdx, rcx
	WORD $0x920f; BYTE $0xd1 // setb    cl
	LONG $0x08578948         // mov    qword [rdi + 8], rdx
	JB   LBB2_9
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10

LBB2_9:
	WORD $0x2044; BYTE $0xc9 // and    cl, r9b
	LONG $0x10778948         // mov    qword [rdi + 16], rsi
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	LONG $0xd6940f40         // sete    sil
	WORD $0xc984             // test    cl, cl
	JNE  LBB2_11
	WORD $0x8948; BYTE $0xc2 // mov    rdx, rax

LBB2_11:
	WORD $0x2040; BYTE $0xf1 // and    cl, sil
	LONG $0x18578948         // mov    qword [rdi + 24], rdx
	WORD $0xf980; BYTE $0x01 // cmp    cl, 1
	JNE  LBB2_13
	LONG $0x01c08349         // add    r8, 1
	LONG $0x2047894c         // mov    qword [rdi + 32], r8

LBB2_13:
	RET

TEXT Â·_mont_sm2_mod_mult_p(SB), $392-40

	MOVQ res+0(FP), DI
	MOVQ in1+8(FP), SI
	MOVQ in2+16(FP), DX
	MOVQ p+24(FP), CX
	MOVQ rr+32(FP), R8
	MOVQ SP, BP
	ADDQ $32, SP
	ANDQ $-32, SP
	MOVQ BP, 352(SP)

	LONG $0x24548948; BYTE $0x50 // mov    qword [rsp + 80], rdx
	WORD $0x8b4c; BYTE $0x26     // mov    r12, qword [rsi]
	WORD $0x8b48; BYTE $0x11     // mov    rdx, qword [rcx]
	LONG $0x08518b4c             // mov    r10, qword [rcx + 8]
	LONG $0x2444894c; BYTE $0x28 // mov    qword [rsp + 40], r8
	WORD $0x8b4d; BYTE $0x08     // mov    r9, qword [r8]
	WORD $0x894c; BYTE $0xcb     // mov    rbx, r9
	LONG $0xdcaf0f49             // imul    rbx, r12
	WORD $0x8948; BYTE $0xd8     // mov    rax, rbx
	LONG $0x24548948; BYTE $0x58 // mov    qword [rsp + 88], rdx
	WORD $0xf748; BYTE $0xe2     // mul    rdx
	LONG $0x24548948; BYTE $0x30 // mov    qword [rsp + 48], rdx
	LONG $0x24448948; BYTE $0x18 // mov    qword [rsp + 24], rax
	WORD $0x8948; BYTE $0xd8     // mov    rax, rbx
	LONG $0x2454894c; BYTE $0x48 // mov    qword [rsp + 72], r10
	WORD $0xf749; BYTE $0xe2     // mul    r10
	WORD $0x8949; BYTE $0xc7     // mov    r15, rax
	WORD $0x8949; BYTE $0xd2     // mov    r10, rdx
	LONG $0x10518b48             // mov    rdx, qword [rcx + 16]
	WORD $0x8948; BYTE $0xd8     // mov    rax, rbx
	LONG $0x24548948; BYTE $0x70 // mov    qword [rsp + 112], rdx
	WORD $0xf748; BYTE $0xe2     // mul    rdx
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	WORD $0x8949; BYTE $0xd3     // mov    r11, rdx
	QUAD $0x000000f0248c8948     // mov    qword [rsp + 240], rcx
	LONG $0x18498b48             // mov    rcx, qword [rcx + 24]
	WORD $0x8948; BYTE $0xd8     // mov    rax, rbx
	LONG $0x244c8948; BYTE $0x60 // mov    qword [rsp + 96], rcx
	WORD $0xf748; BYTE $0xe1     // mul    rcx
	WORD $0x8949; BYTE $0xc6     // mov    r14, rax
	WORD $0x8949; BYTE $0xd5     // mov    r13, rdx
	LONG $0x247c034c; BYTE $0x30 // add    r15, qword [rsp + 48]
	WORD $0x114d; BYTE $0xd0     // adc    r8, r10
	WORD $0x114d; BYTE $0xde     // adc    r14, r11
	LONG $0x00d58349             // adc    r13, 0
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9
	LONG $0x2464894c; BYTE $0x30 // mov    qword [rsp + 48], r12
	WORD $0xf749; BYTE $0xe4     // mul    r12
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	WORD $0x8949; BYTE $0xd4     // mov    r12, rdx
	LONG $0x084e8b48             // mov    rcx, qword [rsi + 8]
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9
	LONG $0x244c8948; BYTE $0x68 // mov    qword [rsp + 104], rcx
	WORD $0xf748; BYTE $0xe1     // mul    rcx
	WORD $0x8948; BYTE $0xc1     // mov    rcx, rax
	WORD $0x8949; BYTE $0xd2     // mov    r10, rdx
	QUAD $0x000000c824bc8948     // mov    qword [rsp + 200], rdi
	LONG $0x10568b48             // mov    rdx, qword [rsi + 16]
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9
	LONG $0x24548948; BYTE $0x40 // mov    qword [rsp + 64], rdx
	WORD $0xf748; BYTE $0xe2     // mul    rdx
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	WORD $0x8948; BYTE $0xd3     // mov    rbx, rdx
	LONG $0x18568b48             // mov    rdx, qword [rsi + 24]
	QUAD $0x00000088248c894c     // mov    qword [rsp + 136], r9
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9
	LONG $0x24548948; BYTE $0x78 // mov    qword [rsp + 120], rdx
	WORD $0xf748; BYTE $0xe2     // mul    rdx
	WORD $0x014c; BYTE $0xe1     // add    rcx, r12
	WORD $0x114c; BYTE $0xd7     // adc    rdi, r10
	WORD $0x1148; BYTE $0xd8     // adc    rax, rbx
	LONG $0x00d28348             // adc    rdx, 0
	WORD $0x014c; BYTE $0xf9     // add    rcx, r15
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx
	WORD $0xff49; BYTE $0xc1     // inc    r9
	LONG $0xd6940f40             // sete    sil
	LONG $0x245c034c; BYTE $0x18 // add    r11, qword [rsp + 24]
	LONG $0xd2920f41             // setb    r10b
	JB   LBB3_2
	WORD $0x8949; BYTE $0xc9     // mov    r9, rcx

LBB3_2:
	WORD $0x2041; BYTE $0xf2 // and    r10b, sil
	WORD $0x0844; BYTE $0xd3 // or    bl, r10b
	WORD $0x0149; BYTE $0xf8 // add    r8, rdi
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x894d; BYTE $0xc4 // mov    r12, r8
	WORD $0xff49; BYTE $0xc4 // inc    r12
	LONG $0xd6940f40         // sete    sil
	WORD $0xdb84             // test    bl, bl
	JNE  LBB3_4
	WORD $0x894d; BYTE $0xc4 // mov    r12, r8

LBB3_4:
	WORD $0x2040; BYTE $0xf3 // and    bl, sil
	WORD $0xd908             // or    cl, bl
	WORD $0x0149; BYTE $0xc6 // add    r14, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x894d; BYTE $0xf0 // mov    r8, r14
	WORD $0xff49; BYTE $0xc0 // inc    r8
	WORD $0x940f; BYTE $0xd3 // sete    bl
	WORD $0xc984             // test    cl, cl
	JNE  LBB3_6
	WORD $0x894d; BYTE $0xf0 // mov    r8, r14

LBB3_6:
	WORD $0xd920             // and    cl, bl
	WORD $0xc808             // or    al, cl
	WORD $0x0149; BYTE $0xd5 // add    r13, rdx
	LONG $0xd3920f41         // setb    r11b
	WORD $0x894d; BYTE $0xea // mov    r10, r13
	WORD $0xff49; BYTE $0xc2 // inc    r10
	WORD $0x940f; BYTE $0xd3 // sete    bl
	WORD $0xc084             // test    al, al
	JNE  LBB3_8
	WORD $0x894d; BYTE $0xea // mov    r10, r13

LBB3_8:
	WORD $0xc320                 // and    bl, al
	LONG $0x24448b48; BYTE $0x28 // mov    rax, qword [rsp + 40]
	LONG $0x08708b48             // mov    rsi, qword [rax + 8]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	LONG $0x24748b4c; BYTE $0x30 // mov    r14, qword [rsp + 48]
	LONG $0xfeaf0f49             // imul    rdi, r14
	WORD $0x014c; BYTE $0xcf     // add    rdi, r9
	WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x58 // mul    qword [rsp + 88]
	QUAD $0x00000098248c894c     // mov    qword [rsp + 152], r9
	LONG $0x24548948; BYTE $0x18 // mov    qword [rsp + 24], rdx
	QUAD $0x000000b024848948     // mov    qword [rsp + 176], rax
	WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x48 // mul    qword [rsp + 72]
	LONG $0x24548948; BYTE $0x20 // mov    qword [rsp + 32], rdx
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x70 // mul    qword [rsp + 112]
	WORD $0x8948; BYTE $0xc1     // mov    rcx, rax
	WORD $0x8949; BYTE $0xd5     // mov    r13, rdx
	WORD $0x0841; BYTE $0xdb     // or    r11b, bl
	QUAD $0x000000a8249c8844     // mov    byte [rsp + 168], r11b
	WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x60 // mul    qword [rsp + 96]
	WORD $0x8949; BYTE $0xd7     // mov    r15, rdx
	LONG $0x244c034c; BYTE $0x18 // add    r9, qword [rsp + 24]
	LONG $0x244c1348; BYTE $0x20 // adc    rcx, qword [rsp + 32]
	QUAD $0x00000090248c8948     // mov    qword [rsp + 144], rcx
	WORD $0x114c; BYTE $0xe8     // adc    rax, r13
	QUAD $0x0000008024848948     // mov    qword [rsp + 128], rax
	LONG $0x00d78349             // adc    r15, 0
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	WORD $0xf749; BYTE $0xe6     // mul    r14
	QUAD $0x000000b024b48b4c     // mov    r14, qword [rsp + 176]
	WORD $0x8949; BYTE $0xd3     // mov    r11, rdx
	LONG $0x24448948; BYTE $0x20 // mov    qword [rsp + 32], rax
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x68 // mul    qword [rsp + 104]
	WORD $0x8949; BYTE $0xd5     // mov    r13, rdx
	WORD $0x8948; BYTE $0xc1     // mov    rcx, rax
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x40 // mul    qword [rsp + 64]
	WORD $0x8948; BYTE $0xd3     // mov    rbx, rdx
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	LONG $0x24748948; BYTE $0x38 // mov    qword [rsp + 56], rsi
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x78 // mul    qword [rsp + 120]
	WORD $0x014c; BYTE $0xd9     // add    rcx, r11
	QUAD $0x000000a0248c8948     // mov    qword [rsp + 160], rcx
	WORD $0x114c; BYTE $0xef     // adc    rdi, r13
	LONG $0x247c8948; BYTE $0x18 // mov    qword [rsp + 24], rdi
	WORD $0x1148; BYTE $0xd8     // adc    rax, rbx
	LONG $0x00d28348             // adc    rdx, 0
	WORD $0x014d; BYTE $0xcc     // add    r12, r9
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894d; BYTE $0xe5     // mov    r13, r12
	WORD $0xff49; BYTE $0xc5     // inc    r13
	LONG $0xd7940f40             // sete    dil
	QUAD $0x0000009824b4034c     // add    r14, qword [rsp + 152]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB3_10
	WORD $0x894d; BYTE $0xe5     // mov    r13, r12

LBB3_10:
	QUAD $0x000000a824b4b60f // movzx    esi, byte [rsp + 168]
	WORD $0x2040; BYTE $0xfb // and    bl, dil
	WORD $0xd908             // or    cl, bl
	QUAD $0x000000902484034c // add    r8, qword [rsp + 144]
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x894d; BYTE $0xc4 // mov    r12, r8
	WORD $0xff49; BYTE $0xc4 // inc    r12
	LONG $0xd7940f40         // sete    dil
	WORD $0xc984             // test    cl, cl
	JNE  LBB3_12
	WORD $0x894d; BYTE $0xc4 // mov    r12, r8

LBB3_12:
	WORD $0x2040; BYTE $0xf9 // and    cl, dil
	WORD $0xcb08             // or    bl, cl
	QUAD $0x000000802494034c // add    r10, qword [rsp + 128]
	LONG $0xd0920f41         // setb    r8b
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10
	WORD $0xff48; BYTE $0xc7 // inc    rdi
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB3_14
	WORD $0x894c; BYTE $0xd7 // mov    rdi, r10

LBB3_14:
	WORD $0xcb20             // and    bl, cl
	WORD $0x0841; BYTE $0xd8 // or    r8b, bl
	WORD $0x0149; BYTE $0xf7 // add    r15, rsi
	WORD $0x894c; BYTE $0xfe // mov    rsi, r15
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	LONG $0xd3940f41         // sete    r11b
	WORD $0x8445; BYTE $0xc0 // test    r8b, r8b
	JNE  LBB3_16
	WORD $0x894c; BYTE $0xfe // mov    rsi, r15

LBB3_16:
	QUAD $0x000000a024ac034c     // add    r13, qword [rsp + 160]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894c; BYTE $0xeb     // mov    rbx, r13
	WORD $0xff48; BYTE $0xc3     // inc    rbx
	WORD $0x8949; BYTE $0xda     // mov    r10, rbx
	LONG $0xd1940f41             // sete    r9b
	LONG $0x2474034c; BYTE $0x20 // add    r14, qword [rsp + 32]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB3_18
	WORD $0x894d; BYTE $0xea     // mov    r10, r13

LBB3_18:
	WORD $0x2044; BYTE $0xcb     // and    bl, r9b
	WORD $0xd908                 // or    cl, bl
	LONG $0x2464034c; BYTE $0x18 // add    r12, qword [rsp + 24]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x894d; BYTE $0xe7     // mov    r15, r12
	WORD $0xff49; BYTE $0xc7     // inc    r15
	LONG $0xd1940f41             // sete    r9b
	WORD $0xc984                 // test    cl, cl
	JNE  LBB3_20
	WORD $0x894d; BYTE $0xe7     // mov    r15, r12

LBB3_20:
	WORD $0x2045; BYTE $0xc3 // and    r11b, r8b
	WORD $0x2044; BYTE $0xc9 // and    cl, r9b
	WORD $0xcb08             // or    bl, cl
	WORD $0x0148; BYTE $0xc7 // add    rdi, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x8949; BYTE $0xfc // mov    r12, rdi
	WORD $0xff49; BYTE $0xc4 // inc    r12
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB3_22
	WORD $0x8949; BYTE $0xfc // mov    r12, rdi

LBB3_22:
	LONG $0xfbb60f41         // movzx    edi, r11b
	WORD $0xcb20             // and    bl, cl
	WORD $0xd808             // or    al, bl
	WORD $0x0148; BYTE $0xd6 // add    rsi, rdx
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x8949; BYTE $0xf5 // mov    r13, rsi
	WORD $0xff49; BYTE $0xc5 // inc    r13
	WORD $0x940f; BYTE $0xd2 // sete    dl
	WORD $0xc084             // test    al, al
	JNE  LBB3_24
	WORD $0x8949; BYTE $0xf5 // mov    r13, rsi

LBB3_24:
	WORD $0xd020 // and    al, dl
	WORD $0xc108 // or    cl, al
	JNE  LBB3_25

LBB3_26:
	LONG $0x247c8948; BYTE $0x18 // mov    qword [rsp + 24], rdi
	LONG $0x24448b48; BYTE $0x28 // mov    rax, qword [rsp + 40]
	LONG $0x10408b4c             // mov    r8, qword [rax + 16]
	WORD $0x894c; BYTE $0xc1     // mov    rcx, r8
	LONG $0x247c8b48; BYTE $0x30 // mov    rdi, qword [rsp + 48]
	LONG $0xcfaf0f48             // imul    rcx, rdi
	QUAD $0x000000b82494894c     // mov    qword [rsp + 184], r10
	WORD $0x014c; BYTE $0xd1     // add    rcx, r10
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x58 // mul    qword [rsp + 88]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x48 // mul    qword [rsp + 72]
	WORD $0x8949; BYTE $0xd2     // mov    r10, rdx
	WORD $0x8949; BYTE $0xc6     // mov    r14, rax
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x70 // mul    qword [rsp + 112]
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx
	WORD $0x8948; BYTE $0xc3     // mov    rbx, rax
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x60 // mul    qword [rsp + 96]
	WORD $0x014d; BYTE $0xce     // add    r14, r9
	WORD $0x114c; BYTE $0xd3     // adc    rbx, r10
	QUAD $0x000000c0249c8948     // mov    qword [rsp + 192], rbx
	WORD $0x1148; BYTE $0xf0     // adc    rax, rsi
	QUAD $0x000000b024848948     // mov    qword [rsp + 176], rax
	LONG $0x00d28348             // adc    rdx, 0
	QUAD $0x0000009024948948     // mov    qword [rsp + 144], rdx
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	WORD $0xf748; BYTE $0xe7     // mul    rdi
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx
	QUAD $0x0000008024848948     // mov    qword [rsp + 128], rax
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0x2464f748; BYTE $0x68 // mul    qword [rsp + 104]
	WORD $0x8948; BYTE $0xd3     // mov    rbx, rdx
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0x2464f748; BYTE $0x40 // mul    qword [rsp + 64]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	WORD $0x8948; BYTE $0xc1     // mov    rcx, rax
	QUAD $0x000000a82484894c     // mov    qword [rsp + 168], r8
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0x2464f748; BYTE $0x78 // mul    qword [rsp + 120]
	WORD $0x0148; BYTE $0xf7     // add    rdi, rsi
	QUAD $0x0000009824bc8948     // mov    qword [rsp + 152], rdi
	WORD $0x1148; BYTE $0xd9     // adc    rcx, rbx
	QUAD $0x000000a0248c8948     // mov    qword [rsp + 160], rcx
	WORD $0x114c; BYTE $0xc8     // adc    rax, r9
	LONG $0x00d28348             // adc    rdx, 0
	LONG $0x24548948; BYTE $0x20 // mov    qword [rsp + 32], rdx
	WORD $0x014d; BYTE $0xf7     // add    r15, r14
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894d; BYTE $0xfa     // mov    r10, r15
	WORD $0xff49; BYTE $0xc2     // inc    r10
	LONG $0xd7940f40             // sete    dil
	QUAD $0x000000b8249c034c     // add    r11, qword [rsp + 184]
	WORD $0x894c; BYTE $0xda     // mov    rdx, r11
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB3_28
	WORD $0x894d; BYTE $0xfa     // mov    r10, r15

LBB3_28:
	WORD $0x2040; BYTE $0xfb // and    bl, dil
	WORD $0xd908             // or    cl, bl
	QUAD $0x000000c024a4034c // add    r12, qword [rsp + 192]
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x894c; BYTE $0xe7 // mov    rdi, r12
	WORD $0xff48; BYTE $0xc7 // inc    rdi
	LONG $0xd1940f41         // sete    r9b
	WORD $0xc984             // test    cl, cl
	JNE  LBB3_30
	WORD $0x894c; BYTE $0xe7 // mov    rdi, r12

LBB3_30:
	WORD $0x2044; BYTE $0xc9     // and    cl, r9b
	WORD $0xcb08                 // or    bl, cl
	QUAD $0x000000b024ac034c     // add    r13, qword [rsp + 176]
	LONG $0xd1920f41             // setb    r9b
	WORD $0x894d; BYTE $0xec     // mov    r12, r13
	WORD $0xff49; BYTE $0xc4     // inc    r12
	LONG $0xd0940f41             // sete    r8b
	WORD $0xdb84                 // test    bl, bl
	LONG $0x244c8b48; BYTE $0x18 // mov    rcx, qword [rsp + 24]
	JNE  LBB3_32
	WORD $0x894d; BYTE $0xec     // mov    r12, r13

LBB3_32:
	WORD $0x2044; BYTE $0xc3 // and    bl, r8b
	WORD $0x0841; BYTE $0xd9 // or    r9b, bl
	QUAD $0x00000090248c0348 // add    rcx, qword [rsp + 144]
	LONG $0xd7920f41         // setb    r15b
	WORD $0x8949; BYTE $0xce // mov    r14, rcx
	WORD $0xff49; BYTE $0xc6 // inc    r14
	LONG $0xd3940f41         // sete    r11b
	WORD $0x8445; BYTE $0xc9 // test    r9b, r9b
	JNE  LBB3_34
	WORD $0x8949; BYTE $0xce // mov    r14, rcx

LBB3_34:
	QUAD $0x000000982494034c // add    r10, qword [rsp + 152]
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	LONG $0xd0940f41         // sete    r8b
	QUAD $0x0000008024940348 // add    rdx, qword [rsp + 128]
	WORD $0x920f; BYTE $0xd3 // setb    bl
	JB   LBB3_36
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10

LBB3_36:
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	WORD $0x2045; BYTE $0xcb // and    r11b, r9b
	WORD $0x2044; BYTE $0xc3 // and    bl, r8b
	WORD $0xd908             // or    cl, bl
	QUAD $0x000000a024bc0348 // add    rdi, qword [rsp + 160]
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi
	WORD $0xff49; BYTE $0xc1 // inc    r9
	LONG $0xd6940f40         // sete    sil
	WORD $0xc984             // test    cl, cl
	JNE  LBB3_38
	WORD $0x8949; BYTE $0xf9 // mov    r9, rdi

LBB3_38:
	WORD $0x0845; BYTE $0xdf // or    r15b, r11b
	WORD $0x2040; BYTE $0xf1 // and    cl, sil
	WORD $0xcb08             // or    bl, cl
	WORD $0x0149; BYTE $0xc4 // add    r12, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x894d; BYTE $0xe5 // mov    r13, r12
	WORD $0xff49; BYTE $0xc5 // inc    r13
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB3_40
	WORD $0x894d; BYTE $0xe5 // mov    r13, r12

LBB3_40:
	LONG $0xf7b60f41             // movzx    esi, r15b
	WORD $0xcb20                 // and    bl, cl
	WORD $0xd808                 // or    al, bl
	LONG $0x2474034c; BYTE $0x20 // add    r14, qword [rsp + 32]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894d; BYTE $0xf7     // mov    r15, r14
	WORD $0xff49; BYTE $0xc7     // inc    r15
	WORD $0x940f; BYTE $0xd2     // sete    dl
	WORD $0xc084                 // test    al, al
	JNE  LBB3_42
	WORD $0x894d; BYTE $0xf7     // mov    r15, r14

LBB3_42:
	WORD $0xd020 // and    al, dl
	WORD $0xc108 // or    cl, al
	JNE  LBB3_43

LBB3_44:
	LONG $0x24748948; BYTE $0x18 // mov    qword [rsp + 24], rsi
	LONG $0x24448b48; BYTE $0x28 // mov    rax, qword [rsp + 40]
	LONG $0x18708b48             // mov    rsi, qword [rax + 24]
	WORD $0x8948; BYTE $0xf7     // mov    rdi, rsi
	LONG $0x245c8b48; BYTE $0x30 // mov    rbx, qword [rsp + 48]
	LONG $0xfbaf0f48             // imul    rdi, rbx
	QUAD $0x000000982494894c     // mov    qword [rsp + 152], r10
	WORD $0x014c; BYTE $0xd7     // add    rdi, r10
	WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x58 // mul    qword [rsp + 88]
	WORD $0x8949; BYTE $0xd0     // mov    r8, rdx
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x48 // mul    qword [rsp + 72]
	WORD $0x8949; BYTE $0xd2     // mov    r10, rdx
	WORD $0x8948; BYTE $0xc1     // mov    rcx, rax
	WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x70 // mul    qword [rsp + 112]
	WORD $0x8949; BYTE $0xd4     // mov    r12, rdx
	WORD $0x8949; BYTE $0xc6     // mov    r14, rax
	WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x60 // mul    qword [rsp + 96]
	WORD $0x014c; BYTE $0xc1     // add    rcx, r8
	WORD $0x114d; BYTE $0xd6     // adc    r14, r10
	WORD $0x114c; BYTE $0xe0     // adc    rax, r12
	QUAD $0x0000009024848948     // mov    qword [rsp + 144], rax
	LONG $0x00d28348             // adc    rdx, 0
	QUAD $0x0000008024948948     // mov    qword [rsp + 128], rdx
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	WORD $0xf748; BYTE $0xe3     // mul    rbx
	WORD $0x8949; BYTE $0xd0     // mov    r8, rdx
	LONG $0x24448948; BYTE $0x20 // mov    qword [rsp + 32], rax
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x68 // mul    qword [rsp + 104]
	WORD $0x8949; BYTE $0xd4     // mov    r12, rdx
	WORD $0x8948; BYTE $0xc3     // mov    rbx, rax
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x40 // mul    qword [rsp + 64]
	WORD $0x8949; BYTE $0xd2     // mov    r10, rdx
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	QUAD $0x000000a024b48948     // mov    qword [rsp + 160], rsi
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x78 // mul    qword [rsp + 120]
	WORD $0x014c; BYTE $0xc3     // add    rbx, r8
	LONG $0x245c8948; BYTE $0x30 // mov    qword [rsp + 48], rbx
	WORD $0x114c; BYTE $0xe7     // adc    rdi, r12
	LONG $0x247c8948; BYTE $0x68 // mov    qword [rsp + 104], rdi
	WORD $0x114c; BYTE $0xd0     // adc    rax, r10
	LONG $0x00d28348             // adc    rdx, 0
	LONG $0x24548948; BYTE $0x28 // mov    qword [rsp + 40], rdx
	WORD $0x0149; BYTE $0xc9     // add    r9, rcx
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894d; BYTE $0xcc     // mov    r12, r9
	WORD $0xff49; BYTE $0xc4     // inc    r12
	LONG $0xd6940f40             // sete    sil
	QUAD $0x00000098249c034c     // add    r11, qword [rsp + 152]
	WORD $0x894c; BYTE $0xda     // mov    rdx, r11
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB3_46
	WORD $0x894d; BYTE $0xcc     // mov    r12, r9

LBB3_46:
	WORD $0x2040; BYTE $0xf3 // and    bl, sil
	WORD $0xd908             // or    cl, bl
	WORD $0x014d; BYTE $0xf5 // add    r13, r14
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x894d; BYTE $0xe8 // mov    r8, r13
	WORD $0xff49; BYTE $0xc0 // inc    r8
	LONG $0xd6940f40         // sete    sil
	WORD $0xc984             // test    cl, cl
	JNE  LBB3_48
	WORD $0x894d; BYTE $0xe8 // mov    r8, r13

LBB3_48:
	WORD $0x2040; BYTE $0xf1 // and    cl, sil
	WORD $0xcb08             // or    bl, cl
	QUAD $0x0000009024bc034c // add    r15, qword [rsp + 144]
	LONG $0xd2920f41         // setb    r10b
	WORD $0x894c; BYTE $0xff // mov    rdi, r15
	WORD $0xff48; BYTE $0xc7 // inc    rdi
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB3_50
	WORD $0x894c; BYTE $0xff // mov    rdi, r15

LBB3_50:
	WORD $0xcb20                 // and    bl, cl
	WORD $0x0841; BYTE $0xda     // or    r10b, bl
	LONG $0x244c8b48; BYTE $0x18 // mov    rcx, qword [rsp + 24]
	QUAD $0x00000080248c0348     // add    rcx, qword [rsp + 128]
	LONG $0xd1920f41             // setb    r9b
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xff48; BYTE $0xc6     // inc    rsi
	LONG $0xd6940f41             // sete    r14b
	WORD $0x8445; BYTE $0xd2     // test    r10b, r10b
	JNE  LBB3_52
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx

LBB3_52:
	LONG $0x2464034c; BYTE $0x30 // add    r12, qword [rsp + 48]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894c; BYTE $0xe3     // mov    rbx, r12
	WORD $0xff48; BYTE $0xc3     // inc    rbx
	LONG $0x245c8948; BYTE $0x30 // mov    qword [rsp + 48], rbx
	LONG $0xd3940f41             // sete    r11b
	LONG $0x24540348; BYTE $0x20 // add    rdx, qword [rsp + 32]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB3_54
	LONG $0x2464894c; BYTE $0x30 // mov    qword [rsp + 48], r12

LBB3_54:
	WORD $0x2045; BYTE $0xd6     // and    r14b, r10b
	WORD $0x2044; BYTE $0xdb     // and    bl, r11b
	WORD $0xd908                 // or    cl, bl
	LONG $0x2444034c; BYTE $0x68 // add    r8, qword [rsp + 104]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x894d; BYTE $0xc2     // mov    r10, r8
	WORD $0xff49; BYTE $0xc2     // inc    r10
	LONG $0xd3940f41             // sete    r11b
	WORD $0xc984                 // test    cl, cl
	JNE  LBB3_56
	WORD $0x894d; BYTE $0xc2     // mov    r10, r8

LBB3_56:
	WORD $0x0845; BYTE $0xf1 // or    r9b, r14b
	WORD $0x2044; BYTE $0xd9 // and    cl, r11b
	WORD $0xcb08             // or    bl, cl
	WORD $0x0148; BYTE $0xc7 // add    rdi, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x8949; BYTE $0xf8 // mov    r8, rdi
	WORD $0xff49; BYTE $0xc0 // inc    r8
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB3_58
	WORD $0x8949; BYTE $0xf8 // mov    r8, rdi

LBB3_58:
	LONG $0xf9b60f41             // movzx    edi, r9b
	WORD $0xcb20                 // and    bl, cl
	WORD $0xd808                 // or    al, bl
	LONG $0x24740348; BYTE $0x28 // add    rsi, qword [rsp + 40]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x8948; BYTE $0xf3     // mov    rbx, rsi
	WORD $0xff48; BYTE $0xc3     // inc    rbx
	WORD $0x940f; BYTE $0xd2     // sete    dl
	WORD $0xc084                 // test    al, al
	JNE  LBB3_60
	WORD $0x8948; BYTE $0xf3     // mov    rbx, rsi

LBB3_60:
	WORD $0xd020                 // and    al, dl
	WORD $0xc108                 // or    cl, al
	JNE  LBB3_61
	WORD $0x8948; BYTE $0xd8     // mov    rax, rbx
	LONG $0x24442b48; BYTE $0x60 // sub    rax, qword [rsp + 96]
	JA   LBB3_71

LBB3_63:
	WORD $0x8548; BYTE $0xff     // test    rdi, rdi
	JNE  LBB3_71
	LONG $0x245c3b48; BYTE $0x60 // cmp    rbx, qword [rsp + 96]
	JAE  LBB3_70

LBB3_65:
	LONG $0x245c8948; BYTE $0x78 // mov    qword [rsp + 120], rbx
	LONG $0x2444894c; BYTE $0x68 // mov    qword [rsp + 104], r8
	LONG $0x2454894c; BYTE $0x28 // mov    qword [rsp + 40], r10
	JMP  LBB3_76

LBB3_70:
	LONG $0x24443b4c; BYTE $0x70 // cmp    r8, qword [rsp + 112]
	JBE  LBB3_66

LBB3_71:
	LONG $0x24542b4c; BYTE $0x48 // sub    r10, qword [rsp + 72]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894c; BYTE $0xd2     // mov    rdx, r10
	LONG $0x01ea8348             // sub    rdx, 1
	LONG $0x24548948; BYTE $0x28 // mov    qword [rsp + 40], rdx
	WORD $0x920f; BYTE $0xd2     // setb    dl
	LONG $0x24748b48; BYTE $0x30 // mov    rsi, qword [rsp + 48]
	LONG $0x24742b48; BYTE $0x58 // sub    rsi, qword [rsp + 88]
	LONG $0x24748948; BYTE $0x30 // mov    qword [rsp + 48], rsi
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB3_73
	LONG $0x2454894c; BYTE $0x28 // mov    qword [rsp + 40], r10

LBB3_73:
	WORD $0xd320                 // and    bl, dl
	WORD $0xd908                 // or    cl, bl
	LONG $0x24442b4c; BYTE $0x70 // sub    r8, qword [rsp + 112]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x894c; BYTE $0xc2     // mov    rdx, r8
	LONG $0x01ea8348             // sub    rdx, 1
	LONG $0xd6920f40             // setb    sil
	WORD $0xc984                 // test    cl, cl
	JNE  LBB3_75
	WORD $0x894c; BYTE $0xc2     // mov    rdx, r8

LBB3_75:
	WORD $0x2040; BYTE $0xf1     // and    cl, sil
	WORD $0xcb08                 // or    bl, cl
	WORD $0xb60f; BYTE $0xcb     // movzx    ecx, bl
	WORD $0x2948; BYTE $0xc8     // sub    rax, rcx
	LONG $0x24448948; BYTE $0x78 // mov    qword [rsp + 120], rax
	LONG $0x24548948; BYTE $0x68 // mov    qword [rsp + 104], rdx

LBB3_76:
	LONG $0x244c8b4c; BYTE $0x50 // mov    r9, qword [rsp + 80]
	WORD $0x8b49; BYTE $0x19     // mov    rbx, qword [r9]
	WORD $0x8948; BYTE $0xd9     // mov    rcx, rbx
	QUAD $0x0000008824848b4c     // mov    r8, qword [rsp + 136]
	LONG $0xc8af0f49             // imul    rcx, r8
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x58 // mul    qword [rsp + 88]
	WORD $0x8949; BYTE $0xd2     // mov    r10, rdx
	QUAD $0x0000008024848948     // mov    qword [rsp + 128], rax
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x48 // mul    qword [rsp + 72]
	WORD $0x8949; BYTE $0xd6     // mov    r14, rdx
	WORD $0x8949; BYTE $0xc7     // mov    r15, rax
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x70 // mul    qword [rsp + 112]
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x60 // mul    qword [rsp + 96]
	WORD $0x8949; BYTE $0xc5     // mov    r13, rax
	WORD $0x8949; BYTE $0xd3     // mov    r11, rdx
	LONG $0x08498b49             // mov    rcx, qword [r9 + 8]
	WORD $0x014d; BYTE $0xd7     // add    r15, r10
	WORD $0x114c; BYTE $0xf7     // adc    rdi, r14
	WORD $0x1149; BYTE $0xf5     // adc    r13, rsi
	LONG $0x00d38349             // adc    r11, 0
	LONG $0x245c8948; BYTE $0x40 // mov    qword [rsp + 64], rbx
	WORD $0x8948; BYTE $0xd8     // mov    rax, rbx
	WORD $0xf749; BYTE $0xe0     // mul    r8
	WORD $0x8949; BYTE $0xd6     // mov    r14, rdx
	WORD $0x8949; BYTE $0xc2     // mov    r10, rax
	LONG $0x244c8948; BYTE $0x18 // mov    qword [rsp + 24], rcx
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	WORD $0xf749; BYTE $0xe0     // mul    r8
	WORD $0x8948; BYTE $0xc3     // mov    rbx, rax
	WORD $0x8948; BYTE $0xd1     // mov    rcx, rdx
	LONG $0x10418b49             // mov    rax, qword [r9 + 16]
	LONG $0x24448948; BYTE $0x20 // mov    qword [rsp + 32], rax
	WORD $0xf749; BYTE $0xe0     // mul    r8
	WORD $0x8948; BYTE $0xc6     // mov    rsi, rax
	WORD $0x8949; BYTE $0xd4     // mov    r12, rdx
	LONG $0x18418b49             // mov    rax, qword [r9 + 24]
	LONG $0x24448948; BYTE $0x50 // mov    qword [rsp + 80], rax
	WORD $0xf749; BYTE $0xe0     // mul    r8
	WORD $0x014c; BYTE $0xf3     // add    rbx, r14
	WORD $0x1148; BYTE $0xce     // adc    rsi, rcx
	WORD $0x114c; BYTE $0xe0     // adc    rax, r12
	LONG $0x00d28348             // adc    rdx, 0
	WORD $0x014c; BYTE $0xfb     // add    rbx, r15
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x8949; BYTE $0xd8     // mov    r8, rbx
	WORD $0xff49; BYTE $0xc0     // inc    r8
	LONG $0xd1940f41             // sete    r9b
	QUAD $0x000000802494034c     // add    r10, qword [rsp + 128]
	LONG $0xd2920f41             // setb    r10b
	JB   LBB3_78
	WORD $0x8949; BYTE $0xd8     // mov    r8, rbx

LBB3_78:
	WORD $0x2045; BYTE $0xca // and    r10b, r9b
	WORD $0x0844; BYTE $0xd1 // or    cl, r10b
	WORD $0x0148; BYTE $0xf7 // add    rdi, rsi
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x8949; BYTE $0xfa // mov    r10, rdi
	WORD $0xff49; BYTE $0xc2 // inc    r10
	LONG $0xd6940f40         // sete    sil
	WORD $0xc984             // test    cl, cl
	JNE  LBB3_80
	WORD $0x8949; BYTE $0xfa // mov    r10, rdi

LBB3_80:
	WORD $0x2040; BYTE $0xf1 // and    cl, sil
	WORD $0xcb08             // or    bl, cl
	WORD $0x0149; BYTE $0xc5 // add    r13, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x894d; BYTE $0xe9 // mov    r9, r13
	WORD $0xff49; BYTE $0xc1 // inc    r9
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB3_82
	WORD $0x894d; BYTE $0xe9 // mov    r9, r13

LBB3_82:
	WORD $0xcb20             // and    bl, cl
	WORD $0xd808             // or    al, bl
	WORD $0x0149; BYTE $0xd3 // add    r11, rdx
	LONG $0xd5920f41         // setb    r13b
	WORD $0x894d; BYTE $0xde // mov    r14, r11
	WORD $0xff49; BYTE $0xc6 // inc    r14
	WORD $0x940f; BYTE $0xd3 // sete    bl
	WORD $0xc084             // test    al, al
	JNE  LBB3_84
	WORD $0x894d; BYTE $0xde // mov    r14, r11

LBB3_84:
	WORD $0xc320                 // and    bl, al
	LONG $0x245c8b4c; BYTE $0x40 // mov    r11, qword [rsp + 64]
	WORD $0x894c; BYTE $0xd9     // mov    rcx, r11
	LONG $0x24648b4c; BYTE $0x38 // mov    r12, qword [rsp + 56]
	LONG $0xccaf0f49             // imul    rcx, r12
	WORD $0x014c; BYTE $0xc1     // add    rcx, r8
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x58 // mul    qword [rsp + 88]
	QUAD $0x000000b82484894c     // mov    qword [rsp + 184], r8
	QUAD $0x0000008824948948     // mov    qword [rsp + 136], rdx
	QUAD $0x000000f824848948     // mov    qword [rsp + 248], rax
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x48 // mul    qword [rsp + 72]
	WORD $0x8949; BYTE $0xd0     // mov    r8, rdx
	WORD $0x8949; BYTE $0xc7     // mov    r15, rax
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x70 // mul    qword [rsp + 112]
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx
	WORD $0x0841; BYTE $0xdd     // or    r13b, bl
	QUAD $0x0000009824ac8844     // mov    byte [rsp + 152], r13b
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x60 // mul    qword [rsp + 96]
	WORD $0x8949; BYTE $0xd5     // mov    r13, rdx
	QUAD $0x0000008824bc034c     // add    r15, qword [rsp + 136]
	WORD $0x114c; BYTE $0xc7     // adc    rdi, r8
	QUAD $0x000000c024bc8948     // mov    qword [rsp + 192], rdi
	WORD $0x1148; BYTE $0xf0     // adc    rax, rsi
	QUAD $0x000000b024848948     // mov    qword [rsp + 176], rax
	LONG $0x00d58349             // adc    r13, 0
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	QUAD $0x000000f8249c8b4c     // mov    r11, qword [rsp + 248]
	WORD $0xf749; BYTE $0xe4     // mul    r12
	WORD $0x8948; BYTE $0xd7     // mov    rdi, rdx
	QUAD $0x0000009024848948     // mov    qword [rsp + 144], rax
	LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
	WORD $0xf749; BYTE $0xe4     // mul    r12
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x24448b48; BYTE $0x20 // mov    rax, qword [rsp + 32]
	WORD $0xf749; BYTE $0xe4     // mul    r12
	WORD $0x8948; BYTE $0xd1     // mov    rcx, rdx
	WORD $0x8948; BYTE $0xc3     // mov    rbx, rax
	LONG $0x24448b48; BYTE $0x50 // mov    rax, qword [rsp + 80]
	WORD $0xf749; BYTE $0xe4     // mul    r12
	WORD $0x0149; BYTE $0xf8     // add    r8, rdi
	WORD $0x1148; BYTE $0xf3     // adc    rbx, rsi
	QUAD $0x00000080249c8948     // mov    qword [rsp + 128], rbx
	WORD $0x1148; BYTE $0xc8     // adc    rax, rcx
	QUAD $0x0000008824848948     // mov    qword [rsp + 136], rax
	LONG $0x00d28348             // adc    rdx, 0
	LONG $0x24548948; BYTE $0x38 // mov    qword [rsp + 56], rdx
	WORD $0x014d; BYTE $0xfa     // add    r10, r15
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894d; BYTE $0xd7     // mov    r15, r10
	WORD $0xff49; BYTE $0xc7     // inc    r15
	WORD $0x940f; BYTE $0xd3     // sete    bl
	QUAD $0x000000b8249c034c     // add    r11, qword [rsp + 184]
	WORD $0x920f; BYTE $0xd2     // setb    dl
	JB   LBB3_86
	WORD $0x894d; BYTE $0xd7     // mov    r15, r10

LBB3_86:
	QUAD $0x000000982484b60f // movzx    eax, byte [rsp + 152]
	WORD $0xda20             // and    dl, bl
	WORD $0xd108             // or    cl, dl
	QUAD $0x000000c0248c034c // add    r9, qword [rsp + 192]
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x894c; BYTE $0xce // mov    rsi, r9
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	WORD $0x940f; BYTE $0xd2 // sete    dl
	WORD $0xc984             // test    cl, cl
	JNE  LBB3_88
	WORD $0x894c; BYTE $0xce // mov    rsi, r9

LBB3_88:
	WORD $0xd120             // and    cl, dl
	WORD $0xcb08             // or    bl, cl
	QUAD $0x000000b024b4034c // add    r14, qword [rsp + 176]
	LONG $0xd2920f41         // setb    r10b
	WORD $0x894c; BYTE $0xf7 // mov    rdi, r14
	WORD $0xff48; BYTE $0xc7 // inc    rdi
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB3_90
	WORD $0x894c; BYTE $0xf7 // mov    rdi, r14

LBB3_90:
	WORD $0xcb20             // and    bl, cl
	WORD $0x0841; BYTE $0xda // or    r10b, bl
	WORD $0x0149; BYTE $0xc5 // add    r13, rax
	WORD $0x894d; BYTE $0xec // mov    r12, r13
	WORD $0xff49; BYTE $0xc4 // inc    r12
	LONG $0xd6940f41         // sete    r14b
	WORD $0x8445; BYTE $0xd2 // test    r10b, r10b
	JNE  LBB3_92
	WORD $0x894d; BYTE $0xec // mov    r12, r13

LBB3_92:
	WORD $0x014d; BYTE $0xc7 // add    r15, r8
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x894d; BYTE $0xf8 // mov    r8, r15
	WORD $0xff49; BYTE $0xc0 // inc    r8
	WORD $0x940f; BYTE $0xd2 // sete    dl
	QUAD $0x00000090249c034c // add    r11, qword [rsp + 144]
	WORD $0x920f; BYTE $0xd0 // setb    al
	JB   LBB3_94
	WORD $0x894d; BYTE $0xf8 // mov    r8, r15

LBB3_94:
	WORD $0xd020             // and    al, dl
	WORD $0xc108             // or    cl, al
	QUAD $0x0000008024b40348 // add    rsi, qword [rsp + 128]
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xff49; BYTE $0xc1 // inc    r9
	WORD $0x940f; BYTE $0xd2 // sete    dl
	WORD $0xc984             // test    cl, cl
	JNE  LBB3_96
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi

LBB3_96:
	WORD $0x2045; BYTE $0xd6 // and    r14b, r10b
	WORD $0xd120             // and    cl, dl
	WORD $0xcb08             // or    bl, cl
	QUAD $0x0000008824bc0348 // add    rdi, qword [rsp + 136]
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x8949; BYTE $0xfb // mov    r11, rdi
	WORD $0xff49; BYTE $0xc3 // inc    r11
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB3_98
	WORD $0x8949; BYTE $0xfb // mov    r11, rdi

LBB3_98:
	LONG $0xf6b60f41             // movzx    esi, r14b
	WORD $0xcb20                 // and    bl, cl
	WORD $0xd808                 // or    al, bl
	LONG $0x2464034c; BYTE $0x38 // add    r12, qword [rsp + 56]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894d; BYTE $0xe6     // mov    r14, r12
	WORD $0xff49; BYTE $0xc6     // inc    r14
	WORD $0x940f; BYTE $0xd2     // sete    dl
	WORD $0xc084                 // test    al, al
	JNE  LBB3_100
	WORD $0x894d; BYTE $0xe6     // mov    r14, r12

LBB3_100:
	WORD $0xd020  // and    al, dl
	WORD $0xc108  // or    cl, al
	JNE  LBB3_101

LBB3_102:
	LONG $0x24748948; BYTE $0x38 // mov    qword [rsp + 56], rsi
	LONG $0x246c8b4c; BYTE $0x40 // mov    r13, qword [rsp + 64]
	WORD $0x894c; BYTE $0xef     // mov    rdi, r13
	QUAD $0x000000a824bc8b4c     // mov    r15, qword [rsp + 168]
	LONG $0xffaf0f49             // imul    rdi, r15
	WORD $0x014c; BYTE $0xc7     // add    rdi, r8
	WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x58 // mul    qword [rsp + 88]
	QUAD $0x000000b02484894c     // mov    qword [rsp + 176], r8
	WORD $0x8949; BYTE $0xd0     // mov    r8, rdx
	WORD $0x8949; BYTE $0xc4     // mov    r12, rax
	WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x48 // mul    qword [rsp + 72]
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx
	WORD $0x8948; BYTE $0xc1     // mov    rcx, rax
	WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x70 // mul    qword [rsp + 112]
	WORD $0x8948; BYTE $0xd3     // mov    rbx, rdx
	WORD $0x8949; BYTE $0xc2     // mov    r10, rax
	WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x60 // mul    qword [rsp + 96]
	WORD $0x014c; BYTE $0xc1     // add    rcx, r8
	WORD $0x1149; BYTE $0xf2     // adc    r10, rsi
	WORD $0x1148; BYTE $0xd8     // adc    rax, rbx
	QUAD $0x0000009824848948     // mov    qword [rsp + 152], rax
	LONG $0x00d28348             // adc    rdx, 0
	QUAD $0x0000009024948948     // mov    qword [rsp + 144], rdx
	WORD $0x894c; BYTE $0xe8     // mov    rax, r13
	WORD $0x894d; BYTE $0xe5     // mov    r13, r12
	WORD $0xf749; BYTE $0xe7     // mul    r15
	WORD $0x8949; BYTE $0xd4     // mov    r12, rdx
	QUAD $0x0000008024848948     // mov    qword [rsp + 128], rax
	LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
	WORD $0xf749; BYTE $0xe7     // mul    r15
	WORD $0x8948; BYTE $0xd3     // mov    rbx, rdx
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	LONG $0x24448b48; BYTE $0x20 // mov    rax, qword [rsp + 32]
	WORD $0xf749; BYTE $0xe7     // mul    r15
	WORD $0x8948; BYTE $0xd7     // mov    rdi, rdx
	WORD $0x8948; BYTE $0xc6     // mov    rsi, rax
	LONG $0x24448b48; BYTE $0x50 // mov    rax, qword [rsp + 80]
	WORD $0xf749; BYTE $0xe7     // mul    r15
	WORD $0x014d; BYTE $0xe0     // add    r8, r12
	WORD $0x1148; BYTE $0xde     // adc    rsi, rbx
	QUAD $0x0000008824b48948     // mov    qword [rsp + 136], rsi
	WORD $0x1148; BYTE $0xf8     // adc    rax, rdi
	LONG $0x00d28348             // adc    rdx, 0
	WORD $0x0149; BYTE $0xc9     // add    r9, rcx
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	WORD $0xff48; BYTE $0xc7     // inc    rdi
	LONG $0xd6940f40             // sete    sil
	QUAD $0x000000b024ac034c     // add    r13, qword [rsp + 176]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB3_104
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9

LBB3_104:
	WORD $0x2040; BYTE $0xf3 // and    bl, sil
	WORD $0xd908             // or    cl, bl
	WORD $0x014d; BYTE $0xd3 // add    r11, r10
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x894c; BYTE $0xde // mov    rsi, r11
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	LONG $0xd1940f41         // sete    r9b
	WORD $0xc984             // test    cl, cl
	JNE  LBB3_106
	WORD $0x894c; BYTE $0xde // mov    rsi, r11

LBB3_106:
	WORD $0x2044; BYTE $0xc9     // and    cl, r9b
	WORD $0xcb08                 // or    bl, cl
	QUAD $0x0000009824b4034c     // add    r14, qword [rsp + 152]
	LONG $0xd1920f41             // setb    r9b
	WORD $0x894d; BYTE $0xf4     // mov    r12, r14
	WORD $0xff49; BYTE $0xc4     // inc    r12
	LONG $0xd2940f41             // sete    r10b
	WORD $0xdb84                 // test    bl, bl
	LONG $0x244c8b48; BYTE $0x38 // mov    rcx, qword [rsp + 56]
	JNE  LBB3_108
	WORD $0x894d; BYTE $0xf4     // mov    r12, r14

LBB3_108:
	WORD $0x2044; BYTE $0xd3 // and    bl, r10b
	WORD $0x0841; BYTE $0xd9 // or    r9b, bl
	QUAD $0x00000090248c0348 // add    rcx, qword [rsp + 144]
	LONG $0xd3920f41         // setb    r11b
	WORD $0x8949; BYTE $0xce // mov    r14, rcx
	WORD $0xff49; BYTE $0xc6 // inc    r14
	LONG $0xd2940f41         // sete    r10b
	WORD $0x8445; BYTE $0xc9 // test    r9b, r9b
	JNE  LBB3_110
	WORD $0x8949; BYTE $0xce // mov    r14, rcx

LBB3_110:
	WORD $0x014c; BYTE $0xc7 // add    rdi, r8
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x8949; BYTE $0xf8 // mov    r8, rdi
	WORD $0xff49; BYTE $0xc0 // inc    r8
	LONG $0xd7940f41         // sete    r15b
	QUAD $0x0000008024ac034c // add    r13, qword [rsp + 128]
	WORD $0x920f; BYTE $0xd3 // setb    bl
	JB   LBB3_112
	WORD $0x8949; BYTE $0xf8 // mov    r8, rdi

LBB3_112:
	WORD $0x2045; BYTE $0xca // and    r10b, r9b
	WORD $0x2044; BYTE $0xfb // and    bl, r15b
	WORD $0xd908             // or    cl, bl
	QUAD $0x0000008824b40348 // add    rsi, qword [rsp + 136]
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	WORD $0xff49; BYTE $0xc1 // inc    r9
	LONG $0xd7940f40         // sete    dil
	WORD $0xc984             // test    cl, cl
	JNE  LBB3_114
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi

LBB3_114:
	WORD $0x0845; BYTE $0xd3 // or    r11b, r10b
	WORD $0x2040; BYTE $0xf9 // and    cl, dil
	WORD $0xcb08             // or    bl, cl
	WORD $0x0149; BYTE $0xc4 // add    r12, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x894d; BYTE $0xe2 // mov    r10, r12
	WORD $0xff49; BYTE $0xc2 // inc    r10
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB3_116
	WORD $0x894d; BYTE $0xe2 // mov    r10, r12

LBB3_116:
	LONG $0xf3b60f41         // movzx    esi, r11b
	WORD $0xcb20             // and    bl, cl
	WORD $0xd808             // or    al, bl
	WORD $0x0149; BYTE $0xd6 // add    r14, rdx
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x894d; BYTE $0xf3 // mov    r11, r14
	WORD $0xff49; BYTE $0xc3 // inc    r11
	WORD $0x940f; BYTE $0xd2 // sete    dl
	WORD $0xc084             // test    al, al
	JNE  LBB3_118
	WORD $0x894d; BYTE $0xf3 // mov    r11, r14

LBB3_118:
	WORD $0xd020  // and    al, dl
	WORD $0xc108  // or    cl, al
	JNE  LBB3_119

LBB3_120:
	LONG $0x24748948; BYTE $0x38 // mov    qword [rsp + 56], rsi
	LONG $0x247c8b48; BYTE $0x40 // mov    rdi, qword [rsp + 64]
	WORD $0x8948; BYTE $0xfe     // mov    rsi, rdi
	QUAD $0x000000a0249c8b48     // mov    rbx, qword [rsp + 160]
	LONG $0xf3af0f48             // imul    rsi, rbx
	WORD $0x014c; BYTE $0xc6     // add    rsi, r8
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x58 // mul    qword [rsp + 88]
	QUAD $0x000000902484894c     // mov    qword [rsp + 144], r8
	WORD $0x8949; BYTE $0xd0     // mov    r8, rdx
	WORD $0x8949; BYTE $0xc4     // mov    r12, rax
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x48 // mul    qword [rsp + 72]
	WORD $0x8949; BYTE $0xd6     // mov    r14, rdx
	WORD $0x8948; BYTE $0xc1     // mov    rcx, rax
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x70 // mul    qword [rsp + 112]
	WORD $0x8949; BYTE $0xd7     // mov    r15, rdx
	WORD $0x8949; BYTE $0xc5     // mov    r13, rax
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x2464f748; BYTE $0x60 // mul    qword [rsp + 96]
	WORD $0x014c; BYTE $0xc1     // add    rcx, r8
	WORD $0x114d; BYTE $0xf5     // adc    r13, r14
	WORD $0x114c; BYTE $0xf8     // adc    rax, r15
	QUAD $0x0000008024848948     // mov    qword [rsp + 128], rax
	LONG $0x00d28348             // adc    rdx, 0
	QUAD $0x000000a824948948     // mov    qword [rsp + 168], rdx
	WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
	WORD $0xf748; BYTE $0xe3     // mul    rbx
	WORD $0x8949; BYTE $0xd6     // mov    r14, rdx
	QUAD $0x0000008824848948     // mov    qword [rsp + 136], rax
	LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
	WORD $0xf748; BYTE $0xe3     // mul    rbx
	WORD $0x8949; BYTE $0xd0     // mov    r8, rdx
	WORD $0x8949; BYTE $0xc7     // mov    r15, rax
	LONG $0x24448b48; BYTE $0x20 // mov    rax, qword [rsp + 32]
	WORD $0xf748; BYTE $0xe3     // mul    rbx
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	LONG $0x24448b48; BYTE $0x50 // mov    rax, qword [rsp + 80]
	WORD $0xf748; BYTE $0xe3     // mul    rbx
	WORD $0x014d; BYTE $0xf7     // add    r15, r14
	WORD $0x114c; BYTE $0xc7     // adc    rdi, r8
	LONG $0x247c8948; BYTE $0x40 // mov    qword [rsp + 64], rdi
	WORD $0x1148; BYTE $0xf0     // adc    rax, rsi
	LONG $0x00d28348             // adc    rdx, 0
	WORD $0x0149; BYTE $0xc9     // add    r9, rcx
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894d; BYTE $0xce     // mov    r14, r9
	WORD $0xff49; BYTE $0xc6     // inc    r14
	LONG $0xd6940f40             // sete    sil
	QUAD $0x0000009024a4034c     // add    r12, qword [rsp + 144]
	WORD $0x894d; BYTE $0xe0     // mov    r8, r12
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB3_122
	WORD $0x894d; BYTE $0xce     // mov    r14, r9

LBB3_122:
	WORD $0x2040; BYTE $0xf3 // and    bl, sil
	WORD $0xd908             // or    cl, bl
	WORD $0x014d; BYTE $0xea // add    r10, r13
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	LONG $0xd7940f40         // sete    dil
	WORD $0xc984             // test    cl, cl
	JNE  LBB3_124
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10

LBB3_124:
	WORD $0x2040; BYTE $0xf9     // and    cl, dil
	WORD $0xcb08                 // or    bl, cl
	QUAD $0x00000080249c034c     // add    r11, qword [rsp + 128]
	LONG $0xd2920f41             // setb    r10b
	WORD $0x894c; BYTE $0xdf     // mov    rdi, r11
	WORD $0xff48; BYTE $0xc7     // inc    rdi
	LONG $0xd1940f41             // sete    r9b
	WORD $0xdb84                 // test    bl, bl
	LONG $0x244c8b48; BYTE $0x38 // mov    rcx, qword [rsp + 56]
	JNE  LBB3_126
	WORD $0x894c; BYTE $0xdf     // mov    rdi, r11

LBB3_126:
	WORD $0x2044; BYTE $0xcb // and    bl, r9b
	WORD $0x0841; BYTE $0xda // or    r10b, bl
	QUAD $0x000000a8248c0348 // add    rcx, qword [rsp + 168]
	LONG $0xd1920f41         // setb    r9b
	WORD $0x8949; BYTE $0xcc // mov    r12, rcx
	WORD $0xff49; BYTE $0xc4 // inc    r12
	LONG $0xd3940f41         // sete    r11b
	WORD $0x8445; BYTE $0xd2 // test    r10b, r10b
	JNE  LBB3_128
	WORD $0x8949; BYTE $0xcc // mov    r12, rcx

LBB3_128:
	WORD $0x014d; BYTE $0xfe // add    r14, r15
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x894d; BYTE $0xf5 // mov    r13, r14
	WORD $0xff49; BYTE $0xc5 // inc    r13
	LONG $0xd7940f41         // sete    r15b
	QUAD $0x000000882484034c // add    r8, qword [rsp + 136]
	WORD $0x920f; BYTE $0xd3 // setb    bl
	JB   LBB3_130
	WORD $0x894d; BYTE $0xf5 // mov    r13, r14

LBB3_130:
	WORD $0x2045; BYTE $0xd3     // and    r11b, r10b
	WORD $0x2044; BYTE $0xfb     // and    bl, r15b
	WORD $0xd908                 // or    cl, bl
	LONG $0x24740348; BYTE $0x40 // add    rsi, qword [rsp + 64]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x8949; BYTE $0xf0     // mov    r8, rsi
	WORD $0xff49; BYTE $0xc0     // inc    r8
	LONG $0xd2940f41             // sete    r10b
	WORD $0xc984                 // test    cl, cl
	JNE  LBB3_132
	WORD $0x8949; BYTE $0xf0     // mov    r8, rsi

LBB3_132:
	WORD $0x0845; BYTE $0xd9 // or    r9b, r11b
	WORD $0x2044; BYTE $0xd1 // and    cl, r10b
	WORD $0xcb08             // or    bl, cl
	WORD $0x0148; BYTE $0xc7 // add    rdi, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x8949; BYTE $0xfa // mov    r10, rdi
	WORD $0xff49; BYTE $0xc2 // inc    r10
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB3_134
	WORD $0x8949; BYTE $0xfa // mov    r10, rdi

LBB3_134:
	LONG $0xf9b60f41         // movzx    edi, r9b
	WORD $0xcb20             // and    bl, cl
	WORD $0xd808             // or    al, bl
	WORD $0x0149; BYTE $0xd4 // add    r12, rdx
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x894c; BYTE $0xe6 // mov    rsi, r12
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	WORD $0x940f; BYTE $0xd2 // sete    dl
	WORD $0xc084             // test    al, al
	JNE  LBB3_136
	WORD $0x894c; BYTE $0xe6 // mov    rsi, r12

LBB3_136:
	WORD $0xd020                 // and    al, dl
	WORD $0xc108                 // or    cl, al
	JNE  LBB3_137
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x24442b48; BYTE $0x60 // sub    rax, qword [rsp + 96]
	JA   LBB3_147

LBB3_139:
	WORD $0x8548; BYTE $0xff     // test    rdi, rdi
	JNE  LBB3_147
	LONG $0x24743b48; BYTE $0x60 // cmp    rsi, qword [rsp + 96]
	JAE  LBB3_146

LBB3_141:
	LONG $0x2454894c; BYTE $0x20 // mov    qword [rsp + 32], r10
	LONG $0x24748948; BYTE $0x18 // mov    qword [rsp + 24], rsi
	LONG $0x2444894c; BYTE $0x50 // mov    qword [rsp + 80], r8
	JMP  LBB3_152

LBB3_146:
	LONG $0x24543b4c; BYTE $0x70 // cmp    r10, qword [rsp + 112]
	JBE  LBB3_142

LBB3_147:
	LONG $0x24442b4c; BYTE $0x48 // sub    r8, qword [rsp + 72]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894c; BYTE $0xc7     // mov    rdi, r8
	LONG $0x01ef8348             // sub    rdi, 1
	WORD $0x920f; BYTE $0xd2     // setb    dl
	LONG $0x246c2b4c; BYTE $0x58 // sub    r13, qword [rsp + 88]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB3_149
	WORD $0x894c; BYTE $0xc7     // mov    rdi, r8

LBB3_149:
	WORD $0xd320                 // and    bl, dl
	WORD $0xd908                 // or    cl, bl
	LONG $0x24542b4c; BYTE $0x70 // sub    r10, qword [rsp + 112]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x894c; BYTE $0xd2     // mov    rdx, r10
	LONG $0x01ea8348             // sub    rdx, 1
	LONG $0xd6920f40             // setb    sil
	WORD $0xc984                 // test    cl, cl
	JNE  LBB3_151
	WORD $0x894c; BYTE $0xd2     // mov    rdx, r10

LBB3_151:
	LONG $0x247c8948; BYTE $0x50 // mov    qword [rsp + 80], rdi
	WORD $0x2040; BYTE $0xf1     // and    cl, sil
	WORD $0xcb08                 // or    bl, cl
	WORD $0xb60f; BYTE $0xcb     // movzx    ecx, bl
	WORD $0x2948; BYTE $0xc8     // sub    rax, rcx
	LONG $0x24448948; BYTE $0x18 // mov    qword [rsp + 24], rax
	LONG $0x24548948; BYTE $0x20 // mov    qword [rsp + 32], rdx

LBB3_152:
	WORD $0x894c; BYTE $0xe9     // mov    rcx, r13
	LONG $0x245c8b48; BYTE $0x30 // mov    rbx, qword [rsp + 48]
	LONG $0xcbaf0f48             // imul    rcx, rbx
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x58 // mul    qword [rsp + 88]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	LONG $0x24448948; BYTE $0x40 // mov    qword [rsp + 64], rax
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x48 // mul    qword [rsp + 72]
	WORD $0x8949; BYTE $0xd0     // mov    r8, rdx
	WORD $0x8949; BYTE $0xc4     // mov    r12, rax
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x70 // mul    qword [rsp + 112]
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x60 // mul    qword [rsp + 96]
	WORD $0x8949; BYTE $0xc7     // mov    r15, rax
	WORD $0x8949; BYTE $0xd2     // mov    r10, rdx
	WORD $0x014d; BYTE $0xcc     // add    r12, r9
	WORD $0x114c; BYTE $0xc7     // adc    rdi, r8
	WORD $0x1149; BYTE $0xf7     // adc    r15, rsi
	LONG $0x00d28349             // adc    r10, 0
	WORD $0x894c; BYTE $0xe8     // mov    rax, r13
	WORD $0xf748; BYTE $0xe3     // mul    rbx
	WORD $0x8948; BYTE $0xd1     // mov    rcx, rdx
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	WORD $0x894c; BYTE $0xe8     // mov    rax, r13
	LONG $0x2464f748; BYTE $0x28 // mul    qword [rsp + 40]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	WORD $0x8948; BYTE $0xc6     // mov    rsi, rax
	WORD $0x894c; BYTE $0xe8     // mov    rax, r13
	LONG $0x2464f748; BYTE $0x68 // mul    qword [rsp + 104]
	WORD $0x8949; BYTE $0xd3     // mov    r11, rdx
	WORD $0x8949; BYTE $0xc6     // mov    r14, rax
	WORD $0x894c; BYTE $0xe8     // mov    rax, r13
	LONG $0x2464f748; BYTE $0x78 // mul    qword [rsp + 120]
	WORD $0x0148; BYTE $0xce     // add    rsi, rcx
	WORD $0x114d; BYTE $0xce     // adc    r14, r9
	WORD $0x114c; BYTE $0xd8     // adc    rax, r11
	LONG $0x00d28348             // adc    rdx, 0
	WORD $0x014c; BYTE $0xe6     // add    rsi, r12
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x8949; BYTE $0xf3     // mov    r11, rsi
	WORD $0xff49; BYTE $0xc3     // inc    r11
	LONG $0xd1940f41             // sete    r9b
	LONG $0x2444034c; BYTE $0x40 // add    r8, qword [rsp + 64]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB3_154
	WORD $0x8949; BYTE $0xf3     // mov    r11, rsi

LBB3_154:
	WORD $0x2044; BYTE $0xcb // and    bl, r9b
	WORD $0xd908             // or    cl, bl
	WORD $0x014c; BYTE $0xf7 // add    rdi, r14
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x8949; BYTE $0xfe // mov    r14, rdi
	WORD $0xff49; BYTE $0xc6 // inc    r14
	LONG $0xd6940f40         // sete    sil
	WORD $0xc984             // test    cl, cl
	JNE  LBB3_156
	WORD $0x8949; BYTE $0xfe // mov    r14, rdi

LBB3_156:
	WORD $0x2040; BYTE $0xf1 // and    cl, sil
	WORD $0xcb08             // or    bl, cl
	WORD $0x0149; BYTE $0xc7 // add    r15, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x894d; BYTE $0xfd // mov    r13, r15
	WORD $0xff49; BYTE $0xc5 // inc    r13
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB3_158
	WORD $0x894d; BYTE $0xfd // mov    r13, r15

LBB3_158:
	WORD $0xcb20                 // and    bl, cl
	WORD $0xd808                 // or    al, bl
	WORD $0x0149; BYTE $0xd2     // add    r10, rdx
	LONG $0x2454920f; BYTE $0x40 // setb    byte [rsp + 64]
	WORD $0x894d; BYTE $0xd7     // mov    r15, r10
	WORD $0xff49; BYTE $0xc7     // inc    r15
	WORD $0x940f; BYTE $0xd3     // sete    bl
	WORD $0xc084                 // test    al, al
	JNE  LBB3_160
	WORD $0x894d; BYTE $0xd7     // mov    r15, r10

LBB3_160:
	WORD $0xc320                 // and    bl, al
	LONG $0x244c8b4c; BYTE $0x50 // mov    r9, qword [rsp + 80]
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9
	LONG $0x24748b48; BYTE $0x30 // mov    rsi, qword [rsp + 48]
	LONG $0xfeaf0f48             // imul    rdi, rsi
	WORD $0x014c; BYTE $0xdf     // add    rdi, r11
	WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x58 // mul    qword [rsp + 88]
	LONG $0x24548948; BYTE $0x38 // mov    qword [rsp + 56], rdx
	QUAD $0x0000008024848948     // mov    qword [rsp + 128], rax
	WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x48 // mul    qword [rsp + 72]
	QUAD $0x00000090249c894c     // mov    qword [rsp + 144], r11
	WORD $0x8949; BYTE $0xd0     // mov    r8, rdx
	WORD $0x8948; BYTE $0xc1     // mov    rcx, rax
	WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x70 // mul    qword [rsp + 112]
	WORD $0x8949; BYTE $0xc3     // mov    r11, rax
	WORD $0x8949; BYTE $0xd4     // mov    r12, rdx
	LONG $0x40245c08             // or    byte [rsp + 64], bl
	WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
	LONG $0x2464f748; BYTE $0x60 // mul    qword [rsp + 96]
	WORD $0x8949; BYTE $0xd2     // mov    r10, rdx
	LONG $0x244c0348; BYTE $0x38 // add    rcx, qword [rsp + 56]
	WORD $0x114d; BYTE $0xc3     // adc    r11, r8
	WORD $0x894d; BYTE $0xd8     // mov    r8, r11
	WORD $0x114c; BYTE $0xe0     // adc    rax, r12
	QUAD $0x000000a024848948     // mov    qword [rsp + 160], rax
	LONG $0x00d28349             // adc    r10, 0
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9
	WORD $0xf748; BYTE $0xe6     // mul    rsi
	WORD $0x8949; BYTE $0xd3     // mov    r11, rdx
	QUAD $0x0000008824848948     // mov    qword [rsp + 136], rax
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9
	LONG $0x2464f748; BYTE $0x28 // mul    qword [rsp + 40]
	WORD $0x8949; BYTE $0xd4     // mov    r12, rdx
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9
	LONG $0x2464f748; BYTE $0x68 // mul    qword [rsp + 104]
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx
	WORD $0x8948; BYTE $0xc3     // mov    rbx, rax
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9
	LONG $0x2464f748; BYTE $0x78 // mul    qword [rsp + 120]
	WORD $0x014c; BYTE $0xdf     // add    rdi, r11
	QUAD $0x000000a824bc8948     // mov    qword [rsp + 168], rdi
	WORD $0x114c; BYTE $0xe3     // adc    rbx, r12
	LONG $0x245c8948; BYTE $0x38 // mov    qword [rsp + 56], rbx
	WORD $0x1148; BYTE $0xf0     // adc    rax, rsi
	LONG $0x00d28348             // adc    rdx, 0
	LONG $0x24548948; BYTE $0x50 // mov    qword [rsp + 80], rdx
	WORD $0x0149; BYTE $0xce     // add    r14, rcx
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894d; BYTE $0xf3     // mov    r11, r14
	WORD $0xff49; BYTE $0xc3     // inc    r11
	LONG $0xd7940f40             // sete    dil
	QUAD $0x0000008024948b48     // mov    rdx, qword [rsp + 128]
	QUAD $0x0000009024940348     // add    rdx, qword [rsp + 144]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB3_162
	WORD $0x894d; BYTE $0xf3     // mov    r11, r14

LBB3_162:
	LONG $0x2474b60f; BYTE $0x40 // movzx    esi, byte [rsp + 64]
	WORD $0x2040; BYTE $0xfb     // and    bl, dil
	WORD $0xd908                 // or    cl, bl
	WORD $0x014d; BYTE $0xc5     // add    r13, r8
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x894d; BYTE $0xec     // mov    r12, r13
	WORD $0xff49; BYTE $0xc4     // inc    r12
	LONG $0xd7940f40             // sete    dil
	WORD $0xc984                 // test    cl, cl
	JNE  LBB3_164
	WORD $0x894d; BYTE $0xec     // mov    r12, r13

LBB3_164:
	WORD $0x2040; BYTE $0xf9 // and    cl, dil
	WORD $0xcb08             // or    bl, cl
	QUAD $0x000000a024bc034c // add    r15, qword [rsp + 160]
	LONG $0xd1920f41         // setb    r9b
	WORD $0x894c; BYTE $0xff // mov    rdi, r15
	WORD $0xff48; BYTE $0xc7 // inc    rdi
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB3_166
	WORD $0x894c; BYTE $0xff // mov    rdi, r15

LBB3_166:
	WORD $0xcb20             // and    bl, cl
	WORD $0x0841; BYTE $0xd9 // or    r9b, bl
	WORD $0x0149; BYTE $0xf2 // add    r10, rsi
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	LONG $0xd6940f41         // sete    r14b
	WORD $0x8445; BYTE $0xc9 // test    r9b, r9b
	JNE  LBB3_168
	WORD $0x894c; BYTE $0xd6 // mov    rsi, r10

LBB3_168:
	QUAD $0x000000a8249c034c // add    r11, qword [rsp + 168]
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x894d; BYTE $0xda // mov    r10, r11
	WORD $0xff49; BYTE $0xc2 // inc    r10
	LONG $0xd0940f41         // sete    r8b
	QUAD $0x0000008824940348 // add    rdx, qword [rsp + 136]
	WORD $0x920f; BYTE $0xd3 // setb    bl
	JB   LBB3_170
	WORD $0x894d; BYTE $0xda // mov    r10, r11

LBB3_170:
	WORD $0x2044; BYTE $0xc3     // and    bl, r8b
	WORD $0xd908                 // or    cl, bl
	LONG $0x2464034c; BYTE $0x38 // add    r12, qword [rsp + 56]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x894d; BYTE $0xe5     // mov    r13, r12
	WORD $0xff49; BYTE $0xc5     // inc    r13
	LONG $0xd0940f41             // sete    r8b
	WORD $0xc984                 // test    cl, cl
	JNE  LBB3_172
	WORD $0x894d; BYTE $0xe5     // mov    r13, r12

LBB3_172:
	WORD $0x2045; BYTE $0xce // and    r14b, r9b
	WORD $0x2044; BYTE $0xc1 // and    cl, r8b
	WORD $0xcb08             // or    bl, cl
	WORD $0x0148; BYTE $0xc7 // add    rdi, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x8949; BYTE $0xff // mov    r15, rdi
	WORD $0xff49; BYTE $0xc7 // inc    r15
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB3_174
	WORD $0x8949; BYTE $0xff // mov    r15, rdi

LBB3_174:
	LONG $0xfeb60f41             // movzx    edi, r14b
	WORD $0xcb20                 // and    bl, cl
	WORD $0xd808                 // or    al, bl
	LONG $0x24740348; BYTE $0x50 // add    rsi, qword [rsp + 80]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x8949; BYTE $0xf6     // mov    r14, rsi
	WORD $0xff49; BYTE $0xc6     // inc    r14
	WORD $0x940f; BYTE $0xd2     // sete    dl
	WORD $0xc084                 // test    al, al
	JNE  LBB3_176
	WORD $0x8949; BYTE $0xf6     // mov    r14, rsi

LBB3_176:
	WORD $0xd020             // and    al, dl
	WORD $0xc108             // or    cl, al
	JNE  LBB3_177
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10

LBB3_179:
	LONG $0x247c8948; BYTE $0x40 // mov    qword [rsp + 64], rdi
	LONG $0x24548b4c; BYTE $0x20 // mov    r10, qword [rsp + 32]
	WORD $0x894c; BYTE $0xd1     // mov    rcx, r10
	LONG $0x24748b48; BYTE $0x30 // mov    rsi, qword [rsp + 48]
	LONG $0xceaf0f48             // imul    rcx, rsi
	QUAD $0x000000a024848948     // mov    qword [rsp + 160], rax
	WORD $0x0148; BYTE $0xc1     // add    rcx, rax
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x58 // mul    qword [rsp + 88]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	WORD $0x8949; BYTE $0xc4     // mov    r12, rax
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x48 // mul    qword [rsp + 72]
	WORD $0x8949; BYTE $0xd3     // mov    r11, rdx
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x70 // mul    qword [rsp + 112]
	WORD $0x8948; BYTE $0xd3     // mov    rbx, rdx
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x60 // mul    qword [rsp + 96]
	WORD $0x014c; BYTE $0xcf     // add    rdi, r9
	WORD $0x114d; BYTE $0xd8     // adc    r8, r11
	WORD $0x1148; BYTE $0xd8     // adc    rax, rbx
	QUAD $0x000000a824848948     // mov    qword [rsp + 168], rax
	LONG $0x00d28348             // adc    rdx, 0
	QUAD $0x0000008824948948     // mov    qword [rsp + 136], rdx
	WORD $0x894c; BYTE $0xd0     // mov    rax, r10
	WORD $0xf748; BYTE $0xe6     // mul    rsi
	WORD $0x8949; BYTE $0xd3     // mov    r11, rdx
	LONG $0x24448948; BYTE $0x38 // mov    qword [rsp + 56], rax
	WORD $0x894c; BYTE $0xd0     // mov    rax, r10
	LONG $0x2464f748; BYTE $0x28 // mul    qword [rsp + 40]
	WORD $0x8948; BYTE $0xd3     // mov    rbx, rdx
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	WORD $0x894c; BYTE $0xd0     // mov    rax, r10
	LONG $0x2464f748; BYTE $0x68 // mul    qword [rsp + 104]
	WORD $0x8948; BYTE $0xd1     // mov    rcx, rdx
	WORD $0x8948; BYTE $0xc6     // mov    rsi, rax
	WORD $0x894c; BYTE $0xd0     // mov    rax, r10
	LONG $0x2464f748; BYTE $0x78 // mul    qword [rsp + 120]
	WORD $0x014d; BYTE $0xd9     // add    r9, r11
	WORD $0x1148; BYTE $0xde     // adc    rsi, rbx
	LONG $0x24748948; BYTE $0x50 // mov    qword [rsp + 80], rsi
	WORD $0x1148; BYTE $0xc8     // adc    rax, rcx
	LONG $0x00d28348             // adc    rdx, 0
	LONG $0x24548948; BYTE $0x20 // mov    qword [rsp + 32], rdx
	WORD $0x0149; BYTE $0xfd     // add    r13, rdi
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894c; BYTE $0xef     // mov    rdi, r13
	WORD $0xff49; BYTE $0xc5     // inc    r13
	LONG $0xd6940f40             // sete    sil
	QUAD $0x000000a024a4034c     // add    r12, qword [rsp + 160]
	WORD $0x894c; BYTE $0xe2     // mov    rdx, r12
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB3_181
	WORD $0x8949; BYTE $0xfd     // mov    r13, rdi

LBB3_181:
	WORD $0x2040; BYTE $0xf3 // and    bl, sil
	WORD $0xd908             // or    cl, bl
	WORD $0x014d; BYTE $0xc7 // add    r15, r8
	WORD $0x920f; BYTE $0xd3 // setb    bl
	WORD $0x894d; BYTE $0xfb // mov    r11, r15
	WORD $0xff49; BYTE $0xc3 // inc    r11
	LONG $0xd6940f40         // sete    sil
	WORD $0xc984             // test    cl, cl
	JNE  LBB3_183
	WORD $0x894d; BYTE $0xfb // mov    r11, r15

LBB3_183:
	WORD $0x2040; BYTE $0xf1 // and    cl, sil
	WORD $0xcb08             // or    bl, cl
	QUAD $0x000000a824b4034c // add    r14, qword [rsp + 168]
	LONG $0xd2920f41         // setb    r10b
	WORD $0x894c; BYTE $0xf6 // mov    rsi, r14
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB3_185
	WORD $0x894c; BYTE $0xf6 // mov    rsi, r14

LBB3_185:
	WORD $0xcb20                 // and    bl, cl
	WORD $0x0841; BYTE $0xda     // or    r10b, bl
	LONG $0x244c8b48; BYTE $0x40 // mov    rcx, qword [rsp + 64]
	QUAD $0x00000088248c0348     // add    rcx, qword [rsp + 136]
	LONG $0xd0920f41             // setb    r8b
	WORD $0x8949; BYTE $0xcf     // mov    r15, rcx
	WORD $0xff49; BYTE $0xc7     // inc    r15
	LONG $0xd6940f41             // sete    r14b
	WORD $0x8445; BYTE $0xd2     // test    r10b, r10b
	JNE  LBB3_187
	WORD $0x8949; BYTE $0xcf     // mov    r15, rcx

LBB3_187:
	WORD $0x014d; BYTE $0xcd     // add    r13, r9
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894d; BYTE $0xec     // mov    r12, r13
	WORD $0xff49; BYTE $0xc4     // inc    r12
	LONG $0xd1940f41             // sete    r9b
	LONG $0x24540348; BYTE $0x38 // add    rdx, qword [rsp + 56]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB3_189
	WORD $0x894d; BYTE $0xec     // mov    r12, r13

LBB3_189:
	WORD $0x2045; BYTE $0xd6     // and    r14b, r10b
	WORD $0x2044; BYTE $0xcb     // and    bl, r9b
	WORD $0xd908                 // or    cl, bl
	LONG $0x245c034c; BYTE $0x50 // add    r11, qword [rsp + 80]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x894d; BYTE $0xdd     // mov    r13, r11
	WORD $0xff49; BYTE $0xc5     // inc    r13
	LONG $0xd7940f40             // sete    dil
	WORD $0xc984                 // test    cl, cl
	JNE  LBB3_191
	WORD $0x894d; BYTE $0xdd     // mov    r13, r11

LBB3_191:
	WORD $0x0845; BYTE $0xf0 // or    r8b, r14b
	WORD $0x2040; BYTE $0xf9 // and    cl, dil
	WORD $0xcb08             // or    bl, cl
	WORD $0x0148; BYTE $0xc6 // add    rsi, rax
	WORD $0x920f; BYTE $0xd0 // setb    al
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi
	WORD $0xff49; BYTE $0xc3 // inc    r11
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB3_193
	WORD $0x8949; BYTE $0xf3 // mov    r11, rsi

LBB3_193:
	LONG $0xf0b60f41             // movzx    esi, r8b
	LONG $0x24748948; BYTE $0x40 // mov    qword [rsp + 64], rsi
	WORD $0xcb20                 // and    bl, cl
	WORD $0xd808                 // or    al, bl
	LONG $0x247c034c; BYTE $0x20 // add    r15, qword [rsp + 32]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894d; BYTE $0xfe     // mov    r14, r15
	WORD $0xff49; BYTE $0xc6     // inc    r14
	WORD $0x940f; BYTE $0xd2     // sete    dl
	WORD $0xc084                 // test    al, al
	JNE  LBB3_195
	WORD $0x894d; BYTE $0xfe     // mov    r14, r15

LBB3_195:
	WORD $0xd020  // and    al, dl
	WORD $0xc108  // or    cl, al
	JNE  LBB3_196

LBB3_197:
	LONG $0x247c8b4c; BYTE $0x18 // mov    r15, qword [rsp + 24]
	WORD $0x894c; BYTE $0xf9     // mov    rcx, r15
	LONG $0x24748b48; BYTE $0x30 // mov    rsi, qword [rsp + 48]
	LONG $0xceaf0f48             // imul    rcx, rsi
	QUAD $0x0000008824a4894c     // mov    qword [rsp + 136], r12
	WORD $0x014c; BYTE $0xe1     // add    rcx, r12
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x58 // mul    qword [rsp + 88]
	LONG $0x24548948; BYTE $0x20 // mov    qword [rsp + 32], rdx
	WORD $0x8949; BYTE $0xc0     // mov    r8, rax
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x48 // mul    qword [rsp + 72]
	WORD $0x8949; BYTE $0xd2     // mov    r10, rdx
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x70 // mul    qword [rsp + 112]
	WORD $0x8949; BYTE $0xd1     // mov    r9, rdx
	WORD $0x8948; BYTE $0xc3     // mov    rbx, rax
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x60 // mul    qword [rsp + 96]
	WORD $0x8949; BYTE $0xc4     // mov    r12, rax
	LONG $0x247c0348; BYTE $0x20 // add    rdi, qword [rsp + 32]
	WORD $0x114c; BYTE $0xd3     // adc    rbx, r10
	LONG $0x245c8948; BYTE $0x38 // mov    qword [rsp + 56], rbx
	WORD $0x114d; BYTE $0xcc     // adc    r12, r9
	LONG $0x00d28348             // adc    rdx, 0
	LONG $0x24548948; BYTE $0x50 // mov    qword [rsp + 80], rdx
	WORD $0x894c; BYTE $0xf8     // mov    rax, r15
	WORD $0xf748; BYTE $0xe6     // mul    rsi
	WORD $0x8949; BYTE $0xd2     // mov    r10, rdx
	LONG $0x24448948; BYTE $0x20 // mov    qword [rsp + 32], rax
	WORD $0x894c; BYTE $0xf8     // mov    rax, r15
	LONG $0x2464f748; BYTE $0x28 // mul    qword [rsp + 40]
	WORD $0x8948; BYTE $0xd3     // mov    rbx, rdx
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	WORD $0x894c; BYTE $0xf8     // mov    rax, r15
	LONG $0x2464f748; BYTE $0x68 // mul    qword [rsp + 104]
	WORD $0x8948; BYTE $0xd1     // mov    rcx, rdx
	WORD $0x8948; BYTE $0xc6     // mov    rsi, rax
	WORD $0x894c; BYTE $0xf8     // mov    rax, r15
	LONG $0x2464f748; BYTE $0x78 // mul    qword [rsp + 120]
	WORD $0x014d; BYTE $0xd1     // add    r9, r10
	WORD $0x1148; BYTE $0xde     // adc    rsi, rbx
	LONG $0x24748948; BYTE $0x28 // mov    qword [rsp + 40], rsi
	WORD $0x1148; BYTE $0xc8     // adc    rax, rcx
	LONG $0x00d28348             // adc    rdx, 0
	LONG $0x24548948; BYTE $0x30 // mov    qword [rsp + 48], rdx
	WORD $0x0149; BYTE $0xfd     // add    r13, rdi
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894d; BYTE $0xea     // mov    r10, r13
	WORD $0xff49; BYTE $0xc2     // inc    r10
	LONG $0xd6940f40             // sete    sil
	QUAD $0x000000882484034c     // add    r8, qword [rsp + 136]
	WORD $0x894c; BYTE $0xc2     // mov    rdx, r8
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB3_199
	WORD $0x894d; BYTE $0xea     // mov    r10, r13

LBB3_199:
	WORD $0x2040; BYTE $0xf3     // and    bl, sil
	WORD $0xd908                 // or    cl, bl
	LONG $0x245c034c; BYTE $0x38 // add    r11, qword [rsp + 56]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x894c; BYTE $0xde     // mov    rsi, r11
	WORD $0xff48; BYTE $0xc6     // inc    rsi
	LONG $0xd7940f40             // sete    dil
	WORD $0xc984                 // test    cl, cl
	JNE  LBB3_201
	WORD $0x894c; BYTE $0xde     // mov    rsi, r11

LBB3_201:
	WORD $0x2040; BYTE $0xf9 // and    cl, dil
	WORD $0xcb08             // or    bl, cl
	WORD $0x014d; BYTE $0xe6 // add    r14, r12
	LONG $0xd4920f41         // setb    r12b
	WORD $0x894c; BYTE $0xf7 // mov    rdi, r14
	WORD $0xff48; BYTE $0xc7 // inc    rdi
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0xdb84             // test    bl, bl
	JNE  LBB3_203
	WORD $0x894c; BYTE $0xf7 // mov    rdi, r14

LBB3_203:
	WORD $0xcb20                 // and    bl, cl
	WORD $0x0841; BYTE $0xdc     // or    r12b, bl
	LONG $0x244c8b48; BYTE $0x40 // mov    rcx, qword [rsp + 64]
	LONG $0x244c0348; BYTE $0x50 // add    rcx, qword [rsp + 80]
	LONG $0xd0920f41             // setb    r8b
	WORD $0x8949; BYTE $0xce     // mov    r14, rcx
	WORD $0xff49; BYTE $0xc6     // inc    r14
	LONG $0xd3940f41             // sete    r11b
	WORD $0x8445; BYTE $0xe4     // test    r12b, r12b
	JNE  LBB3_205
	WORD $0x8949; BYTE $0xce     // mov    r14, rcx

LBB3_205:
	WORD $0x014d; BYTE $0xca     // add    r10, r9
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894c; BYTE $0xd3     // mov    rbx, r10
	WORD $0xff48; BYTE $0xc3     // inc    rbx
	LONG $0x245c8948; BYTE $0x18 // mov    qword [rsp + 24], rbx
	LONG $0xd7940f41             // sete    r15b
	LONG $0x24540348; BYTE $0x20 // add    rdx, qword [rsp + 32]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB3_207
	LONG $0x2454894c; BYTE $0x18 // mov    qword [rsp + 24], r10

LBB3_207:
	WORD $0x2045; BYTE $0xe3     // and    r11b, r12b
	WORD $0x2044; BYTE $0xfb     // and    bl, r15b
	WORD $0xd908                 // or    cl, bl
	LONG $0x24740348; BYTE $0x28 // add    rsi, qword [rsp + 40]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi
	WORD $0xff49; BYTE $0xc1     // inc    r9
	LONG $0xd2940f41             // sete    r10b
	WORD $0xc984                 // test    cl, cl
	JNE  LBB3_209
	WORD $0x8949; BYTE $0xf1     // mov    r9, rsi

LBB3_209:
	WORD $0x0845; BYTE $0xd8 // or    r8b, r11b
	WORD $0x2044; BYTE $0xd1 // and    cl, r10b
	WORD $0xcb08             // or    bl, cl
	WORD $0x0148; BYTE $0xc7 // add    rdi, rax
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x8949; BYTE $0xfa // mov    r10, rdi
	WORD $0xff49; BYTE $0xc2 // inc    r10
	WORD $0x940f; BYTE $0xd0 // sete    al
	WORD $0xdb84             // test    bl, bl
	JNE  LBB3_211
	WORD $0x8949; BYTE $0xfa // mov    r10, rdi

LBB3_211:
	LONG $0xf0b60f41             // movzx    esi, r8b
	WORD $0xc320                 // and    bl, al
	WORD $0xd908                 // or    cl, bl
	LONG $0x2474034c; BYTE $0x30 // add    r14, qword [rsp + 48]
	WORD $0x920f; BYTE $0xd2     // setb    dl
	WORD $0x894c; BYTE $0xf7     // mov    rdi, r14
	WORD $0xff48; BYTE $0xc7     // inc    rdi
	WORD $0x940f; BYTE $0xd0     // sete    al
	WORD $0xc984                 // test    cl, cl
	JNE  LBB3_213
	WORD $0x894c; BYTE $0xf7     // mov    rdi, r14

LBB3_213:
	WORD $0xc120                 // and    cl, al
	WORD $0xca08                 // or    dl, cl
	JNE  LBB3_214
	WORD $0x8948; BYTE $0xfa     // mov    rdx, rdi
	LONG $0x24542b48; BYTE $0x60 // sub    rdx, qword [rsp + 96]
	JA   LBB3_223

LBB3_216:
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	JNE  LBB3_223
	LONG $0x247c3b48; BYTE $0x60 // cmp    rdi, qword [rsp + 96]
	JAE  LBB3_218

LBB3_228:
	LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
	QUAD $0x000000d024848948     // mov    qword [rsp + 208], rax
	QUAD $0x000000d8248c894c     // mov    qword [rsp + 216], r9
	QUAD $0x000000e02494894c     // mov    qword [rsp + 224], r10
	JMP  LBB3_229

LBB3_218:
	LONG $0x24543b4c; BYTE $0x70 // cmp    r10, qword [rsp + 112]
	JBE  LBB3_219

LBB3_223:
	LONG $0x244c2b4c; BYTE $0x48 // sub    r9, qword [rsp + 72]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0x01ee8348             // sub    rsi, 1
	LONG $0xd7920f40             // setb    dil
	LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
	LONG $0x24442b48; BYTE $0x58 // sub    rax, qword [rsp + 88]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	LONG $0x24448948; BYTE $0x18 // mov    qword [rsp + 24], rax
	QUAD $0x000000d024848948     // mov    qword [rsp + 208], rax
	JB   LBB3_225
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9

LBB3_225:
	WORD $0x2040; BYTE $0xfb     // and    bl, dil
	WORD $0xd908                 // or    cl, bl
	QUAD $0x000000d824b48948     // mov    qword [rsp + 216], rsi
	LONG $0x24542b4c; BYTE $0x70 // sub    r10, qword [rsp + 112]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	WORD $0x894c; BYTE $0xd6     // mov    rsi, r10
	LONG $0x01ee8348             // sub    rsi, 1
	WORD $0x920f; BYTE $0xd0     // setb    al
	WORD $0xc984                 // test    cl, cl
	JNE  LBB3_227
	WORD $0x894c; BYTE $0xd6     // mov    rsi, r10

LBB3_227:
	WORD $0xc120             // and    cl, al
	WORD $0xcb08             // or    bl, cl
	QUAD $0x000000e024b48948 // mov    qword [rsp + 224], rsi
	WORD $0xb60f; BYTE $0xc3 // movzx    eax, bl
	WORD $0x2948; BYTE $0xc2 // sub    rdx, rax
	WORD $0x8948; BYTE $0xd7 // mov    rdi, rdx

LBB3_229:
	QUAD $0x000000e824bc8948             // mov    qword [rsp + 232], rdi
	LONG $0xc057f8c5                     // vxorps    xmm0, xmm0, xmm0
	QUAD $0x000100248429fcc5; BYTE $0x00 // vmovaps    yword [rsp + 256], ymm0
	QUAD $0x000120248429fcc5; BYTE $0x00 // vmovaps    yword [rsp + 288], ymm0
	QUAD $0x00000118249c8b4c             // mov    r11, qword [rsp + 280]
	QUAD $0x0000012024ac8b4c             // mov    r13, qword [rsp + 288]
	QUAD $0x0000012824848b48             // mov    rax, qword [rsp + 296]
	LONG $0x24448948; BYTE $0x78         // mov    qword [rsp + 120], rax
	QUAD $0x0000013024848b48             // mov    rax, qword [rsp + 304]
	LONG $0x24448948; BYTE $0x68         // mov    qword [rsp + 104], rax
	LONG $0x000001b8; BYTE $0x00         // mov    eax, 1
	LONG $0x24448948; BYTE $0x40         // mov    qword [rsp + 64], rax
	WORD $0x3145; BYTE $0xc0             // xor    r8d, r8d
	QUAD $0x0000013824848b48             // mov    rax, qword [rsp + 312]
	LONG $0x24448948; BYTE $0x38         // mov    qword [rsp + 56], rax
	WORD $0x3145; BYTE $0xe4             // xor    r12d, r12d
	WORD $0xc031                         // xor    eax, eax
	LONG $0x24448948; BYTE $0x20         // mov    qword [rsp + 32], rax
	WORD $0xc031                         // xor    eax, eax
	LONG $0x24448948; BYTE $0x50         // mov    qword [rsp + 80], rax
	WORD $0xc031                         // xor    eax, eax
	LONG $0x24448948; BYTE $0x30         // mov    qword [rsp + 48], rax
	WORD $0xc031                         // xor    eax, eax
	LONG $0x24448948; BYTE $0x28         // mov    qword [rsp + 40], rax
	WORD $0x3145; BYTE $0xff             // xor    r15d, r15d
	LONG $0x24748b4c; BYTE $0x18         // mov    r14, qword [rsp + 24]

LBB3_230:
	LONG $0x370c8d4b             // lea    rcx, [r15 + r14]
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x58 // mul    qword [rsp + 88]
	WORD $0x8948; BYTE $0xd7     // mov    rdi, rdx
	LONG $0x24448948; BYTE $0x18 // mov    qword [rsp + 24], rax
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x48 // mul    qword [rsp + 72]
	WORD $0x8948; BYTE $0xd6     // mov    rsi, rdx
	WORD $0x8949; BYTE $0xc2     // mov    r10, rax
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x70 // mul    qword [rsp + 112]
	WORD $0x8948; BYTE $0xd3     // mov    rbx, rdx
	WORD $0x8949; BYTE $0xc1     // mov    r9, rax
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0x2464f748; BYTE $0x60 // mul    qword [rsp + 96]
	WORD $0x0149; BYTE $0xfa     // add    r10, rdi
	WORD $0x1149; BYTE $0xf1     // adc    r9, rsi
	WORD $0x1148; BYTE $0xd8     // adc    rax, rbx
	LONG $0x00d28348             // adc    rdx, 0
	WORD $0x894c; BYTE $0xfb     // mov    rbx, r15
	WORD $0x014c; BYTE $0xf3     // add    rbx, r14
	JB   LBB3_236

LBB3_231:
	LONG $0x2464894c; BYTE $0x68 // mov    qword [rsp + 104], r12
	WORD $0xc931                 // xor    ecx, ecx
	LONG $0x244c8948; BYTE $0x78 // mov    qword [rsp + 120], rcx
	LONG $0x246c8b4c; BYTE $0x20 // mov    r13, qword [rsp + 32]
	LONG $0x245c8b4c; BYTE $0x50 // mov    r11, qword [rsp + 80]

LBB3_240:
	LONG $0x24748b48; BYTE $0x28 // mov    rsi, qword [rsp + 40]
	WORD $0x014c; BYTE $0xd6     // add    rsi, r10
	LONG $0xd7920f40             // setb    dil
	WORD $0x8949; BYTE $0xf7     // mov    r15, rsi
	WORD $0xff49; BYTE $0xc7     // inc    r15
	WORD $0x940f; BYTE $0xd1     // sete    cl
	LONG $0x245c0348; BYTE $0x18 // add    rbx, qword [rsp + 24]
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB3_242
	WORD $0x8949; BYTE $0xf7     // mov    r15, rsi

LBB3_242:
	WORD $0xcb20                 // and    bl, cl
	WORD $0x0840; BYTE $0xdf     // or    dil, bl
	LONG $0x24748b48; BYTE $0x30 // mov    rsi, qword [rsp + 48]
	WORD $0x014c; BYTE $0xce     // add    rsi, r9
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x8948; BYTE $0xf3     // mov    rbx, rsi
	WORD $0xff48; BYTE $0xc3     // inc    rbx
	LONG $0x245c8948; BYTE $0x28 // mov    qword [rsp + 40], rbx
	WORD $0x940f; BYTE $0xd3     // sete    bl
	WORD $0x8440; BYTE $0xff     // test    dil, dil
	JNE  LBB3_244
	LONG $0x24748948; BYTE $0x28 // mov    qword [rsp + 40], rsi

LBB3_244:
	WORD $0x2040; BYTE $0xfb     // and    bl, dil
	WORD $0xd908                 // or    cl, bl
	WORD $0x0149; BYTE $0xc3     // add    r11, rax
	WORD $0x920f; BYTE $0xd0     // setb    al
	WORD $0x894c; BYTE $0xde     // mov    rsi, r11
	WORD $0xff48; BYTE $0xc6     // inc    rsi
	LONG $0x24748948; BYTE $0x30 // mov    qword [rsp + 48], rsi
	WORD $0x940f; BYTE $0xd3     // sete    bl
	WORD $0xc984                 // test    cl, cl
	JNE  LBB3_246
	LONG $0x245c894c; BYTE $0x30 // mov    qword [rsp + 48], r11

LBB3_246:
	WORD $0xcb20             // and    bl, cl
	WORD $0xd808             // or    al, bl
	WORD $0x0149; BYTE $0xd5 // add    r13, rdx
	WORD $0x920f; BYTE $0xd1 // setb    cl
	WORD $0x894d; BYTE $0xeb // mov    r11, r13
	WORD $0xff49; BYTE $0xc3 // inc    r11
	WORD $0x940f; BYTE $0xd2 // sete    dl
	WORD $0xc084             // test    al, al
	JNE  LBB3_248
	WORD $0x894d; BYTE $0xeb // mov    r11, r13

LBB3_248:
	WORD $0xc220                 // and    dl, al
	WORD $0xd108                 // or    cl, dl
	LONG $0x24548b48; BYTE $0x78 // mov    rdx, qword [rsp + 120]
	WORD $0x8949; BYTE $0xd5     // mov    r13, rdx
	WORD $0xff49; BYTE $0xc5     // inc    r13
	WORD $0x940f; BYTE $0xd0     // sete    al
	WORD $0xc984                 // test    cl, cl
	JNE  LBB3_250
	WORD $0x8949; BYTE $0xd5     // mov    r13, rdx

LBB3_250:
	WORD $0xc820                 // and    al, cl
	LONG $0x24548b48; BYTE $0x68 // mov    rdx, qword [rsp + 104]
	WORD $0x8949; BYTE $0xd4     // mov    r12, rdx
	WORD $0xff49; BYTE $0xc4     // inc    r12
	WORD $0x940f; BYTE $0xd1     // sete    cl
	WORD $0xc084                 // test    al, al
	JNE  LBB3_252
	WORD $0x8949; BYTE $0xd4     // mov    r12, rdx

LBB3_252:
	WORD $0xc120                 // and    cl, al
	WORD $0xb60f; BYTE $0xc1     // movzx    eax, cl
	WORD $0x0149; BYTE $0xc0     // add    r8, rax
	LONG $0x24448b48; BYTE $0x40 // mov    rax, qword [rsp + 64]
	LONG $0x04f88348             // cmp    rax, 4
	JE   LBB3_232
	QUAD $0x000000d0c4b48b4c     // mov    r14, qword [rsp + 8*rax + 208]
	LONG $0x01c08348             // add    rax, 1
	LONG $0x24448948; BYTE $0x40 // mov    qword [rsp + 64], rax
	LONG $0x2444894c; BYTE $0x38 // mov    qword [rsp + 56], r8
	LONG $0x2464894c; BYTE $0x68 // mov    qword [rsp + 104], r12
	WORD $0xc031                 // xor    eax, eax
	LONG $0x24448948; BYTE $0x78 // mov    qword [rsp + 120], rax
	WORD $0x894c; BYTE $0xe8     // mov    rax, r13
	LONG $0x246c894c; BYTE $0x20 // mov    qword [rsp + 32], r13
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11
	LONG $0x245c894c; BYTE $0x50 // mov    qword [rsp + 80], r11
	JMP  LBB3_230

LBB3_236:
	LONG $0x2444ff48; BYTE $0x28 // inc    qword [rsp + 40]
	JNE  LBB3_231
	LONG $0x2444ff48; BYTE $0x30 // inc    qword [rsp + 48]
	JE   LBB3_238

LBB3_239:
	LONG $0x24448b4c; BYTE $0x38 // mov    r8, qword [rsp + 56]
	JMP  LBB3_240

LBB3_238:
	WORD $0xff49; BYTE $0xc3       // inc    r11
	JNE  LBB3_239
	WORD $0xff49; BYTE $0xc5       // inc    r13
	JNE  LBB3_239
	LONG $0x2444ff48; BYTE $0x78   // inc    qword [rsp + 120]
	JNE  LBB3_239
	LONG $0x2444ff48; BYTE $0x68   // inc    qword [rsp + 104]
	JNE  LBB3_239
	LONG $0x24448348; WORD $0x0138 // add    qword [rsp + 56], 1
	JMP  LBB3_239

LBB3_232:
	QUAD $0x0000010024bc894c                   // mov    qword [rsp + 256], r15
	LONG $0x24448b48; BYTE $0x28               // mov    rax, qword [rsp + 40]
	QUAD $0x0000010824848948                   // mov    qword [rsp + 264], rax
	LONG $0x24448b48; BYTE $0x30               // mov    rax, qword [rsp + 48]
	QUAD $0x0000011024848948                   // mov    qword [rsp + 272], rax
	QUAD $0x00000118249c894c                   // mov    qword [rsp + 280], r11
	QUAD $0x0000012024ac894c                   // mov    qword [rsp + 288], r13
	QUAD $0x000001282484c748; LONG $0x00000000 // mov    qword [rsp + 296], 0
	QUAD $0x0000013024a4894c                   // mov    qword [rsp + 304], r12
	QUAD $0x000001382484894c                   // mov    qword [rsp + 312], r8
	LONG $0x245c3b4c; BYTE $0x60               // cmp    r11, qword [rsp + 96]
	JA   LBB3_259
	WORD $0x854d; BYTE $0xed                   // test    r13, r13
	JNE  LBB3_259
	LONG $0x245c3b4c; BYTE $0x60               // cmp    r11, qword [rsp + 96]
	JAE  LBB3_254

LBB3_235:
	QUAD $0x000000c824bc8b48     // mov    rdi, qword [rsp + 200]
	WORD $0x894c; BYTE $0x3f     // mov    qword [rdi], r15
	LONG $0x24448b48; BYTE $0x28 // mov    rax, qword [rsp + 40]
	LONG $0x08478948             // mov    qword [rdi + 8], rax
	LONG $0x24448b48; BYTE $0x30 // mov    rax, qword [rsp + 48]
	LONG $0x10478948             // mov    qword [rdi + 16], rax
	JMP  LBB3_264

LBB3_254:
	LONG $0x24448b48; BYTE $0x30 // mov    rax, qword [rsp + 48]
	LONG $0x24443b48; BYTE $0x70 // cmp    rax, qword [rsp + 112]
	JBE  LBB3_255

LBB3_259:
	WORD $0x894c; BYTE $0xf8     // mov    rax, r15
	LONG $0x245c8b48; BYTE $0x58 // mov    rbx, qword [rsp + 88]
	WORD $0x2948; BYTE $0xd8     // sub    rax, rbx
	QUAD $0x000000c824bc8b48     // mov    rdi, qword [rsp + 200]
	WORD $0x8948; BYTE $0x07     // mov    qword [rdi], rax
	QUAD $0x000000f024b48b48     // mov    rsi, qword [rsp + 240]
	LONG $0x244c8b48; BYTE $0x28 // mov    rcx, qword [rsp + 40]
	LONG $0x084e2b48             // sub    rcx, qword [rsi + 8]
	WORD $0x920f; BYTE $0xd0     // setb    al
	WORD $0x8948; BYTE $0xca     // mov    rdx, rcx
	LONG $0x01ea8348             // sub    rdx, 1
	LONG $0xd0920f41             // setb    r8b
	WORD $0x3949; BYTE $0xdf     // cmp    r15, rbx
	WORD $0x920f; BYTE $0xd3     // setb    bl
	JB   LBB3_261
	WORD $0x8948; BYTE $0xca     // mov    rdx, rcx

LBB3_261:
	WORD $0x2044; BYTE $0xc3     // and    bl, r8b
	WORD $0xd808                 // or    al, bl
	LONG $0x08578948             // mov    qword [rdi + 8], rdx
	LONG $0x24548b48; BYTE $0x30 // mov    rdx, qword [rsp + 48]
	LONG $0x10562b48             // sub    rdx, qword [rsi + 16]
	WORD $0x920f; BYTE $0xd1     // setb    cl
	WORD $0x8948; BYTE $0xd3     // mov    rbx, rdx
	LONG $0x01eb8348             // sub    rbx, 1
	LONG $0xd0920f41             // setb    r8b
	WORD $0xc084                 // test    al, al
	JNE  LBB3_263
	WORD $0x8948; BYTE $0xd3     // mov    rbx, rdx

LBB3_263:
	WORD $0x2044; BYTE $0xc0 // and    al, r8b
	WORD $0xc108             // or    cl, al
	LONG $0x105f8948         // mov    qword [rdi + 16], rbx
	LONG $0x185e2b4c         // sub    r11, qword [rsi + 24]
	WORD $0xb60f; BYTE $0xc1 // movzx    eax, cl
	WORD $0x2949; BYTE $0xc3 // sub    r11, rax

LBB3_264:
	LONG $0x185f894c // mov    qword [rdi + 24], r11
	MOVQ 352(SP), SP
	VZEROUPPER
	RET

LBB3_66:
	JB   LBB3_65
	LONG $0x24543b4c; BYTE $0x48 // cmp    r10, qword [rsp + 72]
	JA   LBB3_71
	LONG $0x244c8b48; BYTE $0x30 // mov    rcx, qword [rsp + 48]
	LONG $0x244c3b48; BYTE $0x58 // cmp    rcx, qword [rsp + 88]
	JB   LBB3_65
	LONG $0x24543b4c; BYTE $0x48 // cmp    r10, qword [rsp + 72]
	JAE  LBB3_71
	JMP  LBB3_65

LBB3_142:
	JB   LBB3_141
	LONG $0x24443b4c; BYTE $0x48 // cmp    r8, qword [rsp + 72]
	JA   LBB3_147
	LONG $0x246c3b4c; BYTE $0x58 // cmp    r13, qword [rsp + 88]
	JB   LBB3_141
	LONG $0x24443b4c; BYTE $0x48 // cmp    r8, qword [rsp + 72]
	JAE  LBB3_147
	JMP  LBB3_141

LBB3_219:
	JB   LBB3_228
	LONG $0x244c3b4c; BYTE $0x48 // cmp    r9, qword [rsp + 72]
	JA   LBB3_223
	LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
	LONG $0x24443b48; BYTE $0x58 // cmp    rax, qword [rsp + 88]
	JB   LBB3_228
	LONG $0x244c3b4c; BYTE $0x48 // cmp    r9, qword [rsp + 72]
	JAE  LBB3_223
	JMP  LBB3_228

LBB3_255:
	JB   LBB3_235
	LONG $0x24448b48; BYTE $0x28 // mov    rax, qword [rsp + 40]
	LONG $0x24443b48; BYTE $0x48 // cmp    rax, qword [rsp + 72]
	JA   LBB3_259
	LONG $0x247c3b4c; BYTE $0x58 // cmp    r15, qword [rsp + 88]
	JB   LBB3_235
	LONG $0x24448b48; BYTE $0x28 // mov    rax, qword [rsp + 40]
	LONG $0x24443b48; BYTE $0x48 // cmp    rax, qword [rsp + 72]
	JAE  LBB3_259
	JMP  LBB3_235

LBB3_25:
	LONG $0xffb60f40 // movzx    edi, dil
	LONG $0x01c78348 // add    rdi, 1
	JMP  LBB3_26

LBB3_43:
	LONG $0xf6b60f40 // movzx    esi, sil
	LONG $0x01c68348 // add    rsi, 1
	JMP  LBB3_44

LBB3_61:
	LONG $0xffb60f40             // movzx    edi, dil
	LONG $0x01c78348             // add    rdi, 1
	WORD $0x8948; BYTE $0xd8     // mov    rax, rbx
	LONG $0x24442b48; BYTE $0x60 // sub    rax, qword [rsp + 96]
	JBE  LBB3_63
	JMP  LBB3_71

LBB3_101:
	LONG $0xf6b60f40 // movzx    esi, sil
	LONG $0x01c68348 // add    rsi, 1
	JMP  LBB3_102

LBB3_119:
	LONG $0xf6b60f40 // movzx    esi, sil
	LONG $0x01c68348 // add    rsi, 1
	JMP  LBB3_120

LBB3_137:
	LONG $0xffb60f40             // movzx    edi, dil
	LONG $0x01c78348             // add    rdi, 1
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	LONG $0x24442b48; BYTE $0x60 // sub    rax, qword [rsp + 96]
	JBE  LBB3_139
	JMP  LBB3_147

LBB3_177:
	WORD $0x894c; BYTE $0xd0 // mov    rax, r10
	LONG $0xffb60f40         // movzx    edi, dil
	LONG $0x01c78348         // add    rdi, 1
	JMP  LBB3_179

LBB3_196:
	LONG $0x24448b48; BYTE $0x40 // mov    rax, qword [rsp + 64]
	WORD $0xb60f; BYTE $0xc0     // movzx    eax, al
	LONG $0x01c08348             // add    rax, 1
	LONG $0x24448948; BYTE $0x40 // mov    qword [rsp + 64], rax
	JMP  LBB3_197

LBB3_214:
	LONG $0xf6b60f40             // movzx    esi, sil
	LONG $0x01c68348             // add    rsi, 1
	WORD $0x8948; BYTE $0xfa     // mov    rdx, rdi
	LONG $0x24542b48; BYTE $0x60 // sub    rdx, qword [rsp + 96]
	JBE  LBB3_216
	JMP  LBB3_223
